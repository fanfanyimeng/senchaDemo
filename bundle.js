!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=69)}([function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty;function s(e,t){return n.call(e,t)}function o(e){return!(e>=55296&&e<=57343)&&(!(e>=64976&&e<=65007)&&(65535!=(65535&e)&&65534!=(65535&e)&&(!(e>=0&&e<=8)&&(11!==e&&(!(e>=14&&e<=31)&&(!(e>=127&&e<=159)&&!(e>1114111)))))))}function i(e){if(e>65535){var t=55296+((e-=65536)>>10),r=56320+(1023&e);return String.fromCharCode(t,r)}return String.fromCharCode(e)}var a=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,c=new RegExp(a.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),u=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,l=r(4);var p=/[&<>"]/,h=/[&<>"]/g,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function d(e){return f[e]}var m=/[.?*+^$[\]\\(){}|-]/g;var g=r(1);t.lib={},t.lib.mdurl=r(5),t.lib.ucmicro=r(19),t.assign=function(e){return Array.prototype.slice.call(arguments,1).forEach(function(t){if(t){if("object"!=typeof t)throw new TypeError(t+"must be object");Object.keys(t).forEach(function(r){e[r]=t[r]})}}),e},t.isString=function(e){return"[object String]"===function(e){return Object.prototype.toString.call(e)}(e)},t.has=s,t.unescapeMd=function(e){return e.indexOf("\\")<0?e:e.replace(a,"$1")},t.unescapeAll=function(e){return e.indexOf("\\")<0&&e.indexOf("&")<0?e:e.replace(c,function(e,t,r){return t||function(e,t){var r=0;return s(l,t)?l[t]:35===t.charCodeAt(0)&&u.test(t)&&o(r="x"===t[1].toLowerCase()?parseInt(t.slice(2),16):parseInt(t.slice(1),10))?i(r):e}(e,r)})},t.isValidEntityCode=o,t.fromCodePoint=i,t.escapeHtml=function(e){return p.test(e)?e.replace(h,d):e},t.arrayReplaceAt=function(e,t,r){return[].concat(e.slice(0,t),r,e.slice(t+1))},t.isSpace=function(e){switch(e){case 9:case 32:return!0}return!1},t.isWhiteSpace=function(e){if(e>=8192&&e<=8202)return!0;switch(e){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return!0}return!1},t.isMdAsciiPunct=function(e){switch(e){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return!0;default:return!1}},t.isPunctChar=function(e){return g.test(e)},t.escapeRE=function(e){return e.replace(m,"\\$&")},t.normalizeReference=function(e){return e=e.trim().replace(/\s+/g," "),"Ṿ"==="ẞ".toLowerCase()&&(e=e.replace(/ẞ/g,"ß")),e.toLowerCase().toUpperCase()}},function(e,t){e.exports=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/},function(e,t,r){"use strict";function n(){this.__rules__=[],this.__cache__=null}n.prototype.__find__=function(e){for(var t=0;t<this.__rules__.length;t++)if(this.__rules__[t].name===e)return t;return-1},n.prototype.__compile__=function(){var e=this,t=[""];e.__rules__.forEach(function(e){e.enabled&&e.alt.forEach(function(e){t.indexOf(e)<0&&t.push(e)})}),e.__cache__={},t.forEach(function(t){e.__cache__[t]=[],e.__rules__.forEach(function(r){r.enabled&&(t&&r.alt.indexOf(t)<0||e.__cache__[t].push(r.fn))})})},n.prototype.at=function(e,t,r){var n=this.__find__(e),s=r||{};if(-1===n)throw new Error("Parser rule not found: "+e);this.__rules__[n].fn=t,this.__rules__[n].alt=s.alt||[],this.__cache__=null},n.prototype.before=function(e,t,r,n){var s=this.__find__(e),o=n||{};if(-1===s)throw new Error("Parser rule not found: "+e);this.__rules__.splice(s,0,{name:t,enabled:!0,fn:r,alt:o.alt||[]}),this.__cache__=null},n.prototype.after=function(e,t,r,n){var s=this.__find__(e),o=n||{};if(-1===s)throw new Error("Parser rule not found: "+e);this.__rules__.splice(s+1,0,{name:t,enabled:!0,fn:r,alt:o.alt||[]}),this.__cache__=null},n.prototype.push=function(e,t,r){var n=r||{};this.__rules__.push({name:e,enabled:!0,fn:t,alt:n.alt||[]}),this.__cache__=null},n.prototype.enable=function(e,t){Array.isArray(e)||(e=[e]);var r=[];return e.forEach(function(e){var n=this.__find__(e);if(n<0){if(t)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!0,r.push(e)},this),this.__cache__=null,r},n.prototype.enableOnly=function(e,t){Array.isArray(e)||(e=[e]),this.__rules__.forEach(function(e){e.enabled=!1}),this.enable(e,t)},n.prototype.disable=function(e,t){Array.isArray(e)||(e=[e]);var r=[];return e.forEach(function(e){var n=this.__find__(e);if(n<0){if(t)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!1,r.push(e)},this),this.__cache__=null,r},n.prototype.getRules=function(e){return null===this.__cache__&&this.__compile__(),this.__cache__[e]||[]},e.exports=n},function(e,t,r){"use strict";function n(e,t,r){this.type=e,this.tag=t,this.attrs=null,this.map=null,this.nesting=r,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1}n.prototype.attrIndex=function(e){var t,r,n;if(!this.attrs)return-1;for(r=0,n=(t=this.attrs).length;r<n;r++)if(t[r][0]===e)return r;return-1},n.prototype.attrPush=function(e){this.attrs?this.attrs.push(e):this.attrs=[e]},n.prototype.attrSet=function(e,t){var r=this.attrIndex(e),n=[e,t];r<0?this.attrPush(n):this.attrs[r]=n},n.prototype.attrGet=function(e){var t=this.attrIndex(e),r=null;return t>=0&&(r=this.attrs[t][1]),r},n.prototype.attrJoin=function(e,t){var r=this.attrIndex(e);r<0?this.attrPush([e,t]):this.attrs[r][1]=this.attrs[r][1]+" "+t},e.exports=n},function(e,t,r){"use strict";e.exports=r(14)},function(e,t,r){"use strict";e.exports.encode=r(15),e.exports.decode=r(16),e.exports.format=r(17),e.exports.parse=r(18)},function(e,t){e.exports=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/},function(e,t){e.exports=/[\0-\x1F\x7F-\x9F]/},function(e,t){e.exports=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/},function(e,t,r){"use strict";var n="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",s="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",o=new RegExp("^(?:"+n+"|"+s+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),i=new RegExp("^(?:"+n+"|"+s+")");e.exports.HTML_TAG_RE=o,e.exports.HTML_OPEN_CLOSE_TAG_RE=i},function(e,t,r){"use strict";function n(e,t){var r,n,s,o,i,a=[],c=t.length;for(r=0;r<c;r++)126===(s=t[r]).marker&&-1!==s.end&&(o=t[s.end],(i=e.tokens[s.token]).type="s_open",i.tag="s",i.nesting=1,i.markup="~~",i.content="",(i=e.tokens[o.token]).type="s_close",i.tag="s",i.nesting=-1,i.markup="~~",i.content="","text"===e.tokens[o.token-1].type&&"~"===e.tokens[o.token-1].content&&a.push(o.token-1));for(;a.length;){for(n=(r=a.pop())+1;n<e.tokens.length&&"s_close"===e.tokens[n].type;)n++;r!==--n&&(i=e.tokens[n],e.tokens[n]=e.tokens[r],e.tokens[r]=i)}}e.exports.tokenize=function(e,t){var r,n,s,o,i=e.pos,a=e.src.charCodeAt(i);if(t)return!1;if(126!==a)return!1;if(s=(n=e.scanDelims(e.pos,!0)).length,o=String.fromCharCode(a),s<2)return!1;for(s%2&&(e.push("text","",0).content=o,s--),r=0;r<s;r+=2)e.push("text","",0).content=o+o,e.delimiters.push({marker:a,length:0,jump:r,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},e.exports.postProcess=function(e){var t,r=e.tokens_meta,s=e.tokens_meta.length;for(n(e,e.delimiters),t=0;t<s;t++)r[t]&&r[t].delimiters&&n(e,r[t].delimiters)}},function(e,t,r){"use strict";function n(e,t){var r,n,s,o,i,a;for(r=t.length-1;r>=0;r--)95!==(n=t[r]).marker&&42!==n.marker||-1!==n.end&&(s=t[n.end],a=r>0&&t[r-1].end===n.end+1&&t[r-1].token===n.token-1&&t[n.end+1].token===s.token+1&&t[r-1].marker===n.marker,i=String.fromCharCode(n.marker),(o=e.tokens[n.token]).type=a?"strong_open":"em_open",o.tag=a?"strong":"em",o.nesting=1,o.markup=a?i+i:i,o.content="",(o=e.tokens[s.token]).type=a?"strong_close":"em_close",o.tag=a?"strong":"em",o.nesting=-1,o.markup=a?i+i:i,o.content="",a&&(e.tokens[t[r-1].token].content="",e.tokens[t[n.end+1].token].content="",r--))}e.exports.tokenize=function(e,t){var r,n,s=e.pos,o=e.src.charCodeAt(s);if(t)return!1;if(95!==o&&42!==o)return!1;for(n=e.scanDelims(e.pos,42===o),r=0;r<n.length;r++)e.push("text","",0).content=String.fromCharCode(o),e.delimiters.push({marker:o,length:n.length,jump:r,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},e.exports.postProcess=function(e){var t,r=e.tokens_meta,s=e.tokens_meta.length;for(n(e,e.delimiters),t=0;t<s;t++)r[t]&&r[t].delimiters&&n(e,r[t].delimiters)}},function(e,t,r){"use strict";e.exports=r(13)},function(e,t,r){"use strict";var n=r(0),s=r(21),o=r(25),i=r(26),a=r(34),c=r(48),u=r(61),l=r(5),p=r(63),h={default:r(66),zero:r(67),commonmark:r(68)},f=/^(vbscript|javascript|file|data):/,d=/^data:image\/(gif|png|jpeg|webp);/;function m(e){var t=e.trim().toLowerCase();return!f.test(t)||!!d.test(t)}var g=["http:","https:","mailto:"];function _(e){var t=l.parse(e,!0);if(t.hostname&&(!t.protocol||g.indexOf(t.protocol)>=0))try{t.hostname=p.toASCII(t.hostname)}catch(e){}return l.encode(l.format(t))}function b(e){var t=l.parse(e,!0);if(t.hostname&&(!t.protocol||g.indexOf(t.protocol)>=0))try{t.hostname=p.toUnicode(t.hostname)}catch(e){}return l.decode(l.format(t))}function k(e,t){if(!(this instanceof k))return new k(e,t);t||n.isString(e)||(t=e||{},e="default"),this.inline=new c,this.block=new a,this.core=new i,this.renderer=new o,this.linkify=new u,this.validateLink=m,this.normalizeLink=_,this.normalizeLinkText=b,this.utils=n,this.helpers=n.assign({},s),this.options={},this.configure(e),t&&this.set(t)}k.prototype.set=function(e){return n.assign(this.options,e),this},k.prototype.configure=function(e){var t,r=this;if(n.isString(e)&&!(e=h[t=e]))throw new Error('Wrong `markdown-it` preset "'+t+'", check name');if(!e)throw new Error("Wrong `markdown-it` preset, can't be empty");return e.options&&r.set(e.options),e.components&&Object.keys(e.components).forEach(function(t){e.components[t].rules&&r[t].ruler.enableOnly(e.components[t].rules),e.components[t].rules2&&r[t].ruler2.enableOnly(e.components[t].rules2)}),this},k.prototype.enable=function(e,t){var r=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach(function(t){r=r.concat(this[t].ruler.enable(e,!0))},this),r=r.concat(this.inline.ruler2.enable(e,!0));var n=e.filter(function(e){return r.indexOf(e)<0});if(n.length&&!t)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+n);return this},k.prototype.disable=function(e,t){var r=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach(function(t){r=r.concat(this[t].ruler.disable(e,!0))},this),r=r.concat(this.inline.ruler2.disable(e,!0));var n=e.filter(function(e){return r.indexOf(e)<0});if(n.length&&!t)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+n);return this},k.prototype.use=function(e){var t=[this].concat(Array.prototype.slice.call(arguments,1));return e.apply(e,t),this},k.prototype.parse=function(e,t){if("string"!=typeof e)throw new Error("Input data should be a String");var r=new this.core.State(e,this,t);return this.core.process(r),r.tokens},k.prototype.render=function(e,t){return t=t||{},this.renderer.render(this.parse(e,t),this.options,t)},k.prototype.parseInline=function(e,t){var r=new this.core.State(e,this,t);return r.inlineMode=!0,this.core.process(r),r.tokens},k.prototype.renderInline=function(e,t){return t=t||{},this.renderer.render(this.parseInline(e,t),this.options,t)},e.exports=k},function(e){e.exports={Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",in:"∈",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"}},function(e,t,r){"use strict";var n={};function s(e,t,r){var o,i,a,c,u,l="";for("string"!=typeof t&&(r=t,t=s.defaultChars),void 0===r&&(r=!0),u=function(e){var t,r,s=n[e];if(s)return s;for(s=n[e]=[],t=0;t<128;t++)r=String.fromCharCode(t),/^[0-9a-z]$/i.test(r)?s.push(r):s.push("%"+("0"+t.toString(16).toUpperCase()).slice(-2));for(t=0;t<e.length;t++)s[e.charCodeAt(t)]=e[t];return s}(t),o=0,i=e.length;o<i;o++)if(a=e.charCodeAt(o),r&&37===a&&o+2<i&&/^[0-9a-f]{2}$/i.test(e.slice(o+1,o+3)))l+=e.slice(o,o+3),o+=2;else if(a<128)l+=u[a];else if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&o+1<i&&(c=e.charCodeAt(o+1))>=56320&&c<=57343){l+=encodeURIComponent(e[o]+e[o+1]),o++;continue}l+="%EF%BF%BD"}else l+=encodeURIComponent(e[o]);return l}s.defaultChars=";/?:@&=+$,-_.!~*'()#",s.componentChars="-_.!~*'()",e.exports=s},function(e,t,r){"use strict";var n={};function s(e,t){var r;return"string"!=typeof t&&(t=s.defaultChars),r=function(e){var t,r,s=n[e];if(s)return s;for(s=n[e]=[],t=0;t<128;t++)r=String.fromCharCode(t),s.push(r);for(t=0;t<e.length;t++)s[r=e.charCodeAt(t)]="%"+("0"+r.toString(16).toUpperCase()).slice(-2);return s}(t),e.replace(/(%[a-f0-9]{2})+/gi,function(e){var t,n,s,o,i,a,c,u="";for(t=0,n=e.length;t<n;t+=3)(s=parseInt(e.slice(t+1,t+3),16))<128?u+=r[s]:192==(224&s)&&t+3<n&&128==(192&(o=parseInt(e.slice(t+4,t+6),16)))?(u+=(c=s<<6&1984|63&o)<128?"��":String.fromCharCode(c),t+=3):224==(240&s)&&t+6<n&&(o=parseInt(e.slice(t+4,t+6),16),i=parseInt(e.slice(t+7,t+9),16),128==(192&o)&&128==(192&i))?(u+=(c=s<<12&61440|o<<6&4032|63&i)<2048||c>=55296&&c<=57343?"���":String.fromCharCode(c),t+=6):240==(248&s)&&t+9<n&&(o=parseInt(e.slice(t+4,t+6),16),i=parseInt(e.slice(t+7,t+9),16),a=parseInt(e.slice(t+10,t+12),16),128==(192&o)&&128==(192&i)&&128==(192&a))?((c=s<<18&1835008|o<<12&258048|i<<6&4032|63&a)<65536||c>1114111?u+="����":(c-=65536,u+=String.fromCharCode(55296+(c>>10),56320+(1023&c))),t+=9):u+="�";return u})}s.defaultChars=";/?:@&=+$,#",s.componentChars="",e.exports=s},function(e,t,r){"use strict";e.exports=function(e){var t="";return t+=e.protocol||"",t+=e.slashes?"//":"",t+=e.auth?e.auth+"@":"",e.hostname&&-1!==e.hostname.indexOf(":")?t+="["+e.hostname+"]":t+=e.hostname||"",t+=e.port?":"+e.port:"",t+=e.pathname||"",t+=e.search||"",t+=e.hash||""}},function(e,t,r){"use strict";function n(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null}var s=/^([a-z0-9.+-]+:)/i,o=/:[0-9]*$/,i=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,a=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(a),u=["%","/","?",";","#"].concat(c),l=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,f={javascript:!0,"javascript:":!0},d={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};n.prototype.parse=function(e,t){var r,n,o,a,c,m=e;if(m=m.trim(),!t&&1===e.split("#").length){var g=i.exec(m);if(g)return this.pathname=g[1],g[2]&&(this.search=g[2]),this}var _=s.exec(m);if(_&&(o=(_=_[0]).toLowerCase(),this.protocol=_,m=m.substr(_.length)),(t||_||m.match(/^\/\/[^@\/]+@[^@\/]+/))&&(!(c="//"===m.substr(0,2))||_&&f[_]||(m=m.substr(2),this.slashes=!0)),!f[_]&&(c||_&&!d[_])){var b,k,v=-1;for(r=0;r<l.length;r++)-1!==(a=m.indexOf(l[r]))&&(-1===v||a<v)&&(v=a);for(-1!==(k=-1===v?m.lastIndexOf("@"):m.lastIndexOf("@",v))&&(b=m.slice(0,k),m=m.slice(k+1),this.auth=b),v=-1,r=0;r<u.length;r++)-1!==(a=m.indexOf(u[r]))&&(-1===v||a<v)&&(v=a);-1===v&&(v=m.length),":"===m[v-1]&&v--;var x=m.slice(0,v);m=m.slice(v),this.parseHost(x),this.hostname=this.hostname||"";var y="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!y){var C=this.hostname.split(/\./);for(r=0,n=C.length;r<n;r++){var A=C[r];if(A&&!A.match(p)){for(var w="",D=0,E=A.length;D<E;D++)A.charCodeAt(D)>127?w+="x":w+=A[D];if(!w.match(p)){var q=C.slice(0,r),S=C.slice(r+1),F=A.match(h);F&&(q.push(F[1]),S.unshift(F[2])),S.length&&(m=S.join(".")+m),this.hostname=q.join(".");break}}}}this.hostname.length>255&&(this.hostname=""),y&&(this.hostname=this.hostname.substr(1,this.hostname.length-2))}var L=m.indexOf("#");-1!==L&&(this.hash=m.substr(L),m=m.slice(0,L));var z=m.indexOf("?");return-1!==z&&(this.search=m.substr(z),m=m.slice(0,z)),m&&(this.pathname=m),d[o]&&this.hostname&&!this.pathname&&(this.pathname=""),this},n.prototype.parseHost=function(e){var t=o.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)},e.exports=function(e,t){if(e&&e instanceof n)return e;var r=new n;return r.parse(e,t),r}},function(e,t,r){"use strict";t.Any=r(6),t.Cc=r(7),t.Cf=r(20),t.P=r(1),t.Z=r(8)},function(e,t){e.exports=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/},function(e,t,r){"use strict";t.parseLinkLabel=r(22),t.parseLinkDestination=r(23),t.parseLinkTitle=r(24)},function(e,t,r){"use strict";e.exports=function(e,t,r){var n,s,o,i,a=-1,c=e.posMax,u=e.pos;for(e.pos=t+1,n=1;e.pos<c;){if(93===(o=e.src.charCodeAt(e.pos))&&0===--n){s=!0;break}if(i=e.pos,e.md.inline.skipToken(e),91===o)if(i===e.pos-1)n++;else if(r)return e.pos=u,-1}return s&&(a=e.pos),e.pos=u,a}},function(e,t,r){"use strict";var n=r(0).unescapeAll;e.exports=function(e,t,r){var s,o,i=t,a={ok:!1,pos:0,lines:0,str:""};if(60===e.charCodeAt(t)){for(t++;t<r;){if(10===(s=e.charCodeAt(t)))return a;if(62===s)return a.pos=t+1,a.str=n(e.slice(i+1,t)),a.ok=!0,a;92===s&&t+1<r?t+=2:t++}return a}for(o=0;t<r&&32!==(s=e.charCodeAt(t))&&!(s<32||127===s);)if(92===s&&t+1<r)t+=2;else{if(40===s&&o++,41===s){if(0===o)break;o--}t++}return i===t?a:0!==o?a:(a.str=n(e.slice(i,t)),a.lines=0,a.pos=t,a.ok=!0,a)}},function(e,t,r){"use strict";var n=r(0).unescapeAll;e.exports=function(e,t,r){var s,o,i=0,a=t,c={ok:!1,pos:0,lines:0,str:""};if(t>=r)return c;if(34!==(o=e.charCodeAt(t))&&39!==o&&40!==o)return c;for(t++,40===o&&(o=41);t<r;){if((s=e.charCodeAt(t))===o)return c.pos=t+1,c.lines=i,c.str=n(e.slice(a+1,t)),c.ok=!0,c;10===s?i++:92===s&&t+1<r&&(t++,10===e.charCodeAt(t)&&i++),t++}return c}},function(e,t,r){"use strict";var n=r(0).assign,s=r(0).unescapeAll,o=r(0).escapeHtml,i={};function a(){this.rules=n({},i)}i.code_inline=function(e,t,r,n,s){var i=e[t];return"<code"+s.renderAttrs(i)+">"+o(e[t].content)+"</code>"},i.code_block=function(e,t,r,n,s){var i=e[t];return"<pre"+s.renderAttrs(i)+"><code>"+o(e[t].content)+"</code></pre>\n"},i.fence=function(e,t,r,n,i){var a,c,u,l,p=e[t],h=p.info?s(p.info).trim():"",f="";return h&&(f=h.split(/\s+/g)[0]),0===(a=r.highlight&&r.highlight(p.content,f)||o(p.content)).indexOf("<pre")?a+"\n":h?(c=p.attrIndex("class"),u=p.attrs?p.attrs.slice():[],c<0?u.push(["class",r.langPrefix+f]):u[c][1]+=" "+r.langPrefix+f,l={attrs:u},"<pre><code"+i.renderAttrs(l)+">"+a+"</code></pre>\n"):"<pre><code"+i.renderAttrs(p)+">"+a+"</code></pre>\n"},i.image=function(e,t,r,n,s){var o=e[t];return o.attrs[o.attrIndex("alt")][1]=s.renderInlineAsText(o.children,r,n),s.renderToken(e,t,r)},i.hardbreak=function(e,t,r){return r.xhtmlOut?"<br />\n":"<br>\n"},i.softbreak=function(e,t,r){return r.breaks?r.xhtmlOut?"<br />\n":"<br>\n":"\n"},i.text=function(e,t){return o(e[t].content)},i.html_block=function(e,t){return e[t].content},i.html_inline=function(e,t){return e[t].content},a.prototype.renderAttrs=function(e){var t,r,n;if(!e.attrs)return"";for(n="",t=0,r=e.attrs.length;t<r;t++)n+=" "+o(e.attrs[t][0])+'="'+o(e.attrs[t][1])+'"';return n},a.prototype.renderToken=function(e,t,r){var n,s="",o=!1,i=e[t];return i.hidden?"":(i.block&&-1!==i.nesting&&t&&e[t-1].hidden&&(s+="\n"),s+=(-1===i.nesting?"</":"<")+i.tag,s+=this.renderAttrs(i),0===i.nesting&&r.xhtmlOut&&(s+=" /"),i.block&&(o=!0,1===i.nesting&&t+1<e.length&&("inline"===(n=e[t+1]).type||n.hidden?o=!1:-1===n.nesting&&n.tag===i.tag&&(o=!1))),s+=o?">\n":">")},a.prototype.renderInline=function(e,t,r){for(var n,s="",o=this.rules,i=0,a=e.length;i<a;i++)void 0!==o[n=e[i].type]?s+=o[n](e,i,t,r,this):s+=this.renderToken(e,i,t);return s},a.prototype.renderInlineAsText=function(e,t,r){for(var n="",s=0,o=e.length;s<o;s++)"text"===e[s].type?n+=e[s].content:"image"===e[s].type&&(n+=this.renderInlineAsText(e[s].children,t,r));return n},a.prototype.render=function(e,t,r){var n,s,o,i="",a=this.rules;for(n=0,s=e.length;n<s;n++)"inline"===(o=e[n].type)?i+=this.renderInline(e[n].children,t,r):void 0!==a[o]?i+=a[e[n].type](e,n,t,r,this):i+=this.renderToken(e,n,t,r);return i},e.exports=a},function(e,t,r){"use strict";var n=r(2),s=[["normalize",r(27)],["block",r(28)],["inline",r(29)],["linkify",r(30)],["replacements",r(31)],["smartquotes",r(32)]];function o(){this.ruler=new n;for(var e=0;e<s.length;e++)this.ruler.push(s[e][0],s[e][1])}o.prototype.process=function(e){var t,r,n;for(t=0,r=(n=this.ruler.getRules("")).length;t<r;t++)n[t](e)},o.prototype.State=r(33),e.exports=o},function(e,t,r){"use strict";var n=/\r\n?|\n/g,s=/\0/g;e.exports=function(e){var t;t=(t=e.src.replace(n,"\n")).replace(s,"�"),e.src=t}},function(e,t,r){"use strict";e.exports=function(e){var t;e.inlineMode?((t=new e.Token("inline","",0)).content=e.src,t.map=[0,1],t.children=[],e.tokens.push(t)):e.md.block.parse(e.src,e.md,e.env,e.tokens)}},function(e,t,r){"use strict";e.exports=function(e){var t,r,n,s=e.tokens;for(r=0,n=s.length;r<n;r++)"inline"===(t=s[r]).type&&e.md.inline.parse(t.content,e.md,e.env,t.children)}},function(e,t,r){"use strict";var n=r(0).arrayReplaceAt;function s(e){return/^<\/a\s*>/i.test(e)}e.exports=function(e){var t,r,o,i,a,c,u,l,p,h,f,d,m,g,_,b,k,v,x=e.tokens;if(e.md.options.linkify)for(r=0,o=x.length;r<o;r++)if("inline"===x[r].type&&e.md.linkify.pretest(x[r].content))for(m=0,t=(i=x[r].children).length-1;t>=0;t--)if("link_close"!==(c=i[t]).type){if("html_inline"===c.type&&(v=c.content,/^<a[>\s]/i.test(v)&&m>0&&m--,s(c.content)&&m++),!(m>0)&&"text"===c.type&&e.md.linkify.test(c.content)){for(p=c.content,k=e.md.linkify.match(p),u=[],d=c.level,f=0,l=0;l<k.length;l++)g=k[l].url,_=e.md.normalizeLink(g),e.md.validateLink(_)&&(b=k[l].text,b=k[l].schema?"mailto:"!==k[l].schema||/^mailto:/i.test(b)?e.md.normalizeLinkText(b):e.md.normalizeLinkText("mailto:"+b).replace(/^mailto:/,""):e.md.normalizeLinkText("http://"+b).replace(/^http:\/\//,""),(h=k[l].index)>f&&((a=new e.Token("text","",0)).content=p.slice(f,h),a.level=d,u.push(a)),(a=new e.Token("link_open","a",1)).attrs=[["href",_]],a.level=d++,a.markup="linkify",a.info="auto",u.push(a),(a=new e.Token("text","",0)).content=b,a.level=d,u.push(a),(a=new e.Token("link_close","a",-1)).level=--d,a.markup="linkify",a.info="auto",u.push(a),f=k[l].lastIndex);f<p.length&&((a=new e.Token("text","",0)).content=p.slice(f),a.level=d,u.push(a)),x[r].children=i=n(i,t,u)}}else for(t--;i[t].level!==c.level&&"link_open"!==i[t].type;)t--}},function(e,t,r){"use strict";var n=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,s=/\((c|tm|r|p)\)/i,o=/\((c|tm|r|p)\)/gi,i={c:"©",r:"®",p:"§",tm:"™"};function a(e,t){return i[t.toLowerCase()]}function c(e){var t,r,n=0;for(t=e.length-1;t>=0;t--)"text"!==(r=e[t]).type||n||(r.content=r.content.replace(o,a)),"link_open"===r.type&&"auto"===r.info&&n--,"link_close"===r.type&&"auto"===r.info&&n++}function u(e){var t,r,s=0;for(t=e.length-1;t>=0;t--)"text"!==(r=e[t]).type||s||n.test(r.content)&&(r.content=r.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---([^-]|$)/gm,"$1—$2").replace(/(^|\s)--(\s|$)/gm,"$1–$2").replace(/(^|[^-\s])--([^-\s]|$)/gm,"$1–$2")),"link_open"===r.type&&"auto"===r.info&&s--,"link_close"===r.type&&"auto"===r.info&&s++}e.exports=function(e){var t;if(e.md.options.typographer)for(t=e.tokens.length-1;t>=0;t--)"inline"===e.tokens[t].type&&(s.test(e.tokens[t].content)&&c(e.tokens[t].children),n.test(e.tokens[t].content)&&u(e.tokens[t].children))}},function(e,t,r){"use strict";var n=r(0).isWhiteSpace,s=r(0).isPunctChar,o=r(0).isMdAsciiPunct,i=/['"]/,a=/['"]/g,c="’";function u(e,t,r){return e.substr(0,t)+r+e.substr(t+1)}function l(e,t){var r,i,l,p,h,f,d,m,g,_,b,k,v,x,y,C,A,w,D,E,q;for(D=[],r=0;r<e.length;r++){for(i=e[r],d=e[r].level,A=D.length-1;A>=0&&!(D[A].level<=d);A--);if(D.length=A+1,"text"===i.type){h=0,f=(l=i.content).length;e:for(;h<f&&(a.lastIndex=h,p=a.exec(l));){if(y=C=!0,h=p.index+1,w="'"===p[0],g=32,p.index-1>=0)g=l.charCodeAt(p.index-1);else for(A=r-1;A>=0&&("softbreak"!==e[A].type&&"hardbreak"!==e[A].type);A--)if("text"===e[A].type){g=e[A].content.charCodeAt(e[A].content.length-1);break}if(_=32,h<f)_=l.charCodeAt(h);else for(A=r+1;A<e.length&&("softbreak"!==e[A].type&&"hardbreak"!==e[A].type);A++)if("text"===e[A].type){_=e[A].content.charCodeAt(0);break}if(b=o(g)||s(String.fromCharCode(g)),k=o(_)||s(String.fromCharCode(_)),v=n(g),(x=n(_))?y=!1:k&&(v||b||(y=!1)),v?C=!1:b&&(x||k||(C=!1)),34===_&&'"'===p[0]&&g>=48&&g<=57&&(C=y=!1),y&&C&&(y=!1,C=k),y||C){if(C)for(A=D.length-1;A>=0&&(m=D[A],!(D[A].level<d));A--)if(m.single===w&&D[A].level===d){m=D[A],w?(E=t.md.options.quotes[2],q=t.md.options.quotes[3]):(E=t.md.options.quotes[0],q=t.md.options.quotes[1]),i.content=u(i.content,p.index,q),e[m.token].content=u(e[m.token].content,m.pos,E),h+=q.length-1,m.token===r&&(h+=E.length-1),f=(l=i.content).length,D.length=A;continue e}y?D.push({token:r,pos:p.index,single:w,level:d}):C&&w&&(i.content=u(i.content,p.index,c))}else w&&(i.content=u(i.content,p.index,c))}}}}e.exports=function(e){var t;if(e.md.options.typographer)for(t=e.tokens.length-1;t>=0;t--)"inline"===e.tokens[t].type&&i.test(e.tokens[t].content)&&l(e.tokens[t].children,e)}},function(e,t,r){"use strict";var n=r(3);function s(e,t,r){this.src=e,this.env=r,this.tokens=[],this.inlineMode=!1,this.md=t}s.prototype.Token=n,e.exports=s},function(e,t,r){"use strict";var n=r(2),s=[["table",r(35),["paragraph","reference"]],["code",r(36)],["fence",r(37),["paragraph","reference","blockquote","list"]],["blockquote",r(38),["paragraph","reference","blockquote","list"]],["hr",r(39),["paragraph","reference","blockquote","list"]],["list",r(40),["paragraph","reference","blockquote"]],["reference",r(41)],["heading",r(42),["paragraph","reference","blockquote"]],["lheading",r(43)],["html_block",r(44),["paragraph","reference","blockquote"]],["paragraph",r(46)]];function o(){this.ruler=new n;for(var e=0;e<s.length;e++)this.ruler.push(s[e][0],s[e][1],{alt:(s[e][2]||[]).slice()})}o.prototype.tokenize=function(e,t,r){for(var n,s=this.ruler.getRules(""),o=s.length,i=t,a=!1,c=e.md.options.maxNesting;i<r&&(e.line=i=e.skipEmptyLines(i),!(i>=r))&&!(e.sCount[i]<e.blkIndent);){if(e.level>=c){e.line=r;break}for(n=0;n<o&&!s[n](e,i,r,!1);n++);e.tight=!a,e.isEmpty(e.line-1)&&(a=!0),(i=e.line)<r&&e.isEmpty(i)&&(a=!0,i++,e.line=i)}},o.prototype.parse=function(e,t,r,n){var s;e&&(s=new this.State(e,t,r,n),this.tokenize(s,s.line,s.lineMax))},o.prototype.State=r(47),e.exports=o},function(e,t,r){"use strict";var n=r(0).isSpace;function s(e,t){var r=e.bMarks[t]+e.blkIndent,n=e.eMarks[t];return e.src.substr(r,n-r)}function o(e){var t,r=[],n=0,s=e.length,o=0,i=0,a=!1,c=0;for(t=e.charCodeAt(n);n<s;)96===t?a?(a=!1,c=n):o%2==0&&(a=!0,c=n):124!==t||o%2!=0||a||(r.push(e.substring(i,n)),i=n+1),92===t?o++:o=0,++n===s&&a&&(a=!1,n=c+1),t=e.charCodeAt(n);return r.push(e.substring(i)),r}e.exports=function(e,t,r,i){var a,c,u,l,p,h,f,d,m,g,_,b;if(t+2>r)return!1;if(p=t+1,e.sCount[p]<e.blkIndent)return!1;if(e.sCount[p]-e.blkIndent>=4)return!1;if((u=e.bMarks[p]+e.tShift[p])>=e.eMarks[p])return!1;if(124!==(a=e.src.charCodeAt(u++))&&45!==a&&58!==a)return!1;for(;u<e.eMarks[p];){if(124!==(a=e.src.charCodeAt(u))&&45!==a&&58!==a&&!n(a))return!1;u++}for(h=(c=s(e,t+1)).split("|"),m=[],l=0;l<h.length;l++){if(!(g=h[l].trim())){if(0===l||l===h.length-1)continue;return!1}if(!/^:?-+:?$/.test(g))return!1;58===g.charCodeAt(g.length-1)?m.push(58===g.charCodeAt(0)?"center":"right"):58===g.charCodeAt(0)?m.push("left"):m.push("")}if(-1===(c=s(e,t).trim()).indexOf("|"))return!1;if(e.sCount[t]-e.blkIndent>=4)return!1;if((f=(h=o(c.replace(/^\||\|$/g,""))).length)>m.length)return!1;if(i)return!0;for((d=e.push("table_open","table",1)).map=_=[t,0],(d=e.push("thead_open","thead",1)).map=[t,t+1],(d=e.push("tr_open","tr",1)).map=[t,t+1],l=0;l<h.length;l++)(d=e.push("th_open","th",1)).map=[t,t+1],m[l]&&(d.attrs=[["style","text-align:"+m[l]]]),(d=e.push("inline","",0)).content=h[l].trim(),d.map=[t,t+1],d.children=[],d=e.push("th_close","th",-1);for(d=e.push("tr_close","tr",-1),d=e.push("thead_close","thead",-1),(d=e.push("tbody_open","tbody",1)).map=b=[t+2,0],p=t+2;p<r&&!(e.sCount[p]<e.blkIndent)&&-1!==(c=s(e,p).trim()).indexOf("|")&&!(e.sCount[p]-e.blkIndent>=4);p++){for(h=o(c.replace(/^\||\|$/g,"")),d=e.push("tr_open","tr",1),l=0;l<f;l++)d=e.push("td_open","td",1),m[l]&&(d.attrs=[["style","text-align:"+m[l]]]),(d=e.push("inline","",0)).content=h[l]?h[l].trim():"",d.children=[],d=e.push("td_close","td",-1);d=e.push("tr_close","tr",-1)}return d=e.push("tbody_close","tbody",-1),d=e.push("table_close","table",-1),_[1]=b[1]=p,e.line=p,!0}},function(e,t,r){"use strict";e.exports=function(e,t,r){var n,s,o;if(e.sCount[t]-e.blkIndent<4)return!1;for(s=n=t+1;n<r;)if(e.isEmpty(n))n++;else{if(!(e.sCount[n]-e.blkIndent>=4))break;s=++n}return e.line=s,(o=e.push("code_block","code",0)).content=e.getLines(t,s,4+e.blkIndent,!0),o.map=[t,e.line],!0}},function(e,t,r){"use strict";e.exports=function(e,t,r,n){var s,o,i,a,c,u,l,p=!1,h=e.bMarks[t]+e.tShift[t],f=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(h+3>f)return!1;if(126!==(s=e.src.charCodeAt(h))&&96!==s)return!1;if(c=h,(o=(h=e.skipChars(h,s))-c)<3)return!1;if(l=e.src.slice(c,h),i=e.src.slice(h,f),96===s&&i.indexOf(String.fromCharCode(s))>=0)return!1;if(n)return!0;for(a=t;!(++a>=r)&&!((h=c=e.bMarks[a]+e.tShift[a])<(f=e.eMarks[a])&&e.sCount[a]<e.blkIndent);)if(e.src.charCodeAt(h)===s&&!(e.sCount[a]-e.blkIndent>=4||(h=e.skipChars(h,s))-c<o||(h=e.skipSpaces(h))<f)){p=!0;break}return o=e.sCount[t],e.line=a+(p?1:0),(u=e.push("fence","code",0)).info=i,u.content=e.getLines(t+1,a,o,!0),u.markup=l,u.map=[t,e.line],!0}},function(e,t,r){"use strict";var n=r(0).isSpace;e.exports=function(e,t,r,s){var o,i,a,c,u,l,p,h,f,d,m,g,_,b,k,v,x,y,C,A,w=e.lineMax,D=e.bMarks[t]+e.tShift[t],E=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(62!==e.src.charCodeAt(D++))return!1;if(s)return!0;for(c=f=e.sCount[t]+D-(e.bMarks[t]+e.tShift[t]),32===e.src.charCodeAt(D)?(D++,c++,f++,o=!1,v=!0):9===e.src.charCodeAt(D)?(v=!0,(e.bsCount[t]+f)%4==3?(D++,c++,f++,o=!1):o=!0):v=!1,d=[e.bMarks[t]],e.bMarks[t]=D;D<E&&(i=e.src.charCodeAt(D),n(i));)9===i?f+=4-(f+e.bsCount[t]+(o?1:0))%4:f++,D++;for(m=[e.bsCount[t]],e.bsCount[t]=e.sCount[t]+1+(v?1:0),l=D>=E,b=[e.sCount[t]],e.sCount[t]=f-c,k=[e.tShift[t]],e.tShift[t]=D-e.bMarks[t],y=e.md.block.ruler.getRules("blockquote"),_=e.parentType,e.parentType="blockquote",A=!1,h=t+1;h<r&&(e.sCount[h]<e.blkIndent&&(A=!0),!((D=e.bMarks[h]+e.tShift[h])>=(E=e.eMarks[h])));h++)if(62!==e.src.charCodeAt(D++)||A){if(l)break;for(x=!1,a=0,u=y.length;a<u;a++)if(y[a](e,h,r,!0)){x=!0;break}if(x){e.lineMax=h,0!==e.blkIndent&&(d.push(e.bMarks[h]),m.push(e.bsCount[h]),k.push(e.tShift[h]),b.push(e.sCount[h]),e.sCount[h]-=e.blkIndent);break}d.push(e.bMarks[h]),m.push(e.bsCount[h]),k.push(e.tShift[h]),b.push(e.sCount[h]),e.sCount[h]=-1}else{for(c=f=e.sCount[h]+D-(e.bMarks[h]+e.tShift[h]),32===e.src.charCodeAt(D)?(D++,c++,f++,o=!1,v=!0):9===e.src.charCodeAt(D)?(v=!0,(e.bsCount[h]+f)%4==3?(D++,c++,f++,o=!1):o=!0):v=!1,d.push(e.bMarks[h]),e.bMarks[h]=D;D<E&&(i=e.src.charCodeAt(D),n(i));)9===i?f+=4-(f+e.bsCount[h]+(o?1:0))%4:f++,D++;l=D>=E,m.push(e.bsCount[h]),e.bsCount[h]=e.sCount[h]+1+(v?1:0),b.push(e.sCount[h]),e.sCount[h]=f-c,k.push(e.tShift[h]),e.tShift[h]=D-e.bMarks[h]}for(g=e.blkIndent,e.blkIndent=0,(C=e.push("blockquote_open","blockquote",1)).markup=">",C.map=p=[t,0],e.md.block.tokenize(e,t,h),(C=e.push("blockquote_close","blockquote",-1)).markup=">",e.lineMax=w,e.parentType=_,p[1]=e.line,a=0;a<k.length;a++)e.bMarks[a+t]=d[a],e.tShift[a+t]=k[a],e.sCount[a+t]=b[a],e.bsCount[a+t]=m[a];return e.blkIndent=g,!0}},function(e,t,r){"use strict";var n=r(0).isSpace;e.exports=function(e,t,r,s){var o,i,a,c,u=e.bMarks[t]+e.tShift[t],l=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(42!==(o=e.src.charCodeAt(u++))&&45!==o&&95!==o)return!1;for(i=1;u<l;){if((a=e.src.charCodeAt(u++))!==o&&!n(a))return!1;a===o&&i++}return!(i<3)&&(!!s||(e.line=t+1,(c=e.push("hr","hr",0)).map=[t,e.line],c.markup=Array(i+1).join(String.fromCharCode(o)),!0))}},function(e,t,r){"use strict";var n=r(0).isSpace;function s(e,t){var r,s,o,i;return s=e.bMarks[t]+e.tShift[t],o=e.eMarks[t],42!==(r=e.src.charCodeAt(s++))&&45!==r&&43!==r?-1:s<o&&(i=e.src.charCodeAt(s),!n(i))?-1:s}function o(e,t){var r,s=e.bMarks[t]+e.tShift[t],o=s,i=e.eMarks[t];if(o+1>=i)return-1;if((r=e.src.charCodeAt(o++))<48||r>57)return-1;for(;;){if(o>=i)return-1;if(!((r=e.src.charCodeAt(o++))>=48&&r<=57)){if(41===r||46===r)break;return-1}if(o-s>=10)return-1}return o<i&&(r=e.src.charCodeAt(o),!n(r))?-1:o}e.exports=function(e,t,r,n){var i,a,c,u,l,p,h,f,d,m,g,_,b,k,v,x,y,C,A,w,D,E,q,S,F,L,z,T,M=!1,R=!0;if(e.sCount[t]-e.blkIndent>=4)return!1;if(e.listIndent>=0&&e.sCount[t]-e.listIndent>=4&&e.sCount[t]<e.blkIndent)return!1;if(n&&"paragraph"===e.parentType&&e.tShift[t]>=e.blkIndent&&(M=!0),(q=o(e,t))>=0){if(h=!0,F=e.bMarks[t]+e.tShift[t],b=Number(e.src.substr(F,q-F-1)),M&&1!==b)return!1}else{if(!((q=s(e,t))>=0))return!1;h=!1}if(M&&e.skipSpaces(q)>=e.eMarks[t])return!1;if(_=e.src.charCodeAt(q-1),n)return!0;for(g=e.tokens.length,h?(T=e.push("ordered_list_open","ol",1),1!==b&&(T.attrs=[["start",b]])):T=e.push("bullet_list_open","ul",1),T.map=m=[t,0],T.markup=String.fromCharCode(_),v=t,S=!1,z=e.md.block.ruler.getRules("list"),C=e.parentType,e.parentType="list";v<r;){for(E=q,k=e.eMarks[v],p=x=e.sCount[v]+q-(e.bMarks[t]+e.tShift[t]);E<k;){if(9===(i=e.src.charCodeAt(E)))x+=4-(x+e.bsCount[v])%4;else{if(32!==i)break;x++}E++}if((l=(a=E)>=k?1:x-p)>4&&(l=1),u=p+l,(T=e.push("list_item_open","li",1)).markup=String.fromCharCode(_),T.map=f=[t,0],D=e.tight,w=e.tShift[t],A=e.sCount[t],y=e.listIndent,e.listIndent=e.blkIndent,e.blkIndent=u,e.tight=!0,e.tShift[t]=a-e.bMarks[t],e.sCount[t]=x,a>=k&&e.isEmpty(t+1)?e.line=Math.min(e.line+2,r):e.md.block.tokenize(e,t,r,!0),e.tight&&!S||(R=!1),S=e.line-t>1&&e.isEmpty(e.line-1),e.blkIndent=e.listIndent,e.listIndent=y,e.tShift[t]=w,e.sCount[t]=A,e.tight=D,(T=e.push("list_item_close","li",-1)).markup=String.fromCharCode(_),v=t=e.line,f[1]=v,a=e.bMarks[t],v>=r)break;if(e.sCount[v]<e.blkIndent)break;if(e.sCount[t]-e.blkIndent>=4)break;for(L=!1,c=0,d=z.length;c<d;c++)if(z[c](e,v,r,!0)){L=!0;break}if(L)break;if(h){if((q=o(e,v))<0)break}else if((q=s(e,v))<0)break;if(_!==e.src.charCodeAt(q-1))break}return(T=h?e.push("ordered_list_close","ol",-1):e.push("bullet_list_close","ul",-1)).markup=String.fromCharCode(_),m[1]=v,e.line=v,e.parentType=C,R&&function(e,t){var r,n,s=e.level+2;for(r=t+2,n=e.tokens.length-2;r<n;r++)e.tokens[r].level===s&&"paragraph_open"===e.tokens[r].type&&(e.tokens[r+2].hidden=!0,e.tokens[r].hidden=!0,r+=2)}(e,g),!0}},function(e,t,r){"use strict";var n=r(0).normalizeReference,s=r(0).isSpace;e.exports=function(e,t,r,o){var i,a,c,u,l,p,h,f,d,m,g,_,b,k,v,x,y=0,C=e.bMarks[t]+e.tShift[t],A=e.eMarks[t],w=t+1;if(e.sCount[t]-e.blkIndent>=4)return!1;if(91!==e.src.charCodeAt(C))return!1;for(;++C<A;)if(93===e.src.charCodeAt(C)&&92!==e.src.charCodeAt(C-1)){if(C+1===A)return!1;if(58!==e.src.charCodeAt(C+1))return!1;break}for(u=e.lineMax,v=e.md.block.ruler.getRules("reference"),m=e.parentType,e.parentType="reference";w<u&&!e.isEmpty(w);w++)if(!(e.sCount[w]-e.blkIndent>3||e.sCount[w]<0)){for(k=!1,p=0,h=v.length;p<h;p++)if(v[p](e,w,u,!0)){k=!0;break}if(k)break}for(A=(b=e.getLines(t,w,e.blkIndent,!1).trim()).length,C=1;C<A;C++){if(91===(i=b.charCodeAt(C)))return!1;if(93===i){d=C;break}10===i?y++:92===i&&++C<A&&10===b.charCodeAt(C)&&y++}if(d<0||58!==b.charCodeAt(d+1))return!1;for(C=d+2;C<A;C++)if(10===(i=b.charCodeAt(C)))y++;else if(!s(i))break;if(!(g=e.md.helpers.parseLinkDestination(b,C,A)).ok)return!1;if(l=e.md.normalizeLink(g.str),!e.md.validateLink(l))return!1;for(a=C=g.pos,c=y+=g.lines,_=C;C<A;C++)if(10===(i=b.charCodeAt(C)))y++;else if(!s(i))break;for(g=e.md.helpers.parseLinkTitle(b,C,A),C<A&&_!==C&&g.ok?(x=g.str,C=g.pos,y+=g.lines):(x="",C=a,y=c);C<A&&(i=b.charCodeAt(C),s(i));)C++;if(C<A&&10!==b.charCodeAt(C)&&x)for(x="",C=a,y=c;C<A&&(i=b.charCodeAt(C),s(i));)C++;return!(C<A&&10!==b.charCodeAt(C))&&(!!(f=n(b.slice(1,d)))&&(!!o||(void 0===e.env.references&&(e.env.references={}),void 0===e.env.references[f]&&(e.env.references[f]={title:x,href:l}),e.parentType=m,e.line=t+y+1,!0)))}},function(e,t,r){"use strict";var n=r(0).isSpace;e.exports=function(e,t,r,s){var o,i,a,c,u=e.bMarks[t]+e.tShift[t],l=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(35!==(o=e.src.charCodeAt(u))||u>=l)return!1;for(i=1,o=e.src.charCodeAt(++u);35===o&&u<l&&i<=6;)i++,o=e.src.charCodeAt(++u);return!(i>6||u<l&&!n(o))&&(!!s||(l=e.skipSpacesBack(l,u),(a=e.skipCharsBack(l,35,u))>u&&n(e.src.charCodeAt(a-1))&&(l=a),e.line=t+1,(c=e.push("heading_open","h"+String(i),1)).markup="########".slice(0,i),c.map=[t,e.line],(c=e.push("inline","",0)).content=e.src.slice(u,l).trim(),c.map=[t,e.line],c.children=[],(c=e.push("heading_close","h"+String(i),-1)).markup="########".slice(0,i),!0))}},function(e,t,r){"use strict";e.exports=function(e,t,r){var n,s,o,i,a,c,u,l,p,h,f=t+1,d=e.md.block.ruler.getRules("paragraph");if(e.sCount[t]-e.blkIndent>=4)return!1;for(h=e.parentType,e.parentType="paragraph";f<r&&!e.isEmpty(f);f++)if(!(e.sCount[f]-e.blkIndent>3)){if(e.sCount[f]>=e.blkIndent&&(c=e.bMarks[f]+e.tShift[f])<(u=e.eMarks[f])&&(45===(p=e.src.charCodeAt(c))||61===p)&&(c=e.skipChars(c,p),(c=e.skipSpaces(c))>=u)){l=61===p?1:2;break}if(!(e.sCount[f]<0)){for(s=!1,o=0,i=d.length;o<i;o++)if(d[o](e,f,r,!0)){s=!0;break}if(s)break}}return!!l&&(n=e.getLines(t,f,e.blkIndent,!1).trim(),e.line=f+1,(a=e.push("heading_open","h"+String(l),1)).markup=String.fromCharCode(p),a.map=[t,e.line],(a=e.push("inline","",0)).content=n,a.map=[t,e.line-1],a.children=[],(a=e.push("heading_close","h"+String(l),-1)).markup=String.fromCharCode(p),e.parentType=h,!0)}},function(e,t,r){"use strict";var n=r(45),s=r(9).HTML_OPEN_CLOSE_TAG_RE,o=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+n.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(s.source+"\\s*$"),/^$/,!1]];e.exports=function(e,t,r,n){var s,i,a,c,u=e.bMarks[t]+e.tShift[t],l=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(!e.md.options.html)return!1;if(60!==e.src.charCodeAt(u))return!1;for(c=e.src.slice(u,l),s=0;s<o.length&&!o[s][0].test(c);s++);if(s===o.length)return!1;if(n)return o[s][2];if(i=t+1,!o[s][1].test(c))for(;i<r&&!(e.sCount[i]<e.blkIndent);i++)if(u=e.bMarks[i]+e.tShift[i],l=e.eMarks[i],c=e.src.slice(u,l),o[s][1].test(c)){0!==c.length&&i++;break}return e.line=i,(a=e.push("html_block","",0)).map=[t,i],a.content=e.getLines(t,i,e.blkIndent,!0),!0}},function(e,t,r){"use strict";e.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]},function(e,t,r){"use strict";e.exports=function(e,t){var r,n,s,o,i,a,c=t+1,u=e.md.block.ruler.getRules("paragraph"),l=e.lineMax;for(a=e.parentType,e.parentType="paragraph";c<l&&!e.isEmpty(c);c++)if(!(e.sCount[c]-e.blkIndent>3||e.sCount[c]<0)){for(n=!1,s=0,o=u.length;s<o;s++)if(u[s](e,c,l,!0)){n=!0;break}if(n)break}return r=e.getLines(t,c,e.blkIndent,!1).trim(),e.line=c,(i=e.push("paragraph_open","p",1)).map=[t,e.line],(i=e.push("inline","",0)).content=r,i.map=[t,e.line],i.children=[],i=e.push("paragraph_close","p",-1),e.parentType=a,!0}},function(e,t,r){"use strict";var n=r(3),s=r(0).isSpace;function o(e,t,r,n){var o,i,a,c,u,l,p,h;for(this.src=e,this.md=t,this.env=r,this.tokens=n,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",h=!1,a=c=l=p=0,u=(i=this.src).length;c<u;c++){if(o=i.charCodeAt(c),!h){if(s(o)){l++,9===o?p+=4-p%4:p++;continue}h=!0}10!==o&&c!==u-1||(10!==o&&c++,this.bMarks.push(a),this.eMarks.push(c),this.tShift.push(l),this.sCount.push(p),this.bsCount.push(0),h=!1,l=0,p=0,a=c+1)}this.bMarks.push(i.length),this.eMarks.push(i.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1}o.prototype.push=function(e,t,r){var s=new n(e,t,r);return s.block=!0,r<0&&this.level--,s.level=this.level,r>0&&this.level++,this.tokens.push(s),s},o.prototype.isEmpty=function(e){return this.bMarks[e]+this.tShift[e]>=this.eMarks[e]},o.prototype.skipEmptyLines=function(e){for(var t=this.lineMax;e<t&&!(this.bMarks[e]+this.tShift[e]<this.eMarks[e]);e++);return e},o.prototype.skipSpaces=function(e){for(var t,r=this.src.length;e<r&&(t=this.src.charCodeAt(e),s(t));e++);return e},o.prototype.skipSpacesBack=function(e,t){if(e<=t)return e;for(;e>t;)if(!s(this.src.charCodeAt(--e)))return e+1;return e},o.prototype.skipChars=function(e,t){for(var r=this.src.length;e<r&&this.src.charCodeAt(e)===t;e++);return e},o.prototype.skipCharsBack=function(e,t,r){if(e<=r)return e;for(;e>r;)if(t!==this.src.charCodeAt(--e))return e+1;return e},o.prototype.getLines=function(e,t,r,n){var o,i,a,c,u,l,p,h=e;if(e>=t)return"";for(l=new Array(t-e),o=0;h<t;h++,o++){for(i=0,p=c=this.bMarks[h],u=h+1<t||n?this.eMarks[h]+1:this.eMarks[h];c<u&&i<r;){if(a=this.src.charCodeAt(c),s(a))9===a?i+=4-(i+this.bsCount[h])%4:i++;else{if(!(c-p<this.tShift[h]))break;i++}c++}l[o]=i>r?new Array(i-r+1).join(" ")+this.src.slice(c,u):this.src.slice(c,u)}return l.join("")},o.prototype.Token=n,e.exports=o},function(e,t,r){"use strict";var n=r(2),s=[["text",r(49)],["newline",r(50)],["escape",r(51)],["backticks",r(52)],["strikethrough",r(10).tokenize],["emphasis",r(11).tokenize],["link",r(53)],["image",r(54)],["autolink",r(55)],["html_inline",r(56)],["entity",r(57)]],o=[["balance_pairs",r(58)],["strikethrough",r(10).postProcess],["emphasis",r(11).postProcess],["text_collapse",r(59)]];function i(){var e;for(this.ruler=new n,e=0;e<s.length;e++)this.ruler.push(s[e][0],s[e][1]);for(this.ruler2=new n,e=0;e<o.length;e++)this.ruler2.push(o[e][0],o[e][1])}i.prototype.skipToken=function(e){var t,r,n=e.pos,s=this.ruler.getRules(""),o=s.length,i=e.md.options.maxNesting,a=e.cache;if(void 0===a[n]){if(e.level<i)for(r=0;r<o&&(e.level++,t=s[r](e,!0),e.level--,!t);r++);else e.pos=e.posMax;t||e.pos++,a[n]=e.pos}else e.pos=a[n]},i.prototype.tokenize=function(e){for(var t,r,n=this.ruler.getRules(""),s=n.length,o=e.posMax,i=e.md.options.maxNesting;e.pos<o;){if(e.level<i)for(r=0;r<s&&!(t=n[r](e,!1));r++);if(t){if(e.pos>=o)break}else e.pending+=e.src[e.pos++]}e.pending&&e.pushPending()},i.prototype.parse=function(e,t,r,n){var s,o,i,a=new this.State(e,t,r,n);for(this.tokenize(a),i=(o=this.ruler2.getRules("")).length,s=0;s<i;s++)o[s](a)},i.prototype.State=r(60),e.exports=i},function(e,t,r){"use strict";function n(e){switch(e){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return!0;default:return!1}}e.exports=function(e,t){for(var r=e.pos;r<e.posMax&&!n(e.src.charCodeAt(r));)r++;return r!==e.pos&&(t||(e.pending+=e.src.slice(e.pos,r)),e.pos=r,!0)}},function(e,t,r){"use strict";var n=r(0).isSpace;e.exports=function(e,t){var r,s,o=e.pos;if(10!==e.src.charCodeAt(o))return!1;for(r=e.pending.length-1,s=e.posMax,t||(r>=0&&32===e.pending.charCodeAt(r)?r>=1&&32===e.pending.charCodeAt(r-1)?(e.pending=e.pending.replace(/ +$/,""),e.push("hardbreak","br",0)):(e.pending=e.pending.slice(0,-1),e.push("softbreak","br",0)):e.push("softbreak","br",0)),o++;o<s&&n(e.src.charCodeAt(o));)o++;return e.pos=o,!0}},function(e,t,r){"use strict";for(var n=r(0).isSpace,s=[],o=0;o<256;o++)s.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(e){s[e.charCodeAt(0)]=1}),e.exports=function(e,t){var r,o=e.pos,i=e.posMax;if(92!==e.src.charCodeAt(o))return!1;if(++o<i){if((r=e.src.charCodeAt(o))<256&&0!==s[r])return t||(e.pending+=e.src[o]),e.pos+=2,!0;if(10===r){for(t||e.push("hardbreak","br",0),o++;o<i&&(r=e.src.charCodeAt(o),n(r));)o++;return e.pos=o,!0}}return t||(e.pending+="\\"),e.pos++,!0}},function(e,t,r){"use strict";e.exports=function(e,t){var r,n,s,o,i,a,c=e.pos;if(96!==e.src.charCodeAt(c))return!1;for(r=c,c++,n=e.posMax;c<n&&96===e.src.charCodeAt(c);)c++;for(s=e.src.slice(r,c),o=i=c;-1!==(o=e.src.indexOf("`",i));){for(i=o+1;i<n&&96===e.src.charCodeAt(i);)i++;if(i-o===s.length)return t||((a=e.push("code_inline","code",0)).markup=s,a.content=e.src.slice(c,o).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),e.pos=i,!0}return t||(e.pending+=s),e.pos+=s.length,!0}},function(e,t,r){"use strict";var n=r(0).normalizeReference,s=r(0).isSpace;e.exports=function(e,t){var r,o,i,a,c,u,l,p,h,f="",d=e.pos,m=e.posMax,g=e.pos,_=!0;if(91!==e.src.charCodeAt(e.pos))return!1;if(c=e.pos+1,(a=e.md.helpers.parseLinkLabel(e,e.pos,!0))<0)return!1;if((u=a+1)<m&&40===e.src.charCodeAt(u)){for(_=!1,u++;u<m&&(o=e.src.charCodeAt(u),s(o)||10===o);u++);if(u>=m)return!1;for(g=u,(l=e.md.helpers.parseLinkDestination(e.src,u,e.posMax)).ok&&(f=e.md.normalizeLink(l.str),e.md.validateLink(f)?u=l.pos:f=""),g=u;u<m&&(o=e.src.charCodeAt(u),s(o)||10===o);u++);if(l=e.md.helpers.parseLinkTitle(e.src,u,e.posMax),u<m&&g!==u&&l.ok)for(h=l.str,u=l.pos;u<m&&(o=e.src.charCodeAt(u),s(o)||10===o);u++);else h="";(u>=m||41!==e.src.charCodeAt(u))&&(_=!0),u++}if(_){if(void 0===e.env.references)return!1;if(u<m&&91===e.src.charCodeAt(u)?(g=u+1,(u=e.md.helpers.parseLinkLabel(e,u))>=0?i=e.src.slice(g,u++):u=a+1):u=a+1,i||(i=e.src.slice(c,a)),!(p=e.env.references[n(i)]))return e.pos=d,!1;f=p.href,h=p.title}return t||(e.pos=c,e.posMax=a,e.push("link_open","a",1).attrs=r=[["href",f]],h&&r.push(["title",h]),e.md.inline.tokenize(e),e.push("link_close","a",-1)),e.pos=u,e.posMax=m,!0}},function(e,t,r){"use strict";var n=r(0).normalizeReference,s=r(0).isSpace;e.exports=function(e,t){var r,o,i,a,c,u,l,p,h,f,d,m,g,_="",b=e.pos,k=e.posMax;if(33!==e.src.charCodeAt(e.pos))return!1;if(91!==e.src.charCodeAt(e.pos+1))return!1;if(u=e.pos+2,(c=e.md.helpers.parseLinkLabel(e,e.pos+1,!1))<0)return!1;if((l=c+1)<k&&40===e.src.charCodeAt(l)){for(l++;l<k&&(o=e.src.charCodeAt(l),s(o)||10===o);l++);if(l>=k)return!1;for(g=l,(h=e.md.helpers.parseLinkDestination(e.src,l,e.posMax)).ok&&(_=e.md.normalizeLink(h.str),e.md.validateLink(_)?l=h.pos:_=""),g=l;l<k&&(o=e.src.charCodeAt(l),s(o)||10===o);l++);if(h=e.md.helpers.parseLinkTitle(e.src,l,e.posMax),l<k&&g!==l&&h.ok)for(f=h.str,l=h.pos;l<k&&(o=e.src.charCodeAt(l),s(o)||10===o);l++);else f="";if(l>=k||41!==e.src.charCodeAt(l))return e.pos=b,!1;l++}else{if(void 0===e.env.references)return!1;if(l<k&&91===e.src.charCodeAt(l)?(g=l+1,(l=e.md.helpers.parseLinkLabel(e,l))>=0?a=e.src.slice(g,l++):l=c+1):l=c+1,a||(a=e.src.slice(u,c)),!(p=e.env.references[n(a)]))return e.pos=b,!1;_=p.href,f=p.title}return t||(i=e.src.slice(u,c),e.md.inline.parse(i,e.md,e.env,m=[]),(d=e.push("image","img",0)).attrs=r=[["src",_],["alt",""]],d.children=m,d.content=i,f&&r.push(["title",f])),e.pos=l,e.posMax=k,!0}},function(e,t,r){"use strict";var n=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,s=/^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;e.exports=function(e,t){var r,o,i,a,c,u,l=e.pos;return 60===e.src.charCodeAt(l)&&(!((r=e.src.slice(l)).indexOf(">")<0)&&(s.test(r)?(a=(o=r.match(s))[0].slice(1,-1),c=e.md.normalizeLink(a),!!e.md.validateLink(c)&&(t||((u=e.push("link_open","a",1)).attrs=[["href",c]],u.markup="autolink",u.info="auto",(u=e.push("text","",0)).content=e.md.normalizeLinkText(a),(u=e.push("link_close","a",-1)).markup="autolink",u.info="auto"),e.pos+=o[0].length,!0)):!!n.test(r)&&(a=(i=r.match(n))[0].slice(1,-1),c=e.md.normalizeLink("mailto:"+a),!!e.md.validateLink(c)&&(t||((u=e.push("link_open","a",1)).attrs=[["href",c]],u.markup="autolink",u.info="auto",(u=e.push("text","",0)).content=e.md.normalizeLinkText(a),(u=e.push("link_close","a",-1)).markup="autolink",u.info="auto"),e.pos+=i[0].length,!0))))}},function(e,t,r){"use strict";var n=r(9).HTML_TAG_RE;e.exports=function(e,t){var r,s,o,i=e.pos;return!!e.md.options.html&&(o=e.posMax,!(60!==e.src.charCodeAt(i)||i+2>=o)&&(!(33!==(r=e.src.charCodeAt(i+1))&&63!==r&&47!==r&&!function(e){var t=32|e;return t>=97&&t<=122}(r))&&(!!(s=e.src.slice(i).match(n))&&(t||(e.push("html_inline","",0).content=e.src.slice(i,i+s[0].length)),e.pos+=s[0].length,!0))))}},function(e,t,r){"use strict";var n=r(4),s=r(0).has,o=r(0).isValidEntityCode,i=r(0).fromCodePoint,a=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,c=/^&([a-z][a-z0-9]{1,31});/i;e.exports=function(e,t){var r,u,l=e.pos,p=e.posMax;if(38!==e.src.charCodeAt(l))return!1;if(l+1<p)if(35===e.src.charCodeAt(l+1)){if(u=e.src.slice(l).match(a))return t||(r="x"===u[1][0].toLowerCase()?parseInt(u[1].slice(1),16):parseInt(u[1],10),e.pending+=o(r)?i(r):i(65533)),e.pos+=u[0].length,!0}else if((u=e.src.slice(l).match(c))&&s(n,u[1]))return t||(e.pending+=n[u[1]]),e.pos+=u[0].length,!0;return t||(e.pending+="&"),e.pos++,!0}},function(e,t,r){"use strict";function n(e,t){var r,n,s,o,i,a,c,u,l={},p=t.length;for(r=0;r<p;r++)if((s=t[r]).length=s.length||0,s.close){for(l.hasOwnProperty(s.marker)||(l[s.marker]=[-1,-1,-1]),i=l[s.marker][s.length%3],a=-1,n=r-s.jump-1;n>i;n-=o.jump+1)if((o=t[n]).marker===s.marker&&(-1===a&&(a=n),o.open&&o.end<0&&o.level===s.level&&(c=!1,(o.close||s.open)&&(o.length+s.length)%3==0&&(o.length%3==0&&s.length%3==0||(c=!0)),!c))){u=n>0&&!t[n-1].open?t[n-1].jump+1:0,s.jump=r-n+u,s.open=!1,o.end=r,o.jump=u,o.close=!1,a=-1;break}-1!==a&&(l[s.marker][(s.length||0)%3]=a)}}e.exports=function(e){var t,r=e.tokens_meta,s=e.tokens_meta.length;for(n(0,e.delimiters),t=0;t<s;t++)r[t]&&r[t].delimiters&&n(0,r[t].delimiters)}},function(e,t,r){"use strict";e.exports=function(e){var t,r,n=0,s=e.tokens,o=e.tokens.length;for(t=r=0;t<o;t++)s[t].nesting<0&&n--,s[t].level=n,s[t].nesting>0&&n++,"text"===s[t].type&&t+1<o&&"text"===s[t+1].type?s[t+1].content=s[t].content+s[t+1].content:(t!==r&&(s[r]=s[t]),r++);t!==r&&(s.length=r)}},function(e,t,r){"use strict";var n=r(3),s=r(0).isWhiteSpace,o=r(0).isPunctChar,i=r(0).isMdAsciiPunct;function a(e,t,r,n){this.src=e,this.env=r,this.md=t,this.tokens=n,this.tokens_meta=Array(n.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[]}a.prototype.pushPending=function(){var e=new n("text","",0);return e.content=this.pending,e.level=this.pendingLevel,this.tokens.push(e),this.pending="",e},a.prototype.push=function(e,t,r){this.pending&&this.pushPending();var s=new n(e,t,r),o=null;return r<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),s.level=this.level,r>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],o={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(s),this.tokens_meta.push(o),s},a.prototype.scanDelims=function(e,t){var r,n,a,c,u,l,p,h,f,d=e,m=!0,g=!0,_=this.posMax,b=this.src.charCodeAt(e);for(r=e>0?this.src.charCodeAt(e-1):32;d<_&&this.src.charCodeAt(d)===b;)d++;return a=d-e,n=d<_?this.src.charCodeAt(d):32,p=i(r)||o(String.fromCharCode(r)),f=i(n)||o(String.fromCharCode(n)),l=s(r),(h=s(n))?m=!1:f&&(l||p||(m=!1)),l?g=!1:p&&(h||f||(g=!1)),t?(c=m,u=g):(c=m&&(!g||p),u=g&&(!m||f)),{can_open:c,can_close:u,length:a}},a.prototype.Token=n,e.exports=a},function(e,t,r){"use strict";function n(e){return Array.prototype.slice.call(arguments,1).forEach(function(t){t&&Object.keys(t).forEach(function(r){e[r]=t[r]})}),e}function s(e){return Object.prototype.toString.call(e)}function o(e){return"[object Function]"===s(e)}function i(e){return e.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var a={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1};var c={"http:":{validate:function(e,t,r){var n=e.slice(t);return r.re.http||(r.re.http=new RegExp("^\\/\\/"+r.re.src_auth+r.re.src_host_port_strict+r.re.src_path,"i")),r.re.http.test(n)?n.match(r.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(e,t,r){var n=e.slice(t);return r.re.no_http||(r.re.no_http=new RegExp("^"+r.re.src_auth+"(?:localhost|(?:(?:"+r.re.src_domain+")\\.)+"+r.re.src_domain_root+")"+r.re.src_port+r.re.src_host_terminator+r.re.src_path,"i")),r.re.no_http.test(n)?t>=3&&":"===e[t-3]?0:t>=3&&"/"===e[t-3]?0:n.match(r.re.no_http)[0].length:0}},"mailto:":{validate:function(e,t,r){var n=e.slice(t);return r.re.mailto||(r.re.mailto=new RegExp("^"+r.re.src_email_name+"@"+r.re.src_host_strict,"i")),r.re.mailto.test(n)?n.match(r.re.mailto)[0].length:0}}},u="a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]",l="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function p(e){var t=e.re=r(62)(e.__opts__),n=e.__tlds__.slice();function a(e){return e.replace("%TLDS%",t.src_tlds)}e.onCompile(),e.__tlds_replaced__||n.push(u),n.push(t.src_xn),t.src_tlds=n.join("|"),t.email_fuzzy=RegExp(a(t.tpl_email_fuzzy),"i"),t.link_fuzzy=RegExp(a(t.tpl_link_fuzzy),"i"),t.link_no_ip_fuzzy=RegExp(a(t.tpl_link_no_ip_fuzzy),"i"),t.host_fuzzy_test=RegExp(a(t.tpl_host_fuzzy_test),"i");var c=[];function l(e,t){throw new Error('(LinkifyIt) Invalid schema "'+e+'": '+t)}e.__compiled__={},Object.keys(e.__schemas__).forEach(function(t){var r=e.__schemas__[t];if(null!==r){var n,i={validate:null,link:null};if(e.__compiled__[t]=i,"[object Object]"===s(r))return!function(e){return"[object RegExp]"===s(e)}(r.validate)?o(r.validate)?i.validate=r.validate:l(t,r):i.validate=(n=r.validate,function(e,t){var r=e.slice(t);return n.test(r)?r.match(n)[0].length:0}),void(o(r.normalize)?i.normalize=r.normalize:r.normalize?l(t,r):i.normalize=function(e,t){t.normalize(e)});!function(e){return"[object String]"===s(e)}(r)?l(t,r):c.push(t)}}),c.forEach(function(t){e.__compiled__[e.__schemas__[t]]&&(e.__compiled__[t].validate=e.__compiled__[e.__schemas__[t]].validate,e.__compiled__[t].normalize=e.__compiled__[e.__schemas__[t]].normalize)}),e.__compiled__[""]={validate:null,normalize:function(e,t){t.normalize(e)}};var p=Object.keys(e.__compiled__).filter(function(t){return t.length>0&&e.__compiled__[t]}).map(i).join("|");e.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+p+")","i"),e.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+p+")","ig"),e.re.pretest=RegExp("("+e.re.schema_test.source+")|("+e.re.host_fuzzy_test.source+")|@","i"),function(e){e.__index__=-1,e.__text_cache__=""}(e)}function h(e,t){var r=e.__index__,n=e.__last_index__,s=e.__text_cache__.slice(r,n);this.schema=e.__schema__.toLowerCase(),this.index=r+t,this.lastIndex=n+t,this.raw=s,this.text=s,this.url=s}function f(e,t){var r=new h(e,t);return e.__compiled__[r.schema].normalize(r,e),r}function d(e,t){if(!(this instanceof d))return new d(e,t);var r;t||(r=e,Object.keys(r||{}).reduce(function(e,t){return e||a.hasOwnProperty(t)},!1)&&(t=e,e={})),this.__opts__=n({},a,t),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=n({},c,e),this.__compiled__={},this.__tlds__=l,this.__tlds_replaced__=!1,this.re={},p(this)}d.prototype.add=function(e,t){return this.__schemas__[e]=t,p(this),this},d.prototype.set=function(e){return this.__opts__=n(this.__opts__,e),this},d.prototype.test=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return!1;var t,r,n,s,o,i,a,c;if(this.re.schema_test.test(e))for((a=this.re.schema_search).lastIndex=0;null!==(t=a.exec(e));)if(s=this.testSchemaAt(e,t[2],a.lastIndex)){this.__schema__=t[2],this.__index__=t.index+t[1].length,this.__last_index__=t.index+t[0].length+s;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(c=e.search(this.re.host_fuzzy_test))>=0&&(this.__index__<0||c<this.__index__)&&null!==(r=e.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(o=r.index+r[1].length,(this.__index__<0||o<this.__index__)&&(this.__schema__="",this.__index__=o,this.__last_index__=r.index+r[0].length)),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&e.indexOf("@")>=0&&null!==(n=e.match(this.re.email_fuzzy))&&(o=n.index+n[1].length,i=n.index+n[0].length,(this.__index__<0||o<this.__index__||o===this.__index__&&i>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=o,this.__last_index__=i)),this.__index__>=0},d.prototype.pretest=function(e){return this.re.pretest.test(e)},d.prototype.testSchemaAt=function(e,t,r){return this.__compiled__[t.toLowerCase()]?this.__compiled__[t.toLowerCase()].validate(e,r,this):0},d.prototype.match=function(e){var t=0,r=[];this.__index__>=0&&this.__text_cache__===e&&(r.push(f(this,t)),t=this.__last_index__);for(var n=t?e.slice(t):e;this.test(n);)r.push(f(this,t)),n=n.slice(this.__last_index__),t+=this.__last_index__;return r.length?r:null},d.prototype.tlds=function(e,t){return e=Array.isArray(e)?e:[e],t?(this.__tlds__=this.__tlds__.concat(e).sort().filter(function(e,t,r){return e!==r[t-1]}).reverse(),p(this),this):(this.__tlds__=e.slice(),this.__tlds_replaced__=!0,p(this),this)},d.prototype.normalize=function(e){e.schema||(e.url="http://"+e.url),"mailto:"!==e.schema||/^mailto:/i.test(e.url)||(e.url="mailto:"+e.url)},d.prototype.onCompile=function(){},e.exports=d},function(e,t,r){"use strict";e.exports=function(e){var t={};t.src_Any=r(6).source,t.src_Cc=r(7).source,t.src_Z=r(8).source,t.src_P=r(1).source,t.src_ZPCc=[t.src_Z,t.src_P,t.src_Cc].join("|"),t.src_ZCc=[t.src_Z,t.src_Cc].join("|");return t.src_pseudo_letter="(?:(?![><｜]|"+t.src_ZPCc+")"+t.src_Any+")",t.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",t.src_auth="(?:(?:(?!"+t.src_ZCc+"|[@/\\[\\]()]).)+@)?",t.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",t.src_host_terminator="(?=$|[><｜]|"+t.src_ZPCc+")(?!-|_|:\\d|\\.-|\\.(?!$|"+t.src_ZPCc+"))",t.src_path="(?:[/?#](?:(?!"+t.src_ZCc+"|[><｜]|[()[\\]{}.,\"'?!\\-]).|\\[(?:(?!"+t.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+t.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+t.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+t.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+t.src_ZCc+"|[']).)+\\'|\\'(?="+t.src_pseudo_letter+"|[-]).|\\.{2,4}[a-zA-Z0-9%/]|\\.(?!"+t.src_ZCc+"|[.]).|"+(e&&e["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+"\\,(?!"+t.src_ZCc+").|\\!(?!"+t.src_ZCc+"|[!]).|\\?(?!"+t.src_ZCc+"|[?]).)+|\\/)?",t.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',t.src_xn="xn--[a-z0-9\\-]{1,59}",t.src_domain_root="(?:"+t.src_xn+"|"+t.src_pseudo_letter+"{1,63})",t.src_domain="(?:"+t.src_xn+"|(?:"+t.src_pseudo_letter+")|(?:"+t.src_pseudo_letter+"(?:-|"+t.src_pseudo_letter+"){0,61}"+t.src_pseudo_letter+"))",t.src_host="(?:(?:(?:(?:"+t.src_domain+")\\.)*"+t.src_domain+"))",t.tpl_host_fuzzy="(?:"+t.src_ip4+"|(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%)))",t.tpl_host_no_ip_fuzzy="(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%))",t.src_host_strict=t.src_host+t.src_host_terminator,t.tpl_host_fuzzy_strict=t.tpl_host_fuzzy+t.src_host_terminator,t.src_host_port_strict=t.src_host+t.src_port+t.src_host_terminator,t.tpl_host_port_fuzzy_strict=t.tpl_host_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_port_no_ip_fuzzy_strict=t.tpl_host_no_ip_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+t.src_ZPCc+"|>|$))",t.tpl_email_fuzzy='(^|[><｜]|"|\\(|'+t.src_ZCc+")("+t.src_email_name+"@"+t.tpl_host_fuzzy_strict+")",t.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_fuzzy_strict+t.src_path+")",t.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_no_ip_fuzzy_strict+t.src_path+")",t}},function(e,t,r){(function(e,n){var s;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof n&&n;i.global!==i&&i.window!==i&&i.self;var a,c=2147483647,u=36,l=1,p=26,h=38,f=700,d=72,m=128,g="-",_=/^xn--/,b=/[^\x20-\x7E]/,k=/[\x2E\u3002\uFF0E\uFF61]/g,v={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},x=u-l,y=Math.floor,C=String.fromCharCode;function A(e){throw new RangeError(v[e])}function w(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function D(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+w((e=e.replace(k,".")).split("."),t).join(".")}function E(e){for(var t,r,n=[],s=0,o=e.length;s<o;)(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<o?56320==(64512&(r=e.charCodeAt(s++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),s--):n.push(t);return n}function q(e){return w(e,function(e){var t="";return e>65535&&(t+=C((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=C(e)}).join("")}function S(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function F(e,t,r){var n=0;for(e=r?y(e/f):e>>1,e+=y(e/t);e>x*p>>1;n+=u)e=y(e/x);return y(n+(x+1)*e/(e+h))}function L(e){var t,r,n,s,o,i,a,h,f,_,b,k=[],v=e.length,x=0,C=m,w=d;for((r=e.lastIndexOf(g))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&A("not-basic"),k.push(e.charCodeAt(n));for(s=r>0?r+1:0;s<v;){for(o=x,i=1,a=u;s>=v&&A("invalid-input"),((h=(b=e.charCodeAt(s++))-48<10?b-22:b-65<26?b-65:b-97<26?b-97:u)>=u||h>y((c-x)/i))&&A("overflow"),x+=h*i,!(h<(f=a<=w?l:a>=w+p?p:a-w));a+=u)i>y(c/(_=u-f))&&A("overflow"),i*=_;w=F(x-o,t=k.length+1,0==o),y(x/t)>c-C&&A("overflow"),C+=y(x/t),x%=t,k.splice(x++,0,C)}return q(k)}function z(e){var t,r,n,s,o,i,a,h,f,_,b,k,v,x,w,D=[];for(k=(e=E(e)).length,t=m,r=0,o=d,i=0;i<k;++i)(b=e[i])<128&&D.push(C(b));for(n=s=D.length,s&&D.push(g);n<k;){for(a=c,i=0;i<k;++i)(b=e[i])>=t&&b<a&&(a=b);for(a-t>y((c-r)/(v=n+1))&&A("overflow"),r+=(a-t)*v,t=a,i=0;i<k;++i)if((b=e[i])<t&&++r>c&&A("overflow"),b==t){for(h=r,f=u;!(h<(_=f<=o?l:f>=o+p?p:f-o));f+=u)w=h-_,x=u-_,D.push(C(S(_+w%x,0))),h=y(w/x);D.push(C(S(h,0))),o=F(r,v,n==s),r=0,++n}++r,++t}return D.join("")}a={version:"1.4.1",ucs2:{decode:E,encode:q},decode:L,encode:z,toASCII:function(e){return D(e,function(e){return b.test(e)?"xn--"+z(e):e})},toUnicode:function(e){return D(e,function(e){return _.test(e)?L(e.slice(4).toLowerCase()):e})}},void 0===(s=function(){return a}.call(t,r,t,e))||(e.exports=s)}()}).call(this,r(64)(e),r(65))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";e.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}}},function(e,t,r){"use strict";e.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","text_collapse"]}}}},function(e,t,r){"use strict";e.exports={options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","text_collapse"]}}}},function(e,t,r){"use strict";r.r(t);var n={border:!1,margin:"0 0 5 0",hidden:!0,region:"north",xtype:"panel",listeners:{boxready:function(e,t,r,n){e.setHtml('<h1 class="x-panel-header">Hello Ts</h1>')}}},s=function(){function e(){}return e.getParameterForMD=function(e){var t="";return e.forEach(function(e){t+="|"+e.name+" | "+e.description+"  |"+e.in+" | "+(void 0!==e.schema?""+e.schema.$ref:""+(null==e.type?"":e.type))+" |"+e.default+"|"+e.required+"|\n"}),t.trim()},e.getRefName=function(e){if(console.log("valu 的值是 "+e),null==e)return"";if(!0!==e.startsWith("#"))return e;var t=e.substring(e.lastIndexOf("/")+1,e.length);return console.log("valu 的值是 "+e+",result的值是"+t),t},e.getModelMDTable=function(e){var t="";if(e.title.startsWith("MsCommonResult")||e.title.startsWith("CommonResult"))for(var r in e.properties){t+="|"+r+"|"+(n=e.properties[r]).type+"|"+("result"==r?"0表示成功，其他值表示错误":"detail"==r?"result对应的消息文本":"data"==r?"返回的数据":n.description)+"    |\n"}else for(var r in e.properties){var n;t+="|"+r+"|"+((n=e.properties[r]).format?n.type+"("+n.format+")":n.type)+"|"+n.description+"|\n"}return t.trim()},e.getModelMDJSON=function(e){var t="";for(var r in e.properties){var n=e.properties[r];t+='"'+r+'":"'+n.description+'",//'+n.type+"\n"}return t.trim()},e.renderRefModel=function(t,r){if(!r)return"";console.log("modelName 的值是 "+r),r=e.getRefName(r),console.log("格式化后modelName 的值是 "+r);var n=t.definitions[r],s="-\t"+r+" \n\n|名称|类型|描述   |\n|:----    |:----- |-----   |\n"+e.getModelMDTable(n)+"  \n    \n-\t"+r+"\n    \n``` \n{\n    "+e.getModelMDJSON(n)+"\n}\n\n``` \n";for(var o in n.properties){var i=n.properties[o];if(i.$ref)s+=e.renderRefModel(t,e.getRefName(i.$ref));else if(i.items&&i.items.$ref){var a=i.items.$ref.startsWith("#")?e.getRefName(i.items.$ref):i.items.$ref;s+=e.renderRefModel(t,a)}}return s.trim()},e.getPrametersMDDoc=function(t,r){var n="";return r.forEach(function(r){if(r.schema){var s=e.getRefName(r.schema.$ref);null==s&&(s=e.getRefName(r.schema.items.$ref)),n+=e.renderRefModel(t,s)}}),n},e.getPrametersTest=function(t,r){var n="";return r.forEach(function(r){if(r.schema){var s=e.getRefName(r.schema.$ref);null==s&&(s=e.getRefName(r.schema.items.$ref)),n+=e.renderRefModelTest(t,s)}}),n},e.renderRefModelTest=function(t,r){if(!r)return"";console.log("modelName 的值是 "+r),r=e.getRefName(r),console.log("格式化后modelName 的值是 "+r);var n=t.definitions[r],s="    \n{\n    "+e.getModelJSONTest(n)+"\n}\n\n";for(var o in n.properties){var i=n.properties[o];if(i.$ref)s+=e.renderRefModelTest(t,e.getRefName(i.$ref));else if(i.items&&i.items.$ref){var a=i.items.$ref.startsWith("#")?e.getRefName(i.items.$ref):i.items.$ref;s+=e.renderRefModelTest(t,a)}}return s.trim()},e.getModelJSONTest=function(e){var t="";for(var r in e.properties)t+='"'+r+'":"[CaseStep.'+r+']",\n';return(t=t.trim()).endsWith(",")&&(t=t.substring(0,t.length-1)),t},e.renderTestResult=function(t,r){if(!r)return"";console.log("modelName 的值是 "+r),r=e.getRefName(r),console.log("格式化后modelName 的值是 "+r);var n=t.definitions[r],s="";for(var o in n.properties){var i=n.properties[o];if(i.$ref)s+="\n"+o+"\n"+e.renderTestResult(t,e.getRefName(i.$ref))+"\n\n";else if(i.items&&i.items.$ref){var a=i.items.$ref.startsWith("#")?e.getRefName(i.items.$ref):i.items.$ref;s+="\n"+o+'"\n'+e.renderTestResult(t,a)+"\n\n"}else"integer"==i.type||"number"==i.type?s+='"'+o+'":[CaseStep.'+o+"]#获取"+o+"成功,"+o+"为[CaseStep."+o+"]\n":s+='"'+o+'":"[CaseStep.'+o+']"#获取'+o+"成功,"+o+"为[CaseStep."+o+"]\n"}return s.trim()},e}();var o=r(12)(),i=function(e){var t,r=[];for(t=0;t<e;t++)r.push(" ");return r.join("")},a={xtype:"viewport",layout:"border",items:[n,{collapsible:!0,height:100,html:"Information goes here",minHeight:100,region:"south",split:!0,hidden:!0,title:"South Panel",xtype:"panel"},{activeTab:0,items:[{layout:"border",title:"API管理",xtype:"panel",reference:"apiContainer",items:[{xtype:"treepanel",title:"项目服务列表",width:500,store:{root:{expanded:!0}},rootVisible:!1,split:!0,region:"west",listeners:{itemclick:function(e,t){var r=t,n=t.parentNode.get("swagger");if("method"===r.get("category")){var i=r.get("info"),a=void 0,c=void 0;i.responses[200]&&i.responses[200].schema&&(i.responses[200].schema.type?c=i.responses[200].schema.type:i.responses[200].schema.$ref&&(a=i.responses[200].schema.$ref));var u=this.up("[reference=apiContainer]"),l=function(e,t,r,n){return"**简要描述：**\n-   "+t.summary+"\n-   "+t.description+"\n    \n**编写者：** \n-   "+t.author+"\n    \n**请求URL：** \n-  `"+t.path+"`\n    \n    \n**请求方式：**\n- "+t.method+"\n    \n**返回数据的类型以及编码(Produces)**\n- "+t.produces+"\n    \n**参数：** \n\n"+(null==t.parameters||0==t.parameters.length?"无":"|名称|描述|参数类别|传参方式|默认值   |是否必须   |\n|:----    |:---|:----- |-----   |-----   |-----   |")+"    \n"+s.getParameterForMD(t.parameters)+"\n    \n**requestBody 参数说明：**\n"+s.getPrametersMDDoc(e,t.parameters)+"\n    \n**返回示例**\n"+(null==n?"":n)+"\n"+(null==r?"":s.renderRefModel(e,r))+"\n"}(n,i,a,c),p="";"get"!=i.method&&(p+='"Content-Type":"application/json"'),p=(p+='\n"Authorization":"Bearer [token_1]"\n"jm":"[CaseStep.jm]"\n"Msgid":288572').trim(),u.setDocData({markDownDoc:l,htmlDoc:o.render(l),requestArguments:s.getPrametersTest(n,i.parameters),requestMethod:i.method,requestHeader:p,url:i.path,requestResult:a?s.renderTestResult(n,a):""})}},boxready:function(e){var t=e.getRootNode();Ext.Ajax.request({url:"/eureka/tree"}).then(function(e,r){Ext.decode(e.responseText).forEach(function(e){t.appendChild(e)})},function(e,t){console.log("server-side failure with status code "+e.status)})},beforeitemexpand:function(e,t){var r=this,n=e;if(!0!==n.get("loaded")){var s=e;if("service"==n.get("category")){r.getEl().mask("正在加载数据");var o="/swagger.doc?url="+n.get("nodeUrl");Ext.Ajax.request({url:o}).then(function(e,t){var o=Ext.decode(e.responseText);n.set("swagger",o),n.set("loaded",!0);var i=[];for(var a in o.paths){var c=o.paths[a];for(var u in c){var l=c[u];l.path=a,l.method=u,i.push({leaf:!0,text:l.path+"_"+u,category:"method",info:l})}}i.sort(function(e,t){return e.text==t.text?0:e.text<t.text?-1:1}),i.forEach(function(e){s.appendChild(e)}),r.getEl().unmask()},function(e,t){console.log("server-side failure with status code "+e.status)})}}}}},{xtype:"tabpanel",region:"center",items:[{xtype:"htmleditor",title:"ShowDoc文档",readOnly:!0,reference:"markdownDoc",iframeAttrTpl:'style="font-size:50px !important;"',getDocMarkup:function(){return'<!DOCTYPE html><html><head><style type="text/css">\n                        table {\n                            color:#333333;\n                            border-width: 1px;\n                            border-color: #666666;\n                            border-collapse: collapse;\n                        }\n                        table th {\n                            border-width: 1px;\n                            padding: 8px;\n                            border-style: solid;\n                            border-color: #666666;\n                            background-color: #dedede;\n                        }\n                        table td {\n                            border-width: 1px;\n                            padding: 8px;\n                            border-style: solid;\n                            border-color: #666666;\n                            background-color: #ffffff;\n                        }\n                        pre {\n                            padding-left: 5px; background-color: rgb(252, 252, 252); border: 1px solid rgb(225, 225, 232);\n                        }\n                        pre code{\n                            color:#080 !important;\n                            font-size:16px !important;\n                                font-family: "Microsoft YaHei", Helvetica, "Meiryo UI", "Malgun Gothic", "Segoe UI", "Trebuchet MS", Monaco, monospace, Tahoma, STXihei, 华文细黑, STHeiti, "Helvetica Neue", "Droid Sans", "wenquanyi micro hei", FreeSans, Arimo, Arial, SimSun, 宋体, Heiti, 黑体, sans-serif !important;\n                        }\n                            '+(Ext.isOpera||Ext.isIE?"p{margin:0;}":"")+'\n\n                            body{\n                                font-size:16px !important;\n                                font-family: "Microsoft YaHei", Helvetica, "Meiryo UI", "Malgun Gothic", "Segoe UI", "Trebuchet MS", Monaco, monospace, Tahoma, STXihei, 华文细黑, STHeiti, "Helvetica Neue", "Droid Sans", "wenquanyi micro hei", FreeSans, Arimo, Arial, SimSun, 宋体, Heiti, 黑体, sans-serif !important;\n                                border:0;margin:0;padding:3px;direction:ltr;\n                                '+(Ext.isIE8?Ext.emptyString:"min-")+"height:844px;\n                                box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;cursor:text;background-color:white;\n                            }\n                        </style></head><body></body></html>"}},{xtype:"panel",title:"接口测试文档",layout:"form",autoScroll:!0,anchor:"95%",defaults:{readOnly:!0},items:[{xtype:"textfield",fieldLabel:"url",reference:"testUrl"},{xtype:"textarea",fieldLabel:"请求头",reference:"testHeader",grow:!0},{xtype:"textfield",fieldLabel:"方法",reference:"testMethod"},{xtype:"textarea",fieldLabel:"入参",reference:"testParameter",grow:!0},{xtype:"textarea",fieldLabel:"出参断言",reference:"testResult",grow:!0}]}]}],setDocData:function(e){var t=this,r=t.down("[reference=markdownDoc]"),n=t.down("[reference=testUrl]"),s=t.down("[reference=testHeader]"),o=t.down("[reference=testMethod]"),i=t.down("[reference=testParameter]"),a=t.down("[reference=testResult]");n.setValue(e.url),s.setValue(e.requestHeader),o.setValue(e.requestMethod),i.setValue(e.requestArguments),r.setValue(e.htmlDoc),a.setValue(e.requestResult)}},{layout:"fit",title:"JSON处理",xtype:"panel",tbar:{items:[{text:"粘贴",xtype:"button",handler:function(e){var t=e.up("panel").down("textarea").inputEl;if(null!=t){var r=t.dom;r.focus(),r.select(),document.execCommand("paste")}}},{text:"复制",xtype:"button",handler:function(e){var t=e.up("panel").down("textarea");if(0!==t.getValue().length){var r=t.inputEl;if(null!=r){var n=r.dom;n.focus(),n.select(),document.execCommand("copy")}}}},{xtype:"tbseparator"},{xtype:"button",text:"格式化",handler:function(e){for(var t=e.up("panel").down("textarea"),r=t.getValue(),n=r.length,s=[],o=0,a=!1,c=0;c<n;c++){var u=r.charAt(c);a&&u===a?"\\"!==r.charAt(c-1)&&(a=!1):a||'"'!==u&&"'"!==u?a||" "!==u&&"\t"!==u?a||":"!==u?a||","!==u?a||"["!==u&&"{"!==u?a||"]"!==u&&"}"!==u||(u="\n"+i(2*--o)+u):u+="\n"+i(2*++o):u+="\n"+i(2*o):u+=" ":u="":a=u,s.push(u)}t.setValue(s.join(""))}},{xtype:"tbseparator"},{text:"删除空格",xtype:"button",handler:function(e){for(var t=e.up("panel").down("textarea"),r=t.getValue(),n=r.length,s=[],o=!1,i=0;i<n;i++){var a=r.charAt(i);o&&a===o?"\\"!==r.charAt(i-1)&&(o=!1):o||'"'!==a&&"'"!==a?o||" "!==a&&"\n"!==a||(a=""):o=a,s.push(a)}t.setValue(s.join(""))}},{xtype:"tbseparator"},{xtype:"button",text:"删除空格并转义",handler:function(e){var t=e.up("panel").down("textarea"),r=function(e){for(var t=[],r=!1,n="",s=0,o=(e=e.split("\n").join(" ")).length;s<o;s++){var i=e.charAt(s);r&&i===n?"\\"!==e.charAt(s-1)&&(r=!1,n="",i="\\"+("'"===i?'"':i)):r||'"'!==i&&"'"!==i?r||" "!==i&&"\t"!==i||(i=""):(r=!0,n=i,i='\\"'),t.push(i)}return t.join("")}(t.getValue());t.setValue(r)}},{xtype:"tbseparator"},{text:"去除转义",xtype:"button",handler:function(e){var t=e.up("panel").down("textarea"),r=t.getValue().replace(/\\\\/g,"\\").replace(/\\\"/g,'"');t.setValue(r)}}]},items:{xtype:"textarea",border:!1,value:'{"name":"test"}'}}],region:"center",xtype:"tabpanel"},{collapsible:!0,region:"east",split:!0,title:"East Panel",hidden:!0,width:150,xtype:"panel"}]};Ext.onReady(function(){Ext.create(Ext.container.Viewport.getName(),a)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9jb21tb24vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VjLm1pY3JvL2NhdGVnb3JpZXMvUC9yZWdleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvdG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9jb21tb24vZW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21kdXJsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91Yy5taWNyby9wcm9wZXJ0aWVzL0FueS9yZWdleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdWMubWljcm8vY2F0ZWdvcmllcy9DYy9yZWdleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdWMubWljcm8vY2F0ZWdvcmllcy9aL3JlZ2V4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvY29tbW9uL2h0bWxfcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19pbmxpbmUvc3RyaWtldGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9lbXBoYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWR1cmwvZW5jb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZHVybC9kZWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21kdXJsL2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWR1cmwvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VjLm1pY3JvL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91Yy5taWNyby9jYXRlZ29yaWVzL0NmL3JlZ2V4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvaGVscGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2hlbHBlcnMvcGFyc2VfbGlua19sYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2hlbHBlcnMvcGFyc2VfbGlua19kZXN0aW5hdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2hlbHBlcnMvcGFyc2VfbGlua190aXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3JlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcGFyc2VyX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19jb3JlL25vcm1hbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvYmxvY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19jb3JlL2lubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvbGlua2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvcmVwbGFjZW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfY29yZS9zbWFydHF1b3Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvc3RhdGVfY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3BhcnNlcl9ibG9jay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL3RhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2ZlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svYmxvY2txdW90ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2hyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL3JlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2hlYWRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19ibG9jay9saGVhZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2h0bWxfYmxvY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9jb21tb24vaHRtbF9ibG9ja3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19ibG9jay9wYXJhZ3JhcGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19ibG9jay9zdGF0ZV9ibG9jay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3BhcnNlcl9pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19pbmxpbmUvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9uZXdsaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9iYWNrdGlja3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19pbmxpbmUvbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9pbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9hdXRvbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9odG1sX2lubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9lbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19pbmxpbmUvYmFsYW5jZV9wYWlycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS90ZXh0X2NvbGxhcHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL3N0YXRlX2lubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGlua2lmeS1pdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGlua2lmeS1pdC9saWIvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtbGlicy1icm93c2VyL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9wcmVzZXRzL2RlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9wcmVzZXRzL3plcm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9wcmVzZXRzL2NvbW1vbm1hcmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTm9ydGhQYW5lbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Td2FnZ2VyL01hcmtEb3duLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1N3YWdnZXIvQXBpVHJlZVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTWFpblZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU291dGhQYW5lbC9NYWluLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1N3YWdnZXIvTWFpblZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2hhc093blByb3BlcnR5IiwiaGFzIiwiaXNWYWxpZEVudGl0eUNvZGUiLCJmcm9tQ29kZVBvaW50Iiwic3Vycm9nYXRlMSIsInN1cnJvZ2F0ZTIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJVTkVTQ0FQRV9NRF9SRSIsIlVORVNDQVBFX0FMTF9SRSIsIlJlZ0V4cCIsInNvdXJjZSIsIkRJR0lUQUxfRU5USVRZX1RFU1RfUkUiLCJlbnRpdGllcyIsIkhUTUxfRVNDQVBFX1RFU1RfUkUiLCJIVE1MX0VTQ0FQRV9SRVBMQUNFX1JFIiwiSFRNTF9SRVBMQUNFTUVOVFMiLCImIiwiPCIsIj4iLCJcIiIsInJlcGxhY2VVbnNhZmVDaGFyIiwiY2giLCJSRUdFWFBfRVNDQVBFX1JFIiwiVU5JQ09ERV9QVU5DVF9SRSIsImxpYiIsIm1kdXJsIiwidWNtaWNybyIsImFzc2lnbiIsIm9iaiIsIkFycmF5Iiwic2xpY2UiLCJhcmd1bWVudHMiLCJmb3JFYWNoIiwiVHlwZUVycm9yIiwia2V5cyIsImlzU3RyaW5nIiwidG9TdHJpbmciLCJfY2xhc3MiLCJ1bmVzY2FwZU1kIiwic3RyIiwiaW5kZXhPZiIsInJlcGxhY2UiLCJ1bmVzY2FwZUFsbCIsIm1hdGNoIiwiZXNjYXBlZCIsImVudGl0eSIsImNvZGUiLCJjaGFyQ29kZUF0IiwidGVzdCIsInRvTG93ZXJDYXNlIiwicGFyc2VJbnQiLCJyZXBsYWNlRW50aXR5UGF0dGVybiIsImVzY2FwZUh0bWwiLCJhcnJheVJlcGxhY2VBdCIsInNyYyIsInBvcyIsIm5ld0VsZW1lbnRzIiwiY29uY2F0IiwiaXNTcGFjZSIsImlzV2hpdGVTcGFjZSIsImlzTWRBc2NpaVB1bmN0IiwiaXNQdW5jdENoYXIiLCJlc2NhcGVSRSIsIm5vcm1hbGl6ZVJlZmVyZW5jZSIsInRyaW0iLCJ0b1VwcGVyQ2FzZSIsIlJ1bGVyIiwidGhpcyIsIl9fcnVsZXNfXyIsIl9fY2FjaGVfXyIsIl9fZmluZF9fIiwibGVuZ3RoIiwiX19jb21waWxlX18iLCJzZWxmIiwiY2hhaW5zIiwicnVsZSIsImVuYWJsZWQiLCJhbHQiLCJhbHROYW1lIiwicHVzaCIsImNoYWluIiwiZm4iLCJhdCIsIm9wdGlvbnMiLCJpbmRleCIsIm9wdCIsIkVycm9yIiwiYmVmb3JlIiwiYmVmb3JlTmFtZSIsInJ1bGVOYW1lIiwic3BsaWNlIiwiYWZ0ZXIiLCJhZnRlck5hbWUiLCJlbmFibGUiLCJsaXN0IiwiaWdub3JlSW52YWxpZCIsImlzQXJyYXkiLCJyZXN1bHQiLCJpZHgiLCJlbmFibGVPbmx5IiwiZGlzYWJsZSIsImdldFJ1bGVzIiwiY2hhaW5OYW1lIiwiVG9rZW4iLCJ0eXBlIiwidGFnIiwibmVzdGluZyIsImF0dHJzIiwibWFwIiwibGV2ZWwiLCJjaGlsZHJlbiIsImNvbnRlbnQiLCJtYXJrdXAiLCJpbmZvIiwibWV0YSIsImJsb2NrIiwiaGlkZGVuIiwiYXR0ckluZGV4IiwibGVuIiwiYXR0clB1c2giLCJhdHRyRGF0YSIsImF0dHJTZXQiLCJhdHRyR2V0IiwiYXR0ckpvaW4iLCJlbmNvZGUiLCJkZWNvZGUiLCJmb3JtYXQiLCJwYXJzZSIsIm9wZW5fdGFnIiwiY2xvc2VfdGFnIiwiSFRNTF9UQUdfUkUiLCJIVE1MX09QRU5fQ0xPU0VfVEFHX1JFIiwicG9zdFByb2Nlc3MiLCJzdGF0ZSIsImRlbGltaXRlcnMiLCJqIiwic3RhcnREZWxpbSIsImVuZERlbGltIiwidG9rZW4iLCJsb25lTWFya2VycyIsIm1heCIsIm1hcmtlciIsImVuZCIsInRva2VucyIsInBvcCIsInRva2VuaXplIiwic2lsZW50Iiwic2Nhbm5lZCIsInN0YXJ0Iiwic2NhbkRlbGltcyIsImp1bXAiLCJvcGVuIiwiY2FuX29wZW4iLCJjbG9zZSIsImNhbl9jbG9zZSIsImN1cnIiLCJ0b2tlbnNfbWV0YSIsImlzU3Ryb25nIiwidXRpbHMiLCJoZWxwZXJzIiwiUmVuZGVyZXIiLCJQYXJzZXJDb3JlIiwiUGFyc2VyQmxvY2siLCJQYXJzZXJJbmxpbmUiLCJMaW5raWZ5SXQiLCJwdW55Y29kZSIsImNvbmZpZyIsImRlZmF1bHQiLCJ6ZXJvIiwiY29tbW9ubWFyayIsIkJBRF9QUk9UT19SRSIsIkdPT0RfREFUQV9SRSIsInZhbGlkYXRlTGluayIsInVybCIsIlJFQ09ERV9IT1NUTkFNRV9GT1IiLCJub3JtYWxpemVMaW5rIiwicGFyc2VkIiwiaG9zdG5hbWUiLCJwcm90b2NvbCIsInRvQVNDSUkiLCJlciIsIm5vcm1hbGl6ZUxpbmtUZXh0IiwidG9Vbmljb2RlIiwiTWFya2Rvd25JdCIsInByZXNldE5hbWUiLCJpbmxpbmUiLCJjb3JlIiwicmVuZGVyZXIiLCJsaW5raWZ5IiwiY29uZmlndXJlIiwic2V0IiwicHJlc2V0cyIsImNvbXBvbmVudHMiLCJydWxlcyIsInJ1bGVyIiwicnVsZXMyIiwicnVsZXIyIiwibWlzc2VkIiwiZmlsdGVyIiwidXNlIiwicGx1Z2luIiwiYXJncyIsImFwcGx5IiwiZW52IiwiU3RhdGUiLCJwcm9jZXNzIiwicmVuZGVyIiwicGFyc2VJbmxpbmUiLCJpbmxpbmVNb2RlIiwicmVuZGVySW5saW5lIiwiZW5jb2RlQ2FjaGUiLCJzdHJpbmciLCJleGNsdWRlIiwia2VlcEVzY2FwZWQiLCJuZXh0Q29kZSIsImNhY2hlIiwiZGVmYXVsdENoYXJzIiwiZ2V0RW5jb2RlQ2FjaGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjb21wb25lbnRDaGFycyIsImRlY29kZUNhY2hlIiwiZ2V0RGVjb2RlQ2FjaGUiLCJzZXEiLCJiMSIsImIyIiwiYjMiLCJiNCIsImNociIsInNsYXNoZXMiLCJhdXRoIiwicG9ydCIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzaCIsIlVybCIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwiaG9zdGxlc3NQcm90b2NvbCIsImphdmFzY3JpcHQiLCJqYXZhc2NyaXB0OiIsInNsYXNoZWRQcm90b2NvbCIsImh0dHAiLCJodHRwcyIsImZ0cCIsImdvcGhlciIsImZpbGUiLCJodHRwOiIsImh0dHBzOiIsImZ0cDoiLCJnb3BoZXI6IiwiZmlsZToiLCJzbGFzaGVzRGVub3RlSG9zdCIsImxvd2VyUHJvdG8iLCJoZWMiLCJyZXN0Iiwic3BsaXQiLCJzaW1wbGVQYXRoIiwiZXhlYyIsInByb3RvIiwic3Vic3RyIiwiYXRTaWduIiwiaG9zdEVuZCIsImxhc3RJbmRleE9mIiwiaG9zdCIsInBhcnNlSG9zdCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsInBhcnQiLCJuZXdwYXJ0IiwiayIsInZhbGlkUGFydHMiLCJub3RIb3N0IiwiYml0IiwidW5zaGlmdCIsImpvaW4iLCJxbSIsInUiLCJBbnkiLCJDYyIsIkNmIiwiUCIsIloiLCJwYXJzZUxpbmtMYWJlbCIsInBhcnNlTGlua0Rlc3RpbmF0aW9uIiwicGFyc2VMaW5rVGl0bGUiLCJkaXNhYmxlTmVzdGVkIiwiZm91bmQiLCJwcmV2UG9zIiwibGFiZWxFbmQiLCJwb3NNYXgiLCJvbGRQb3MiLCJtZCIsInNraXBUb2tlbiIsIm9rIiwibGluZXMiLCJkZWZhdWx0X3J1bGVzIiwiY29kZV9pbmxpbmUiLCJzbGYiLCJyZW5kZXJBdHRycyIsImNvZGVfYmxvY2siLCJmZW5jZSIsImhpZ2hsaWdodGVkIiwidG1wQXR0cnMiLCJ0bXBUb2tlbiIsImxhbmdOYW1lIiwiaGlnaGxpZ2h0IiwibGFuZ1ByZWZpeCIsImltYWdlIiwicmVuZGVySW5saW5lQXNUZXh0IiwicmVuZGVyVG9rZW4iLCJoYXJkYnJlYWsiLCJ4aHRtbE91dCIsInNvZnRicmVhayIsImJyZWFrcyIsInRleHQiLCJodG1sX2Jsb2NrIiwiaHRtbF9pbmxpbmUiLCJuZXh0VG9rZW4iLCJuZWVkTGYiLCJfcnVsZXMiLCJDb3JlIiwiTkVXTElORVNfUkUiLCJOVUxMX1JFIiwidG9rIiwiaXNMaW5rQ2xvc2UiLCJjdXJyZW50VG9rZW4iLCJub2RlcyIsImxuIiwibGFzdFBvcyIsImh0bWxMaW5rTGV2ZWwiLCJmdWxsVXJsIiwidXJsVGV4dCIsImxpbmtzIiwiYmxvY2tUb2tlbnMiLCJwcmV0ZXN0Iiwic2NoZW1hIiwibGFzdEluZGV4IiwiUkFSRV9SRSIsIlNDT1BFRF9BQkJSX1RFU1RfUkUiLCJTQ09QRURfQUJCUl9SRSIsIlNDT1BFRF9BQkJSIiwidG0iLCJyZXBsYWNlRm4iLCJyZXBsYWNlX3Njb3BlZCIsImlubGluZVRva2VucyIsImluc2lkZV9hdXRvbGluayIsInJlcGxhY2VfcmFyZSIsImJsa0lkeCIsInR5cG9ncmFwaGVyIiwiUVVPVEVfVEVTVF9SRSIsIlFVT1RFX1JFIiwiQVBPU1RST1BIRSIsInJlcGxhY2VBdCIsInByb2Nlc3NfaW5saW5lcyIsInRoaXNMZXZlbCIsIml0ZW0iLCJsYXN0Q2hhciIsIm5leHRDaGFyIiwiaXNMYXN0UHVuY3RDaGFyIiwiaXNOZXh0UHVuY3RDaGFyIiwiaXNMYXN0V2hpdGVTcGFjZSIsImlzTmV4dFdoaXRlU3BhY2UiLCJjYW5PcGVuIiwiY2FuQ2xvc2UiLCJpc1NpbmdsZSIsInN0YWNrIiwib3BlblF1b3RlIiwiY2xvc2VRdW90ZSIsIk9VVEVSIiwic2luZ2xlIiwicXVvdGVzIiwiU3RhdGVDb3JlIiwic3RhcnRMaW5lIiwiZW5kTGluZSIsImxpbmUiLCJoYXNFbXB0eUxpbmVzIiwibWF4TmVzdGluZyIsInNraXBFbXB0eUxpbmVzIiwic0NvdW50IiwiYmxrSW5kZW50IiwidGlnaHQiLCJpc0VtcHR5Iiwib3V0VG9rZW5zIiwibGluZU1heCIsImdldExpbmUiLCJiTWFya3MiLCJlTWFya3MiLCJlc2NhcGVkU3BsaXQiLCJlc2NhcGVzIiwiYmFja1RpY2tlZCIsImxhc3RCYWNrVGljayIsInN1YnN0cmluZyIsImxpbmVUZXh0IiwibmV4dExpbmUiLCJjb2x1bW5zIiwiY29sdW1uQ291bnQiLCJhbGlnbnMiLCJ0YWJsZUxpbmVzIiwidGJvZHlMaW5lcyIsInRTaGlmdCIsImxhc3QiLCJnZXRMaW5lcyIsInBhcmFtcyIsIm1lbSIsImhhdmVFbmRNYXJrZXIiLCJza2lwQ2hhcnMiLCJza2lwU3BhY2VzIiwiYWRqdXN0VGFiIiwiaW5pdGlhbCIsImxhc3RMaW5lRW1wdHkiLCJvZmZzZXQiLCJvbGRCTWFya3MiLCJvbGRCU0NvdW50Iiwib2xkSW5kZW50Iiwib2xkUGFyZW50VHlwZSIsIm9sZFNDb3VudCIsIm9sZFRTaGlmdCIsInNwYWNlQWZ0ZXJNYXJrZXIiLCJ0ZXJtaW5hdGUiLCJ0ZXJtaW5hdG9yUnVsZXMiLCJ3YXNPdXRkZW50ZWQiLCJvbGRMaW5lTWF4IiwiYnNDb3VudCIsInBhcmVudFR5cGUiLCJjbnQiLCJza2lwQnVsbGV0TGlzdE1hcmtlciIsInNraXBPcmRlcmVkTGlzdE1hcmtlciIsImNvbnRlbnRTdGFydCIsImluZGVudCIsImluZGVudEFmdGVyTWFya2VyIiwiaXNPcmRlcmVkIiwiaXRlbUxpbmVzIiwibGlzdExpbmVzIiwibGlzdFRva0lkeCIsIm1hcmtlckNoYXJDb2RlIiwibWFya2VyVmFsdWUiLCJvbGRMaXN0SW5kZW50Iiwib2xkVGlnaHQiLCJwb3NBZnRlck1hcmtlciIsInByZXZFbXB0eUVuZCIsImlzVGVybWluYXRpbmdQYXJhZ3JhcGgiLCJsaXN0SW5kZW50IiwiTnVtYmVyIiwiTWF0aCIsIm1pbiIsIm1hcmtUaWdodFBhcmFncmFwaHMiLCJfZW5kTGluZSIsImRlc3RFbmRQb3MiLCJkZXN0RW5kTGluZU5vIiwiaHJlZiIsImxhYmVsIiwicmVzIiwidGl0bGUiLCJyZWZlcmVuY2VzIiwidG1wIiwic2tpcFNwYWNlc0JhY2siLCJza2lwQ2hhcnNCYWNrIiwiYmxvY2tfbmFtZXMiLCJIVE1MX1NFUVVFTkNFUyIsImh0bWwiLCJTdGF0ZUJsb2NrIiwiaW5kZW50X2ZvdW5kIiwiZGRJbmRlbnQiLCJmcm9tIiwiYmVnaW4iLCJrZWVwTGFzdExGIiwibGluZUluZGVudCIsImZpcnN0IiwicXVldWUiLCJsaW5lU3RhcnQiLCJfcnVsZXMyIiwicGVuZGluZyIsInB1c2hQZW5kaW5nIiwiaXNUZXJtaW5hdG9yQ2hhciIsInBtYXgiLCJFU0NBUEVEIiwibWF0Y2hTdGFydCIsIm1hdGNoRW5kIiwibGFiZWxTdGFydCIsInJlZiIsInBhcnNlUmVmZXJlbmNlIiwiRU1BSUxfUkUiLCJBVVRPTElOS19SRSIsInRhaWwiLCJsaW5rTWF0Y2giLCJlbWFpbE1hdGNoIiwibGMiLCJpc0xldHRlciIsIkRJR0lUQUxfUkUiLCJOQU1FRF9SRSIsInByb2Nlc3NEZWxpbWl0ZXJzIiwiY2xvc2VySWR4Iiwib3BlbmVySWR4IiwiY2xvc2VyIiwib3BlbmVyIiwibWluT3BlbmVySWR4IiwibmV3TWluT3BlbmVySWR4IiwiaXNPZGRNYXRjaCIsImxhc3RKdW1wIiwib3BlbmVyc0JvdHRvbSIsIlN0YXRlSW5saW5lIiwicGVuZGluZ0xldmVsIiwiX3ByZXZfZGVsaW1pdGVycyIsInRva2VuX21ldGEiLCJjYW5TcGxpdFdvcmQiLCJjb3VudCIsImxlZnRfZmxhbmtpbmciLCJyaWdodF9mbGFua2luZyIsImlzRnVuY3Rpb24iLCJkZWZhdWx0T3B0aW9ucyIsImZ1enp5TGluayIsImZ1enp5RW1haWwiLCJmdXp6eUlQIiwiZGVmYXVsdFNjaGVtYXMiLCJ2YWxpZGF0ZSIsInJlIiwic3JjX2F1dGgiLCJzcmNfaG9zdF9wb3J0X3N0cmljdCIsInNyY19wYXRoIiwiLy8iLCJub19odHRwIiwic3JjX2RvbWFpbiIsInNyY19kb21haW5fcm9vdCIsInNyY19wb3J0Iiwic3JjX2hvc3RfdGVybWluYXRvciIsIm1haWx0bzoiLCJtYWlsdG8iLCJzcmNfZW1haWxfbmFtZSIsInNyY19ob3N0X3N0cmljdCIsInRsZHNfMmNoX3NyY19yZSIsInRsZHNfZGVmYXVsdCIsImNvbXBpbGUiLCJfX29wdHNfXyIsInRsZHMiLCJfX3RsZHNfXyIsInVudHBsIiwidHBsIiwic3JjX3RsZHMiLCJvbkNvbXBpbGUiLCJfX3RsZHNfcmVwbGFjZWRfXyIsInNyY194biIsImVtYWlsX2Z1enp5IiwidHBsX2VtYWlsX2Z1enp5IiwibGlua19mdXp6eSIsInRwbF9saW5rX2Z1enp5IiwibGlua19ub19pcF9mdXp6eSIsInRwbF9saW5rX25vX2lwX2Z1enp5IiwiaG9zdF9mdXp6eV90ZXN0IiwidHBsX2hvc3RfZnV6enlfdGVzdCIsImFsaWFzZXMiLCJzY2hlbWFFcnJvciIsInZhbCIsIl9fY29tcGlsZWRfXyIsIl9fc2NoZW1hc19fIiwiY29tcGlsZWQiLCJsaW5rIiwiaXNSZWdFeHAiLCJub3JtYWxpemUiLCJhbGlhcyIsInNsaXN0Iiwic2NoZW1hX3Rlc3QiLCJzcmNfWlBDYyIsInNjaGVtYV9zZWFyY2giLCJfX2luZGV4X18iLCJfX3RleHRfY2FjaGVfXyIsInJlc2V0U2NhbkNhY2hlIiwiTWF0Y2giLCJzaGlmdCIsIl9fbGFzdF9pbmRleF9fIiwiX19zY2hlbWFfXyIsInJhdyIsImNyZWF0ZU1hdGNoIiwic2NoZW1hcyIsInJlZHVjZSIsImFjYyIsImFkZCIsImRlZmluaXRpb24iLCJtbCIsIm1lIiwibmV4dCIsInRsZF9wb3MiLCJ0ZXN0U2NoZW1hQXQiLCJrZWVwT2xkIiwic29ydCIsImVsIiwiYXJyIiwicmV2ZXJzZSIsIm9wdHMiLCJzcmNfQW55Iiwic3JjX0NjIiwic3JjX1oiLCJzcmNfUCIsInNyY19aQ2MiLCJzcmNfcHNldWRvX2xldHRlciIsInNyY19pcDQiLCJzcmNfaG9zdCIsInRwbF9ob3N0X2Z1enp5IiwidHBsX2hvc3Rfbm9faXBfZnV6enkiLCJ0cGxfaG9zdF9mdXp6eV9zdHJpY3QiLCJ0cGxfaG9zdF9wb3J0X2Z1enp5X3N0cmljdCIsInRwbF9ob3N0X3BvcnRfbm9faXBfZnV6enlfc3RyaWN0IiwiZ2xvYmFsIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJyb290Iiwibm9kZVR5cGUiLCJmcmVlR2xvYmFsIiwid2luZG93IiwibWF4SW50IiwiYmFzZSIsInRNaW4iLCJ0TWF4Iiwic2tldyIsImRhbXAiLCJpbml0aWFsQmlhcyIsImluaXRpYWxOIiwiZGVsaW1pdGVyIiwicmVnZXhQdW55Y29kZSIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJlcnJvcnMiLCJvdmVyZmxvdyIsIm5vdC1iYXNpYyIsImludmFsaWQtaW5wdXQiLCJiYXNlTWludXNUTWluIiwiZmxvb3IiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJlcnJvciIsIlJhbmdlRXJyb3IiLCJhcnJheSIsIm1hcERvbWFpbiIsInBhcnRzIiwidWNzMmRlY29kZSIsImV4dHJhIiwib3V0cHV0IiwiY291bnRlciIsInVjczJlbmNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImZsYWciLCJhZGFwdCIsImRlbHRhIiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiaW5wdXQiLCJvdXQiLCJiYXNpYyIsIm9sZGkiLCJ3IiwiYmFzZU1pbnVzVCIsImNvZGVQb2ludCIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJxIiwiY3VycmVudFZhbHVlIiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwicU1pbnVzVCIsInZlcnNpb24iLCJ1Y3MyIiwidW5kZWZpbmVkIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJnIiwiRnVuY3Rpb24iLCJlIiwiY29tcG9uZW50c19Ob3J0aFBhbmVsIiwiYm9yZGVyIiwibWFyZ2luIiwicmVnaW9uIiwieHR5cGUiLCJsaXN0ZW5lcnMiLCJib3hyZWFkeSIsIndpZHRoIiwiaGVpZ2h0IiwiZU9wdHMiLCJzZXRIdG1sIiwiTWFya0Rvd24iLCJnZXRQYXJhbWV0ZXJGb3JNRCIsInBhcmFtZXRlcnMiLCJkZXNjcmlwdGlvbiIsImluIiwiJHJlZiIsInJlcXVpcmVkIiwiZ2V0UmVmTmFtZSIsImNvbnNvbGUiLCJsb2ciLCJzdGFydHNXaXRoIiwiZ2V0TW9kZWxNRFRhYmxlIiwibW9kZWwiLCJwcm9wZXJ0aWVzIiwicHJvcCIsImdldE1vZGVsTURKU09OIiwicmVuZGVyUmVmTW9kZWwiLCJzd2FnZ2VyIiwibW9kZWxOYW1lIiwiZGVmaW5pdGlvbnMiLCJpdGVtcyIsInR5cGVNb2RlbCIsImdldFByYW1ldGVyc01ERG9jIiwicGFyYW1ldGVyTW9kZWxOYW1lIiwiZ2V0UHJhbWV0ZXJzVGVzdCIsInJlbmRlclJlZk1vZGVsVGVzdCIsImdldE1vZGVsSlNPTlRlc3QiLCJlbmRzV2l0aCIsInJlbmRlclRlc3RSZXN1bHQiLCJzcGFjZSIsImNoYXJBcnJheSIsImNvbXBvbmVudHNfTWFpblZpZXciLCJsYXlvdXQiLCJjb2xsYXBzaWJsZSIsIm1pbkhlaWdodCIsImFjdGl2ZVRhYiIsInJlZmVyZW5jZSIsInN0b3JlIiwiZXhwYW5kZWQiLCJyb290VmlzaWJsZSIsIml0ZW1jbGljayIsInZpZXciLCJub2RlIiwibWV0aG9kTm9kZSIsInBhcmVudE5vZGUiLCJtZXRob2RJbmZvIiwicmVzcG9uc2VSZWZUeXBlIiwicmVzcG9uc2VTaW1wbGVUeXBlIiwicmVzcG9uc2VzIiwibWFpblZpZXciLCJ1cCIsIm1hcmtEb3duRG9jIiwic3VtbWFyeSIsImF1dGhvciIsInBhdGgiLCJtZXRob2QiLCJwcm9kdWNlcyIsImdldERvYyIsInJlcXVlc3RIZWFkZXIiLCJzZXREb2NEYXRhIiwiaHRtbERvYyIsInJlcXVlc3RBcmd1bWVudHMiLCJyZXF1ZXN0TWV0aG9kIiwicmVxdWVzdFJlc3VsdCIsInRyZWUiLCJnZXRSb290Tm9kZSIsIkV4dCIsIkFqYXgiLCJyZXF1ZXN0IiwidGhlbiIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0IiwiYXBwZW5kQ2hpbGQiLCJzdGF0dXMiLCJiZWZvcmVpdGVtZXhwYW5kIiwibm9kZUludGVyZmFjZSIsImdldEVsIiwibWFzayIsImNoaWxkTm9kZXMiLCJyZXF1ZXN0T2JqIiwicmVxdWVzdFZhbHVlIiwibGVhZiIsImNhdGVnb3J5IiwiYSIsImIiLCJjaGlsZCIsInVubWFzayIsInJlYWRPbmx5IiwiaWZyYW1lQXR0clRwbCIsImdldERvY01hcmt1cCIsImlzT3BlcmEiLCJpc0lFIiwiaXNJRTgiLCJlbXB0eVN0cmluZyIsImF1dG9TY3JvbGwiLCJhbmNob3IiLCJkZWZhdWx0cyIsImZpZWxkTGFiZWwiLCJncm93IiwiZGF0YSIsIm1hcmtkb3duRG9jIiwiZG93biIsInRlc3RVcmwiLCJ0ZXN0SGVhZGVyIiwidGVzdE1ldGhvZCIsInRlc3RQYXJhbWV0ZXIiLCJ0ZXN0UmVzdWx0Iiwic2V0VmFsdWUiLCJ0YmFyIiwiaGFuZGxlciIsImJ0biIsImlucHV0RWwiLCJpbnB1dEVsRG9tIiwiZG9tIiwiZm9jdXMiLCJzZWxlY3QiLCJkb2N1bWVudCIsImV4ZWNDb21tYW5kIiwidGV4dGFyZWEiLCJnZXRWYWx1ZSIsIm9sZFZhbHVlIiwib2xkVmFsdWVMZW4iLCJuZXdWYWx1ZUFycmF5Iiwic3BhY2VDb3VudCIsInF1b3RhdGlvbk1hcmtzIiwiY3VycmVudENoYXIiLCJjaGFyQXQiLCJuZXdWYWx1ZSIsImNvbnZlcnRpbmciLCJjb252ZXJ0Q2hhciIsImNoYXJWYWx1ZSIsImdldFJlbW92ZVdoaXRlU3BhY2UiLCJvblJlYWR5IiwiY29udGFpbmVyIiwiVmlld3BvcnQiLCJnZXROYW1lIl0sIm1hcHBpbmdzIjoiYUFDQSxJ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LEtBQU0sT0FBUXFXLE1BQU8sU0FBVW9ILFFBQVMsU0FBQ0MsR0FDckMsSUFDTVEsRUFEV1IsRUFBSTVELEdBQUcsU0FDRW1ELEtBQUssWUFDekIwQixFQUFpQ1QsRUFBU0MsV0F2SWhEM3ZCLFFBQVEsUUFBUyxNQUFNQSxRQUFRLFFBQVMsS0F3SXhDMHZCLEVBQVNYLFNBQVNvQixPQUtsQzNHLE1BQU8sQ0FDSDNCLE1BQU8sV0FDUEgsUUFBUSxFQUNSbnJCLE1BQU8scUJBT1hxckIsT0FBUSxTQUNSQyxNQUFPLFlBM004QixDQUNyQ3dDLGFBQWEsRUFDYnpDLE9BQVEsT0FDUi9aLE9BQU8sRUFDUHFNLE1BQU8sYUFDUHZWLFFBQVEsRUFDUnFqQixNQUFPLElBQ1BILE1BQU8sV0dWWHlFLElBQUlrRSxRQUFRLFdBQ1ZsRSxJQUFJMXZCLE9BQU8wdkIsSUFBSW1FLFVBQVVDLFNBQVNDLFVBQVV4RyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNjkpO1xuIiwiLy8gVXRpbGl0aWVzXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIF9jbGFzcyhvYmopIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopOyB9XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikgeyByZXR1cm4gX2NsYXNzKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nOyB9XG5cbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBoYXMob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIF9oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cblxuLy8gTWVyZ2Ugb2JqZWN0c1xuLy9cbmZ1bmN0aW9uIGFzc2lnbihvYmogLypmcm9tMSwgZnJvbTIsIGZyb20zLCAuLi4qLykge1xuICB2YXIgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICBpZiAoIXNvdXJjZSkgeyByZXR1cm47IH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzb3VyY2UgKyAnbXVzdCBiZSBvYmplY3QnKTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuLy8gUmVtb3ZlIGVsZW1lbnQgZnJvbSBhcnJheSBhbmQgcHV0IGFub3RoZXIgYXJyYXkgYXQgdGhvc2UgcG9zaXRpb24uXG4vLyBVc2VmdWwgZm9yIHNvbWUgb3BlcmF0aW9ucyB3aXRoIHRva2Vuc1xuZnVuY3Rpb24gYXJyYXlSZXBsYWNlQXQoc3JjLCBwb3MsIG5ld0VsZW1lbnRzKSB7XG4gIHJldHVybiBbXS5jb25jYXQoc3JjLnNsaWNlKDAsIHBvcyksIG5ld0VsZW1lbnRzLCBzcmMuc2xpY2UocG9zICsgMSkpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBpc1ZhbGlkRW50aXR5Q29kZShjKSB7XG4gIC8qZXNsaW50IG5vLWJpdHdpc2U6MCovXG4gIC8vIGJyb2tlbiBzZXF1ZW5jZVxuICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERGRkYpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIC8vIG5ldmVyIHVzZWRcbiAgaWYgKGMgPj0gMHhGREQwICYmIGMgPD0gMHhGREVGKSB7IHJldHVybiBmYWxzZTsgfVxuICBpZiAoKGMgJiAweEZGRkYpID09PSAweEZGRkYgfHwgKGMgJiAweEZGRkYpID09PSAweEZGRkUpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIC8vIGNvbnRyb2wgY29kZXNcbiAgaWYgKGMgPj0gMHgwMCAmJiBjIDw9IDB4MDgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmIChjID09PSAweDBCKSB7IHJldHVybiBmYWxzZTsgfVxuICBpZiAoYyA+PSAweDBFICYmIGMgPD0gMHgxRikgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKGMgPj0gMHg3RiAmJiBjIDw9IDB4OUYpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIC8vIG91dCBvZiByYW5nZVxuICBpZiAoYyA+IDB4MTBGRkZGKSB7IHJldHVybiBmYWxzZTsgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZnJvbUNvZGVQb2ludChjKSB7XG4gIC8qZXNsaW50IG5vLWJpdHdpc2U6MCovXG4gIGlmIChjID4gMHhmZmZmKSB7XG4gICAgYyAtPSAweDEwMDAwO1xuICAgIHZhciBzdXJyb2dhdGUxID0gMHhkODAwICsgKGMgPj4gMTApLFxuICAgICAgICBzdXJyb2dhdGUyID0gMHhkYzAwICsgKGMgJiAweDNmZik7XG5cbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShzdXJyb2dhdGUxLCBzdXJyb2dhdGUyKTtcbiAgfVxuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbn1cblxuXG52YXIgVU5FU0NBUEVfTURfUkUgID0gL1xcXFwoWyFcIiMkJSYnKCkqKyxcXC0uXFwvOjs8PT4/QFtcXFxcXFxdXl9ge3x9fl0pL2c7XG52YXIgRU5USVRZX1JFICAgICAgID0gLyYoW2EteiNdW2EtejAtOV17MSwzMX0pOy9naTtcbnZhciBVTkVTQ0FQRV9BTExfUkUgPSBuZXcgUmVnRXhwKFVORVNDQVBFX01EX1JFLnNvdXJjZSArICd8JyArIEVOVElUWV9SRS5zb3VyY2UsICdnaScpO1xuXG52YXIgRElHSVRBTF9FTlRJVFlfVEVTVF9SRSA9IC9eIygoPzp4W2EtZjAtOV17MSw4fXxbMC05XXsxLDh9KSkvaTtcblxudmFyIGVudGl0aWVzID0gcmVxdWlyZSgnLi9lbnRpdGllcycpO1xuXG5mdW5jdGlvbiByZXBsYWNlRW50aXR5UGF0dGVybihtYXRjaCwgbmFtZSkge1xuICB2YXIgY29kZSA9IDA7XG5cbiAgaWYgKGhhcyhlbnRpdGllcywgbmFtZSkpIHtcbiAgICByZXR1cm4gZW50aXRpZXNbbmFtZV07XG4gIH1cblxuICBpZiAobmFtZS5jaGFyQ29kZUF0KDApID09PSAweDIzLyogIyAqLyAmJiBESUdJVEFMX0VOVElUWV9URVNUX1JFLnRlc3QobmFtZSkpIHtcbiAgICBjb2RlID0gbmFtZVsxXS50b0xvd2VyQ2FzZSgpID09PSAneCcgP1xuICAgICAgcGFyc2VJbnQobmFtZS5zbGljZSgyKSwgMTYpIDogcGFyc2VJbnQobmFtZS5zbGljZSgxKSwgMTApO1xuXG4gICAgaWYgKGlzVmFsaWRFbnRpdHlDb2RlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZnJvbUNvZGVQb2ludChjb2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2g7XG59XG5cbi8qZnVuY3Rpb24gcmVwbGFjZUVudGl0aWVzKHN0cikge1xuICBpZiAoc3RyLmluZGV4T2YoJyYnKSA8IDApIHsgcmV0dXJuIHN0cjsgfVxuXG4gIHJldHVybiBzdHIucmVwbGFjZShFTlRJVFlfUkUsIHJlcGxhY2VFbnRpdHlQYXR0ZXJuKTtcbn0qL1xuXG5mdW5jdGlvbiB1bmVzY2FwZU1kKHN0cikge1xuICBpZiAoc3RyLmluZGV4T2YoJ1xcXFwnKSA8IDApIHsgcmV0dXJuIHN0cjsgfVxuICByZXR1cm4gc3RyLnJlcGxhY2UoVU5FU0NBUEVfTURfUkUsICckMScpO1xufVxuXG5mdW5jdGlvbiB1bmVzY2FwZUFsbChzdHIpIHtcbiAgaWYgKHN0ci5pbmRleE9mKCdcXFxcJykgPCAwICYmIHN0ci5pbmRleE9mKCcmJykgPCAwKSB7IHJldHVybiBzdHI7IH1cblxuICByZXR1cm4gc3RyLnJlcGxhY2UoVU5FU0NBUEVfQUxMX1JFLCBmdW5jdGlvbiAobWF0Y2gsIGVzY2FwZWQsIGVudGl0eSkge1xuICAgIGlmIChlc2NhcGVkKSB7IHJldHVybiBlc2NhcGVkOyB9XG4gICAgcmV0dXJuIHJlcGxhY2VFbnRpdHlQYXR0ZXJuKG1hdGNoLCBlbnRpdHkpO1xuICB9KTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxudmFyIEhUTUxfRVNDQVBFX1RFU1RfUkUgPSAvWyY8PlwiXS87XG52YXIgSFRNTF9FU0NBUEVfUkVQTEFDRV9SRSA9IC9bJjw+XCJdL2c7XG52YXIgSFRNTF9SRVBMQUNFTUVOVFMgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7J1xufTtcblxuZnVuY3Rpb24gcmVwbGFjZVVuc2FmZUNoYXIoY2gpIHtcbiAgcmV0dXJuIEhUTUxfUkVQTEFDRU1FTlRTW2NoXTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHIpIHtcbiAgaWYgKEhUTUxfRVNDQVBFX1RFU1RfUkUudGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKEhUTUxfRVNDQVBFX1JFUExBQ0VfUkUsIHJlcGxhY2VVbnNhZmVDaGFyKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG52YXIgUkVHRVhQX0VTQ0FQRV9SRSA9IC9bLj8qK14kW1xcXVxcXFwoKXt9fC1dL2c7XG5cbmZ1bmN0aW9uIGVzY2FwZVJFKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoUkVHRVhQX0VTQ0FQRV9SRSwgJ1xcXFwkJicpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBpc1NwYWNlKGNvZGUpIHtcbiAgc3dpdGNoIChjb2RlKSB7XG4gICAgY2FzZSAweDA5OlxuICAgIGNhc2UgMHgyMDpcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gWnMgKHVuaWNvZGUgY2xhc3MpIHx8IFtcXHRcXGZcXHZcXHJcXG5dXG5mdW5jdGlvbiBpc1doaXRlU3BhY2UoY29kZSkge1xuICBpZiAoY29kZSA+PSAweDIwMDAgJiYgY29kZSA8PSAweDIwMEEpIHsgcmV0dXJuIHRydWU7IH1cbiAgc3dpdGNoIChjb2RlKSB7XG4gICAgY2FzZSAweDA5OiAvLyBcXHRcbiAgICBjYXNlIDB4MEE6IC8vIFxcblxuICAgIGNhc2UgMHgwQjogLy8gXFx2XG4gICAgY2FzZSAweDBDOiAvLyBcXGZcbiAgICBjYXNlIDB4MEQ6IC8vIFxcclxuICAgIGNhc2UgMHgyMDpcbiAgICBjYXNlIDB4QTA6XG4gICAgY2FzZSAweDE2ODA6XG4gICAgY2FzZSAweDIwMkY6XG4gICAgY2FzZSAweDIwNUY6XG4gICAgY2FzZSAweDMwMDA6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qZXNsaW50LWRpc2FibGUgbWF4LWxlbiovXG52YXIgVU5JQ09ERV9QVU5DVF9SRSA9IHJlcXVpcmUoJ3VjLm1pY3JvL2NhdGVnb3JpZXMvUC9yZWdleCcpO1xuXG4vLyBDdXJyZW50bHkgd2l0aG91dCBhc3RyYWwgY2hhcmFjdGVycyBzdXBwb3J0LlxuZnVuY3Rpb24gaXNQdW5jdENoYXIoY2gpIHtcbiAgcmV0dXJuIFVOSUNPREVfUFVOQ1RfUkUudGVzdChjaCk7XG59XG5cblxuLy8gTWFya2Rvd24gQVNDSUkgcHVuY3R1YXRpb24gY2hhcmFjdGVycy5cbi8vXG4vLyAhLCBcIiwgIywgJCwgJSwgJiwgJywgKCwgKSwgKiwgKywgLCwgLSwgLiwgLywgOiwgOywgPCwgPSwgPiwgPywgQCwgWywgXFwsIF0sIF4sIF8sIGAsIHssIHwsIH0sIG9yIH5cbi8vIGh0dHA6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMTUvI2FzY2lpLXB1bmN0dWF0aW9uLWNoYXJhY3RlclxuLy9cbi8vIERvbid0IGNvbmZ1c2Ugd2l0aCB1bmljb2RlIHB1bmN0dWF0aW9uICEhISBJdCBsYWNrcyBzb21lIGNoYXJzIGluIGFzY2lpIHJhbmdlLlxuLy9cbmZ1bmN0aW9uIGlzTWRBc2NpaVB1bmN0KGNoKSB7XG4gIHN3aXRjaCAoY2gpIHtcbiAgICBjYXNlIDB4MjEvKiAhICovOlxuICAgIGNhc2UgMHgyMi8qIFwiICovOlxuICAgIGNhc2UgMHgyMy8qICMgKi86XG4gICAgY2FzZSAweDI0LyogJCAqLzpcbiAgICBjYXNlIDB4MjUvKiAlICovOlxuICAgIGNhc2UgMHgyNi8qICYgKi86XG4gICAgY2FzZSAweDI3LyogJyAqLzpcbiAgICBjYXNlIDB4MjgvKiAoICovOlxuICAgIGNhc2UgMHgyOS8qICkgKi86XG4gICAgY2FzZSAweDJBLyogKiAqLzpcbiAgICBjYXNlIDB4MkIvKiArICovOlxuICAgIGNhc2UgMHgyQy8qICwgKi86XG4gICAgY2FzZSAweDJELyogLSAqLzpcbiAgICBjYXNlIDB4MkUvKiAuICovOlxuICAgIGNhc2UgMHgyRi8qIC8gKi86XG4gICAgY2FzZSAweDNBLyogOiAqLzpcbiAgICBjYXNlIDB4M0IvKiA7ICovOlxuICAgIGNhc2UgMHgzQy8qIDwgKi86XG4gICAgY2FzZSAweDNELyogPSAqLzpcbiAgICBjYXNlIDB4M0UvKiA+ICovOlxuICAgIGNhc2UgMHgzRi8qID8gKi86XG4gICAgY2FzZSAweDQwLyogQCAqLzpcbiAgICBjYXNlIDB4NUIvKiBbICovOlxuICAgIGNhc2UgMHg1Qy8qIFxcICovOlxuICAgIGNhc2UgMHg1RC8qIF0gKi86XG4gICAgY2FzZSAweDVFLyogXiAqLzpcbiAgICBjYXNlIDB4NUYvKiBfICovOlxuICAgIGNhc2UgMHg2MC8qIGAgKi86XG4gICAgY2FzZSAweDdCLyogeyAqLzpcbiAgICBjYXNlIDB4N0MvKiB8ICovOlxuICAgIGNhc2UgMHg3RC8qIH0gKi86XG4gICAgY2FzZSAweDdFLyogfiAqLzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gSGVwbGVyIHRvIHVuaWZ5IFtyZWZlcmVuY2UgbGFiZWxzXS5cbi8vXG5mdW5jdGlvbiBub3JtYWxpemVSZWZlcmVuY2Uoc3RyKSB7XG4gIC8vIFRyaW0gYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2VcbiAgLy9cbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG5cbiAgLy8gSW4gbm9kZSB2MTAgJ+G6nicudG9Mb3dlckNhc2UoKSA9PT0gJ+G5vicsIHdoaWNoIGlzIHByZXN1bWVkIHRvIGJlIGEgYnVnXG4gIC8vIGZpeGVkIGluIHYxMiAoY291bGRuJ3QgZmluZCBhbnkgZGV0YWlscykuXG4gIC8vXG4gIC8vIFNvIHRyZWF0IHRoaXMgb25lIGFzIGEgc3BlY2lhbCBjYXNlXG4gIC8vIChyZW1vdmUgdGhpcyB3aGVuIG5vZGUgdjEwIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQpLlxuICAvL1xuICBpZiAoJ+G6nicudG9Mb3dlckNhc2UoKSA9PT0gJ+G5vicpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgv4bqeL2csICfDnycpO1xuICB9XG5cbiAgLy8gLnRvTG93ZXJDYXNlKCkudG9VcHBlckNhc2UoKSBzaG91bGQgZ2V0IHJpZCBvZiBhbGwgZGlmZmVyZW5jZXNcbiAgLy8gYmV0d2VlbiBsZXR0ZXIgdmFyaWFudHMuXG4gIC8vXG4gIC8vIFNpbXBsZSAudG9Mb3dlckNhc2UoKSBkb2Vzbid0IG5vcm1hbGl6ZSAxMjUgY29kZSBwb2ludHMgY29ycmVjdGx5LFxuICAvLyBhbmQgLnRvVXBwZXJDYXNlIGRvZXNuJ3Qgbm9ybWFsaXplIDYgb2YgdGhlbSAobGlzdCBvZiBleGNlcHRpb25zOlxuICAvLyDEsCwgz7QsIOG6niwg4oSmLCDihKosIOKEqyAtIHRob3NlIGFyZSBhbHJlYWR5IHVwcGVyY2FzZWQsIGJ1dCBoYXZlIGRpZmZlcmVudGx5XG4gIC8vIHVwcGVyY2FzZWQgdmVyc2lvbnMpLlxuICAvL1xuICAvLyBIZXJlJ3MgYW4gZXhhbXBsZSBzaG93aW5nIGhvdyBpdCBoYXBwZW5zLiBMZXRzIHRha2UgZ3JlZWsgbGV0dGVyIG9tZWdhOlxuICAvLyB1cHBlcmNhc2UgVSswMzk4ICjOmCksIFUrMDNmNCAoz7QpIGFuZCBsb3dlcmNhc2UgVSswM2I4ICjOuCksIFUrMDNkMSAoz5EpXG4gIC8vXG4gIC8vIFVuaWNvZGUgZW50cmllczpcbiAgLy8gMDM5ODtHUkVFSyBDQVBJVEFMIExFVFRFUiBUSEVUQTtMdTswO0w7Ozs7O047Ozs7MDNCODtcbiAgLy8gMDNCODtHUkVFSyBTTUFMTCBMRVRURVIgVEhFVEE7TGw7MDtMOzs7OztOOzs7MDM5ODs7MDM5OFxuICAvLyAwM0QxO0dSRUVLIFRIRVRBIFNZTUJPTDtMbDswO0w7PGNvbXBhdD4gMDNCODs7OztOO0dSRUVLIFNNQUxMIExFVFRFUiBTQ1JJUFQgVEhFVEE7OzAzOTg7OzAzOThcbiAgLy8gMDNGNDtHUkVFSyBDQVBJVEFMIFRIRVRBIFNZTUJPTDtMdTswO0w7PGNvbXBhdD4gMDM5ODs7OztOOzs7OzAzQjg7XG4gIC8vXG4gIC8vIENhc2UtaW5zZW5zaXRpdmUgY29tcGFyaXNvbiBzaG91bGQgdHJlYXQgYWxsIG9mIHRoZW0gYXMgZXF1aXZhbGVudC5cbiAgLy9cbiAgLy8gQnV0IC50b0xvd2VyQ2FzZSgpIGRvZXNuJ3QgY2hhbmdlIM+RIChpdCdzIGFscmVhZHkgbG93ZXJjYXNlKSxcbiAgLy8gYW5kIC50b1VwcGVyQ2FzZSgpIGRvZXNuJ3QgY2hhbmdlIM+0IChhbHJlYWR5IHVwcGVyY2FzZSkuXG4gIC8vXG4gIC8vIEFwcGx5aW5nIGZpcnN0IGxvd2VyIHRoZW4gdXBwZXIgY2FzZSBub3JtYWxpemVzIGFueSBjaGFyYWN0ZXI6XG4gIC8vICdcXHUwMzk4XFx1MDNmNFxcdTAzYjhcXHUwM2QxJy50b0xvd2VyQ2FzZSgpLnRvVXBwZXJDYXNlKCkgPT09ICdcXHUwMzk4XFx1MDM5OFxcdTAzOThcXHUwMzk4J1xuICAvL1xuICAvLyBOb3RlOiB0aGlzIGlzIGVxdWl2YWxlbnQgdG8gdW5pY29kZSBjYXNlIGZvbGRpbmc7IHVuaWNvZGUgbm9ybWFsaXphdGlvblxuICAvLyBpcyBhIGRpZmZlcmVudCBzdGVwIHRoYXQgaXMgbm90IHJlcXVpcmVkIGhlcmUuXG4gIC8vXG4gIC8vIEZpbmFsIHJlc3VsdCBzaG91bGQgYmUgdXBwZXJjYXNlZCwgYmVjYXVzZSBpdCdzIGxhdGVyIHN0b3JlZCBpbiBhbiBvYmplY3RcbiAgLy8gKHRoaXMgYXZvaWQgYSBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgbWVtYmVycyxcbiAgLy8gbW9zdCBub3RhYmx5LCBgX19wcm90b19fYClcbiAgLy9cbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vIFJlLWV4cG9ydCBsaWJyYXJpZXMgY29tbW9ubHkgdXNlZCBpbiBib3RoIG1hcmtkb3duLWl0IGFuZCBpdHMgcGx1Z2lucyxcbi8vIHNvIHBsdWdpbnMgd29uJ3QgaGF2ZSB0byBkZXBlbmQgb24gdGhlbSBleHBsaWNpdGx5LCB3aGljaCByZWR1Y2VzIHRoZWlyXG4vLyBidW5kbGVkIHNpemUgKGUuZy4gYSBicm93c2VyIGJ1aWxkKS5cbi8vXG5leHBvcnRzLmxpYiAgICAgICAgICAgICAgICAgPSB7fTtcbmV4cG9ydHMubGliLm1kdXJsICAgICAgICAgICA9IHJlcXVpcmUoJ21kdXJsJyk7XG5leHBvcnRzLmxpYi51Y21pY3JvICAgICAgICAgPSByZXF1aXJlKCd1Yy5taWNybycpO1xuXG5leHBvcnRzLmFzc2lnbiAgICAgICAgICAgICAgPSBhc3NpZ247XG5leHBvcnRzLmlzU3RyaW5nICAgICAgICAgICAgPSBpc1N0cmluZztcbmV4cG9ydHMuaGFzICAgICAgICAgICAgICAgICA9IGhhcztcbmV4cG9ydHMudW5lc2NhcGVNZCAgICAgICAgICA9IHVuZXNjYXBlTWQ7XG5leHBvcnRzLnVuZXNjYXBlQWxsICAgICAgICAgPSB1bmVzY2FwZUFsbDtcbmV4cG9ydHMuaXNWYWxpZEVudGl0eUNvZGUgICA9IGlzVmFsaWRFbnRpdHlDb2RlO1xuZXhwb3J0cy5mcm9tQ29kZVBvaW50ICAgICAgID0gZnJvbUNvZGVQb2ludDtcbi8vIGV4cG9ydHMucmVwbGFjZUVudGl0aWVzICAgICA9IHJlcGxhY2VFbnRpdGllcztcbmV4cG9ydHMuZXNjYXBlSHRtbCAgICAgICAgICA9IGVzY2FwZUh0bWw7XG5leHBvcnRzLmFycmF5UmVwbGFjZUF0ICAgICAgPSBhcnJheVJlcGxhY2VBdDtcbmV4cG9ydHMuaXNTcGFjZSAgICAgICAgICAgICA9IGlzU3BhY2U7XG5leHBvcnRzLmlzV2hpdGVTcGFjZSAgICAgICAgPSBpc1doaXRlU3BhY2U7XG5leHBvcnRzLmlzTWRBc2NpaVB1bmN0ICAgICAgPSBpc01kQXNjaWlQdW5jdDtcbmV4cG9ydHMuaXNQdW5jdENoYXIgICAgICAgICA9IGlzUHVuY3RDaGFyO1xuZXhwb3J0cy5lc2NhcGVSRSAgICAgICAgICAgID0gZXNjYXBlUkU7XG5leHBvcnRzLm5vcm1hbGl6ZVJlZmVyZW5jZSAgPSBub3JtYWxpemVSZWZlcmVuY2U7XG4iLCJtb2R1bGUuZXhwb3J0cz0vWyEtIyUtXFwqLC1cXC86O1xcP0BcXFstXFxdX1xce1xcfVxceEExXFx4QTdcXHhBQlxceEI2XFx4QjdcXHhCQlxceEJGXFx1MDM3RVxcdTAzODdcXHUwNTVBLVxcdTA1NUZcXHUwNTg5XFx1MDU4QVxcdTA1QkVcXHUwNUMwXFx1MDVDM1xcdTA1QzZcXHUwNUYzXFx1MDVGNFxcdTA2MDlcXHUwNjBBXFx1MDYwQ1xcdTA2MERcXHUwNjFCXFx1MDYxRVxcdTA2MUZcXHUwNjZBLVxcdTA2NkRcXHUwNkQ0XFx1MDcwMC1cXHUwNzBEXFx1MDdGNy1cXHUwN0Y5XFx1MDgzMC1cXHUwODNFXFx1MDg1RVxcdTA5NjRcXHUwOTY1XFx1MDk3MFxcdTA5RkRcXHUwQTc2XFx1MEFGMFxcdTBDODRcXHUwREY0XFx1MEU0RlxcdTBFNUFcXHUwRTVCXFx1MEYwNC1cXHUwRjEyXFx1MEYxNFxcdTBGM0EtXFx1MEYzRFxcdTBGODVcXHUwRkQwLVxcdTBGRDRcXHUwRkQ5XFx1MEZEQVxcdTEwNEEtXFx1MTA0RlxcdTEwRkJcXHUxMzYwLVxcdTEzNjhcXHUxNDAwXFx1MTY2RFxcdTE2NkVcXHUxNjlCXFx1MTY5Q1xcdTE2RUItXFx1MTZFRFxcdTE3MzVcXHUxNzM2XFx1MTdENC1cXHUxN0Q2XFx1MTdEOC1cXHUxN0RBXFx1MTgwMC1cXHUxODBBXFx1MTk0NFxcdTE5NDVcXHUxQTFFXFx1MUExRlxcdTFBQTAtXFx1MUFBNlxcdTFBQTgtXFx1MUFBRFxcdTFCNUEtXFx1MUI2MFxcdTFCRkMtXFx1MUJGRlxcdTFDM0ItXFx1MUMzRlxcdTFDN0VcXHUxQzdGXFx1MUNDMC1cXHUxQ0M3XFx1MUNEM1xcdTIwMTAtXFx1MjAyN1xcdTIwMzAtXFx1MjA0M1xcdTIwNDUtXFx1MjA1MVxcdTIwNTMtXFx1MjA1RVxcdTIwN0RcXHUyMDdFXFx1MjA4RFxcdTIwOEVcXHUyMzA4LVxcdTIzMEJcXHUyMzI5XFx1MjMyQVxcdTI3NjgtXFx1Mjc3NVxcdTI3QzVcXHUyN0M2XFx1MjdFNi1cXHUyN0VGXFx1Mjk4My1cXHUyOTk4XFx1MjlEOC1cXHUyOURCXFx1MjlGQ1xcdTI5RkRcXHUyQ0Y5LVxcdTJDRkNcXHUyQ0ZFXFx1MkNGRlxcdTJENzBcXHUyRTAwLVxcdTJFMkVcXHUyRTMwLVxcdTJFNEVcXHUzMDAxLVxcdTMwMDNcXHUzMDA4LVxcdTMwMTFcXHUzMDE0LVxcdTMwMUZcXHUzMDMwXFx1MzAzRFxcdTMwQTBcXHUzMEZCXFx1QTRGRVxcdUE0RkZcXHVBNjBELVxcdUE2MEZcXHVBNjczXFx1QTY3RVxcdUE2RjItXFx1QTZGN1xcdUE4NzQtXFx1QTg3N1xcdUE4Q0VcXHVBOENGXFx1QThGOC1cXHVBOEZBXFx1QThGQ1xcdUE5MkVcXHVBOTJGXFx1QTk1RlxcdUE5QzEtXFx1QTlDRFxcdUE5REVcXHVBOURGXFx1QUE1Qy1cXHVBQTVGXFx1QUFERVxcdUFBREZcXHVBQUYwXFx1QUFGMVxcdUFCRUJcXHVGRDNFXFx1RkQzRlxcdUZFMTAtXFx1RkUxOVxcdUZFMzAtXFx1RkU1MlxcdUZFNTQtXFx1RkU2MVxcdUZFNjNcXHVGRTY4XFx1RkU2QVxcdUZFNkJcXHVGRjAxLVxcdUZGMDNcXHVGRjA1LVxcdUZGMEFcXHVGRjBDLVxcdUZGMEZcXHVGRjFBXFx1RkYxQlxcdUZGMUZcXHVGRjIwXFx1RkYzQi1cXHVGRjNEXFx1RkYzRlxcdUZGNUJcXHVGRjVEXFx1RkY1Ri1cXHVGRjY1XXxcXHVEODAwW1xcdUREMDAtXFx1REQwMlxcdURGOUZcXHVERkQwXXxcXHVEODAxXFx1REQ2RnxcXHVEODAyW1xcdURDNTdcXHVERDFGXFx1REQzRlxcdURFNTAtXFx1REU1OFxcdURFN0ZcXHVERUYwLVxcdURFRjZcXHVERjM5LVxcdURGM0ZcXHVERjk5LVxcdURGOUNdfFxcdUQ4MDNbXFx1REY1NS1cXHVERjU5XXxcXHVEODA0W1xcdURDNDctXFx1REM0RFxcdURDQkJcXHVEQ0JDXFx1RENCRS1cXHVEQ0MxXFx1REQ0MC1cXHVERDQzXFx1REQ3NFxcdURENzVcXHVEREM1LVxcdUREQzhcXHVERENEXFx1REREQlxcdUREREQtXFx1RERERlxcdURFMzgtXFx1REUzRFxcdURFQTldfFxcdUQ4MDVbXFx1REM0Qi1cXHVEQzRGXFx1REM1QlxcdURDNURcXHVEQ0M2XFx1RERDMS1cXHVEREQ3XFx1REU0MS1cXHVERTQzXFx1REU2MC1cXHVERTZDXFx1REYzQy1cXHVERjNFXXxcXHVEODA2W1xcdURDM0JcXHVERTNGLVxcdURFNDZcXHVERTlBLVxcdURFOUNcXHVERTlFLVxcdURFQTJdfFxcdUQ4MDdbXFx1REM0MS1cXHVEQzQ1XFx1REM3MFxcdURDNzFcXHVERUY3XFx1REVGOF18XFx1RDgwOVtcXHVEQzcwLVxcdURDNzRdfFxcdUQ4MUFbXFx1REU2RVxcdURFNkZcXHVERUY1XFx1REYzNy1cXHVERjNCXFx1REY0NF18XFx1RDgxQltcXHVERTk3LVxcdURFOUFdfFxcdUQ4MkZcXHVEQzlGfFxcdUQ4MzZbXFx1REU4Ny1cXHVERThCXXxcXHVEODNBW1xcdURENUVcXHVERDVGXS8iLCIvKipcbiAqIGNsYXNzIFJ1bGVyXG4gKlxuICogSGVscGVyIGNsYXNzLCB1c2VkIGJ5IFtbTWFya2Rvd25JdCNjb3JlXV0sIFtbTWFya2Rvd25JdCNibG9ja11dIGFuZFxuICogW1tNYXJrZG93bkl0I2lubGluZV1dIHRvIG1hbmFnZSBzZXF1ZW5jZXMgb2YgZnVuY3Rpb25zIChydWxlcyk6XG4gKlxuICogLSBrZWVwIHJ1bGVzIGluIGRlZmluZWQgb3JkZXJcbiAqIC0gYXNzaWduIHRoZSBuYW1lIHRvIGVhY2ggcnVsZVxuICogLSBlbmFibGUvZGlzYWJsZSBydWxlc1xuICogLSBhZGQvcmVwbGFjZSBydWxlc1xuICogLSBhbGxvdyBhc3NpZ24gcnVsZXMgdG8gYWRkaXRpb25hbCBuYW1lZCBjaGFpbnMgKGluIHRoZSBzYW1lKVxuICogLSBjYWNoZWluZyBsaXN0cyBvZiBhY3RpdmUgcnVsZXNcbiAqXG4gKiBZb3Ugd2lsbCBub3QgbmVlZCB1c2UgdGhpcyBjbGFzcyBkaXJlY3RseSB1bnRpbCB3cml0ZSBwbHVnaW5zLiBGb3Igc2ltcGxlXG4gKiBydWxlcyBjb250cm9sIHVzZSBbW01hcmtkb3duSXQuZGlzYWJsZV1dLCBbW01hcmtkb3duSXQuZW5hYmxlXV0gYW5kXG4gKiBbW01hcmtkb3duSXQudXNlXV0uXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cblxuLyoqXG4gKiBuZXcgUnVsZXIoKVxuICoqL1xuZnVuY3Rpb24gUnVsZXIoKSB7XG4gIC8vIExpc3Qgb2YgYWRkZWQgcnVsZXMuIEVhY2ggZWxlbWVudCBpczpcbiAgLy9cbiAgLy8ge1xuICAvLyAgIG5hbWU6IFhYWCxcbiAgLy8gICBlbmFibGVkOiBCb29sZWFuLFxuICAvLyAgIGZuOiBGdW5jdGlvbigpLFxuICAvLyAgIGFsdDogWyBuYW1lMiwgbmFtZTMgXVxuICAvLyB9XG4gIC8vXG4gIHRoaXMuX19ydWxlc19fID0gW107XG5cbiAgLy8gQ2FjaGVkIHJ1bGUgY2hhaW5zLlxuICAvL1xuICAvLyBGaXJzdCBsZXZlbCAtIGNoYWluIG5hbWUsICcnIGZvciBkZWZhdWx0LlxuICAvLyBTZWNvbmQgbGV2ZWwgLSBkaWdpbmFsIGFuY2hvciBmb3IgZmFzdCBmaWx0ZXJpbmcgYnkgY2hhcmNvZGVzLlxuICAvL1xuICB0aGlzLl9fY2FjaGVfXyA9IG51bGw7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIZWxwZXIgbWV0aG9kcywgc2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5XG5cblxuLy8gRmluZCBydWxlIGluZGV4IGJ5IG5hbWVcbi8vXG5SdWxlci5wcm90b3R5cGUuX19maW5kX18gPSBmdW5jdGlvbiAobmFtZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX19ydWxlc19fLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRoaXMuX19ydWxlc19fW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG5cbi8vIEJ1aWxkIHJ1bGVzIGxvb2t1cCBjYWNoZVxuLy9cblJ1bGVyLnByb3RvdHlwZS5fX2NvbXBpbGVfXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2hhaW5zID0gWyAnJyBdO1xuXG4gIC8vIGNvbGxlY3QgdW5pcXVlIG5hbWVzXG4gIHNlbGYuX19ydWxlc19fLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICBpZiAoIXJ1bGUuZW5hYmxlZCkgeyByZXR1cm47IH1cblxuICAgIHJ1bGUuYWx0LmZvckVhY2goZnVuY3Rpb24gKGFsdE5hbWUpIHtcbiAgICAgIGlmIChjaGFpbnMuaW5kZXhPZihhbHROYW1lKSA8IDApIHtcbiAgICAgICAgY2hhaW5zLnB1c2goYWx0TmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHNlbGYuX19jYWNoZV9fID0ge307XG5cbiAgY2hhaW5zLmZvckVhY2goZnVuY3Rpb24gKGNoYWluKSB7XG4gICAgc2VsZi5fX2NhY2hlX19bY2hhaW5dID0gW107XG4gICAgc2VsZi5fX3J1bGVzX18uZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgaWYgKCFydWxlLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgIGlmIChjaGFpbiAmJiBydWxlLmFsdC5pbmRleE9mKGNoYWluKSA8IDApIHsgcmV0dXJuOyB9XG5cbiAgICAgIHNlbGYuX19jYWNoZV9fW2NoYWluXS5wdXNoKHJ1bGUuZm4pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblxuLyoqXG4gKiBSdWxlci5hdChuYW1lLCBmbiBbLCBvcHRpb25zXSlcbiAqIC0gbmFtZSAoU3RyaW5nKTogcnVsZSBuYW1lIHRvIHJlcGxhY2UuXG4gKiAtIGZuIChGdW5jdGlvbik6IG5ldyBydWxlIGZ1bmN0aW9uLlxuICogLSBvcHRpb25zIChPYmplY3QpOiBuZXcgcnVsZSBvcHRpb25zIChub3QgbWFuZGF0b3J5KS5cbiAqXG4gKiBSZXBsYWNlIHJ1bGUgYnkgbmFtZSB3aXRoIG5ldyBmdW5jdGlvbiAmIG9wdGlvbnMuIFRocm93cyBlcnJvciBpZiBuYW1lIG5vdFxuICogZm91bmQuXG4gKlxuICogIyMjIyMgT3B0aW9uczpcbiAqXG4gKiAtIF9fYWx0X18gLSBhcnJheSB3aXRoIG5hbWVzIG9mIFwiYWx0ZXJuYXRlXCIgY2hhaW5zLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBSZXBsYWNlIGV4aXN0aW5nIHR5cG9ncmFwaGVyIHJlcGxhY2VtZW50IHJ1bGUgd2l0aCBuZXcgb25lOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKTtcbiAqXG4gKiBtZC5jb3JlLnJ1bGVyLmF0KCdyZXBsYWNlbWVudHMnLCBmdW5jdGlvbiByZXBsYWNlKHN0YXRlKSB7XG4gKiAgIC8vLi4uXG4gKiB9KTtcbiAqIGBgYFxuICoqL1xuUnVsZXIucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gKG5hbWUsIGZuLCBvcHRpb25zKSB7XG4gIHZhciBpbmRleCA9IHRoaXMuX19maW5kX18obmFtZSk7XG4gIHZhciBvcHQgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChpbmRleCA9PT0gLTEpIHsgdGhyb3cgbmV3IEVycm9yKCdQYXJzZXIgcnVsZSBub3QgZm91bmQ6ICcgKyBuYW1lKTsgfVxuXG4gIHRoaXMuX19ydWxlc19fW2luZGV4XS5mbiA9IGZuO1xuICB0aGlzLl9fcnVsZXNfX1tpbmRleF0uYWx0ID0gb3B0LmFsdCB8fCBbXTtcbiAgdGhpcy5fX2NhY2hlX18gPSBudWxsO1xufTtcblxuXG4vKipcbiAqIFJ1bGVyLmJlZm9yZShiZWZvcmVOYW1lLCBydWxlTmFtZSwgZm4gWywgb3B0aW9uc10pXG4gKiAtIGJlZm9yZU5hbWUgKFN0cmluZyk6IG5ldyBydWxlIHdpbGwgYmUgYWRkZWQgYmVmb3JlIHRoaXMgb25lLlxuICogLSBydWxlTmFtZSAoU3RyaW5nKTogbmFtZSBvZiBhZGRlZCBydWxlLlxuICogLSBmbiAoRnVuY3Rpb24pOiBydWxlIGZ1bmN0aW9uLlxuICogLSBvcHRpb25zIChPYmplY3QpOiBydWxlIG9wdGlvbnMgKG5vdCBtYW5kYXRvcnkpLlxuICpcbiAqIEFkZCBuZXcgcnVsZSB0byBjaGFpbiBiZWZvcmUgb25lIHdpdGggZ2l2ZW4gbmFtZS4gU2VlIGFsc29cbiAqIFtbUnVsZXIuYWZ0ZXJdXSwgW1tSdWxlci5wdXNoXV0uXG4gKlxuICogIyMjIyMgT3B0aW9uczpcbiAqXG4gKiAtIF9fYWx0X18gLSBhcnJheSB3aXRoIG5hbWVzIG9mIFwiYWx0ZXJuYXRlXCIgY2hhaW5zLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKCk7XG4gKlxuICogbWQuYmxvY2sucnVsZXIuYmVmb3JlKCdwYXJhZ3JhcGgnLCAnbXlfcnVsZScsIGZ1bmN0aW9uIHJlcGxhY2Uoc3RhdGUpIHtcbiAqICAgLy8uLi5cbiAqIH0pO1xuICogYGBgXG4gKiovXG5SdWxlci5wcm90b3R5cGUuYmVmb3JlID0gZnVuY3Rpb24gKGJlZm9yZU5hbWUsIHJ1bGVOYW1lLCBmbiwgb3B0aW9ucykge1xuICB2YXIgaW5kZXggPSB0aGlzLl9fZmluZF9fKGJlZm9yZU5hbWUpO1xuICB2YXIgb3B0ID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAoaW5kZXggPT09IC0xKSB7IHRocm93IG5ldyBFcnJvcignUGFyc2VyIHJ1bGUgbm90IGZvdW5kOiAnICsgYmVmb3JlTmFtZSk7IH1cblxuICB0aGlzLl9fcnVsZXNfXy5zcGxpY2UoaW5kZXgsIDAsIHtcbiAgICBuYW1lOiBydWxlTmFtZSxcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGZuOiBmbixcbiAgICBhbHQ6IG9wdC5hbHQgfHwgW11cbiAgfSk7XG5cbiAgdGhpcy5fX2NhY2hlX18gPSBudWxsO1xufTtcblxuXG4vKipcbiAqIFJ1bGVyLmFmdGVyKGFmdGVyTmFtZSwgcnVsZU5hbWUsIGZuIFssIG9wdGlvbnNdKVxuICogLSBhZnRlck5hbWUgKFN0cmluZyk6IG5ldyBydWxlIHdpbGwgYmUgYWRkZWQgYWZ0ZXIgdGhpcyBvbmUuXG4gKiAtIHJ1bGVOYW1lIChTdHJpbmcpOiBuYW1lIG9mIGFkZGVkIHJ1bGUuXG4gKiAtIGZuIChGdW5jdGlvbik6IHJ1bGUgZnVuY3Rpb24uXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHJ1bGUgb3B0aW9ucyAobm90IG1hbmRhdG9yeSkuXG4gKlxuICogQWRkIG5ldyBydWxlIHRvIGNoYWluIGFmdGVyIG9uZSB3aXRoIGdpdmVuIG5hbWUuIFNlZSBhbHNvXG4gKiBbW1J1bGVyLmJlZm9yZV1dLCBbW1J1bGVyLnB1c2hdXS5cbiAqXG4gKiAjIyMjIyBPcHRpb25zOlxuICpcbiAqIC0gX19hbHRfXyAtIGFycmF5IHdpdGggbmFtZXMgb2YgXCJhbHRlcm5hdGVcIiBjaGFpbnMuXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKTtcbiAqXG4gKiBtZC5pbmxpbmUucnVsZXIuYWZ0ZXIoJ3RleHQnLCAnbXlfcnVsZScsIGZ1bmN0aW9uIHJlcGxhY2Uoc3RhdGUpIHtcbiAqICAgLy8uLi5cbiAqIH0pO1xuICogYGBgXG4gKiovXG5SdWxlci5wcm90b3R5cGUuYWZ0ZXIgPSBmdW5jdGlvbiAoYWZ0ZXJOYW1lLCBydWxlTmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5fX2ZpbmRfXyhhZnRlck5hbWUpO1xuICB2YXIgb3B0ID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAoaW5kZXggPT09IC0xKSB7IHRocm93IG5ldyBFcnJvcignUGFyc2VyIHJ1bGUgbm90IGZvdW5kOiAnICsgYWZ0ZXJOYW1lKTsgfVxuXG4gIHRoaXMuX19ydWxlc19fLnNwbGljZShpbmRleCArIDEsIDAsIHtcbiAgICBuYW1lOiBydWxlTmFtZSxcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGZuOiBmbixcbiAgICBhbHQ6IG9wdC5hbHQgfHwgW11cbiAgfSk7XG5cbiAgdGhpcy5fX2NhY2hlX18gPSBudWxsO1xufTtcblxuLyoqXG4gKiBSdWxlci5wdXNoKHJ1bGVOYW1lLCBmbiBbLCBvcHRpb25zXSlcbiAqIC0gcnVsZU5hbWUgKFN0cmluZyk6IG5hbWUgb2YgYWRkZWQgcnVsZS5cbiAqIC0gZm4gKEZ1bmN0aW9uKTogcnVsZSBmdW5jdGlvbi5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogcnVsZSBvcHRpb25zIChub3QgbWFuZGF0b3J5KS5cbiAqXG4gKiBQdXNoIG5ldyBydWxlIHRvIHRoZSBlbmQgb2YgY2hhaW4uIFNlZSBhbHNvXG4gKiBbW1J1bGVyLmJlZm9yZV1dLCBbW1J1bGVyLmFmdGVyXV0uXG4gKlxuICogIyMjIyMgT3B0aW9uczpcbiAqXG4gKiAtIF9fYWx0X18gLSBhcnJheSB3aXRoIG5hbWVzIG9mIFwiYWx0ZXJuYXRlXCIgY2hhaW5zLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKCk7XG4gKlxuICogbWQuY29yZS5ydWxlci5wdXNoKCdteV9ydWxlJywgZnVuY3Rpb24gcmVwbGFjZShzdGF0ZSkge1xuICogICAvLy4uLlxuICogfSk7XG4gKiBgYGBcbiAqKi9cblJ1bGVyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHJ1bGVOYW1lLCBmbiwgb3B0aW9ucykge1xuICB2YXIgb3B0ID0gb3B0aW9ucyB8fCB7fTtcblxuICB0aGlzLl9fcnVsZXNfXy5wdXNoKHtcbiAgICBuYW1lOiBydWxlTmFtZSxcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGZuOiBmbixcbiAgICBhbHQ6IG9wdC5hbHQgfHwgW11cbiAgfSk7XG5cbiAgdGhpcy5fX2NhY2hlX18gPSBudWxsO1xufTtcblxuXG4vKipcbiAqIFJ1bGVyLmVuYWJsZShsaXN0IFssIGlnbm9yZUludmFsaWRdKSAtPiBBcnJheVxuICogLSBsaXN0IChTdHJpbmd8QXJyYXkpOiBsaXN0IG9mIHJ1bGUgbmFtZXMgdG8gZW5hYmxlLlxuICogLSBpZ25vcmVJbnZhbGlkIChCb29sZWFuKTogc2V0IGB0cnVlYCB0byBpZ25vcmUgZXJyb3JzIHdoZW4gcnVsZSBub3QgZm91bmQuXG4gKlxuICogRW5hYmxlIHJ1bGVzIHdpdGggZ2l2ZW4gbmFtZXMuIElmIGFueSBydWxlIG5hbWUgbm90IGZvdW5kIC0gdGhyb3cgRXJyb3IuXG4gKiBFcnJvcnMgY2FuIGJlIGRpc2FibGVkIGJ5IHNlY29uZCBwYXJhbS5cbiAqXG4gKiBSZXR1cm5zIGxpc3Qgb2YgZm91bmQgcnVsZSBuYW1lcyAoaWYgbm8gZXhjZXB0aW9uIGhhcHBlbmVkKS5cbiAqXG4gKiBTZWUgYWxzbyBbW1J1bGVyLmRpc2FibGVdXSwgW1tSdWxlci5lbmFibGVPbmx5XV0uXG4gKiovXG5SdWxlci5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKGxpc3QsIGlnbm9yZUludmFsaWQpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7IGxpc3QgPSBbIGxpc3QgXTsgfVxuXG4gIHZhciByZXN1bHQgPSBbXTtcblxuICAvLyBTZWFyY2ggYnkgbmFtZSBhbmQgZW5hYmxlXG4gIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBpZHggPSB0aGlzLl9fZmluZF9fKG5hbWUpO1xuXG4gICAgaWYgKGlkeCA8IDApIHtcbiAgICAgIGlmIChpZ25vcmVJbnZhbGlkKSB7IHJldHVybjsgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSdWxlcyBtYW5hZ2VyOiBpbnZhbGlkIHJ1bGUgbmFtZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHRoaXMuX19ydWxlc19fW2lkeF0uZW5hYmxlZCA9IHRydWU7XG4gICAgcmVzdWx0LnB1c2gobmFtZSk7XG4gIH0sIHRoaXMpO1xuXG4gIHRoaXMuX19jYWNoZV9fID0gbnVsbDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqXG4gKiBSdWxlci5lbmFibGVPbmx5KGxpc3QgWywgaWdub3JlSW52YWxpZF0pXG4gKiAtIGxpc3QgKFN0cmluZ3xBcnJheSk6IGxpc3Qgb2YgcnVsZSBuYW1lcyB0byBlbmFibGUgKHdoaXRlbGlzdCkuXG4gKiAtIGlnbm9yZUludmFsaWQgKEJvb2xlYW4pOiBzZXQgYHRydWVgIHRvIGlnbm9yZSBlcnJvcnMgd2hlbiBydWxlIG5vdCBmb3VuZC5cbiAqXG4gKiBFbmFibGUgcnVsZXMgd2l0aCBnaXZlbiBuYW1lcywgYW5kIGRpc2FibGUgZXZlcnl0aGluZyBlbHNlLiBJZiBhbnkgcnVsZSBuYW1lXG4gKiBub3QgZm91bmQgLSB0aHJvdyBFcnJvci4gRXJyb3JzIGNhbiBiZSBkaXNhYmxlZCBieSBzZWNvbmQgcGFyYW0uXG4gKlxuICogU2VlIGFsc28gW1tSdWxlci5kaXNhYmxlXV0sIFtbUnVsZXIuZW5hYmxlXV0uXG4gKiovXG5SdWxlci5wcm90b3R5cGUuZW5hYmxlT25seSA9IGZ1bmN0aW9uIChsaXN0LCBpZ25vcmVJbnZhbGlkKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgeyBsaXN0ID0gWyBsaXN0IF07IH1cblxuICB0aGlzLl9fcnVsZXNfXy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7IHJ1bGUuZW5hYmxlZCA9IGZhbHNlOyB9KTtcblxuICB0aGlzLmVuYWJsZShsaXN0LCBpZ25vcmVJbnZhbGlkKTtcbn07XG5cblxuLyoqXG4gKiBSdWxlci5kaXNhYmxlKGxpc3QgWywgaWdub3JlSW52YWxpZF0pIC0+IEFycmF5XG4gKiAtIGxpc3QgKFN0cmluZ3xBcnJheSk6IGxpc3Qgb2YgcnVsZSBuYW1lcyB0byBkaXNhYmxlLlxuICogLSBpZ25vcmVJbnZhbGlkIChCb29sZWFuKTogc2V0IGB0cnVlYCB0byBpZ25vcmUgZXJyb3JzIHdoZW4gcnVsZSBub3QgZm91bmQuXG4gKlxuICogRGlzYWJsZSBydWxlcyB3aXRoIGdpdmVuIG5hbWVzLiBJZiBhbnkgcnVsZSBuYW1lIG5vdCBmb3VuZCAtIHRocm93IEVycm9yLlxuICogRXJyb3JzIGNhbiBiZSBkaXNhYmxlZCBieSBzZWNvbmQgcGFyYW0uXG4gKlxuICogUmV0dXJucyBsaXN0IG9mIGZvdW5kIHJ1bGUgbmFtZXMgKGlmIG5vIGV4Y2VwdGlvbiBoYXBwZW5lZCkuXG4gKlxuICogU2VlIGFsc28gW1tSdWxlci5lbmFibGVdXSwgW1tSdWxlci5lbmFibGVPbmx5XV0uXG4gKiovXG5SdWxlci5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIChsaXN0LCBpZ25vcmVJbnZhbGlkKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgeyBsaXN0ID0gWyBsaXN0IF07IH1cblxuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgLy8gU2VhcmNoIGJ5IG5hbWUgYW5kIGRpc2FibGVcbiAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuX19maW5kX18obmFtZSk7XG5cbiAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgaWYgKGlnbm9yZUludmFsaWQpIHsgcmV0dXJuOyB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1J1bGVzIG1hbmFnZXI6IGludmFsaWQgcnVsZSBuYW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgdGhpcy5fX3J1bGVzX19baWR4XS5lbmFibGVkID0gZmFsc2U7XG4gICAgcmVzdWx0LnB1c2gobmFtZSk7XG4gIH0sIHRoaXMpO1xuXG4gIHRoaXMuX19jYWNoZV9fID0gbnVsbDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqXG4gKiBSdWxlci5nZXRSdWxlcyhjaGFpbk5hbWUpIC0+IEFycmF5XG4gKlxuICogUmV0dXJuIGFycmF5IG9mIGFjdGl2ZSBmdW5jdGlvbnMgKHJ1bGVzKSBmb3IgZ2l2ZW4gY2hhaW4gbmFtZS4gSXQgYW5hbHl6ZXNcbiAqIHJ1bGVzIGNvbmZpZ3VyYXRpb24sIGNvbXBpbGVzIGNhY2hlcyBpZiBub3QgZXhpc3RzIGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBEZWZhdWx0IGNoYWluIG5hbWUgaXMgYCcnYCAoZW1wdHkgc3RyaW5nKS4gSXQgY2FuJ3QgYmUgc2tpcHBlZC4gVGhhdCdzXG4gKiBkb25lIGludGVudGlvbmFsbHksIHRvIGtlZXAgc2lnbmF0dXJlIG1vbm9tb3JwaGljIGZvciBoaWdoIHNwZWVkLlxuICoqL1xuUnVsZXIucHJvdG90eXBlLmdldFJ1bGVzID0gZnVuY3Rpb24gKGNoYWluTmFtZSkge1xuICBpZiAodGhpcy5fX2NhY2hlX18gPT09IG51bGwpIHtcbiAgICB0aGlzLl9fY29tcGlsZV9fKCk7XG4gIH1cblxuICAvLyBDaGFpbiBjYW4gYmUgZW1wdHksIGlmIHJ1bGVzIGRpc2FibGVkLiBCdXQgd2Ugc3RpbGwgaGF2ZSB0byByZXR1cm4gQXJyYXkuXG4gIHJldHVybiB0aGlzLl9fY2FjaGVfX1tjaGFpbk5hbWVdIHx8IFtdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSdWxlcjtcbiIsIi8vIFRva2VuIGNsYXNzXG5cbid1c2Ugc3RyaWN0JztcblxuXG4vKipcbiAqIGNsYXNzIFRva2VuXG4gKiovXG5cbi8qKlxuICogbmV3IFRva2VuKHR5cGUsIHRhZywgbmVzdGluZylcbiAqXG4gKiBDcmVhdGUgbmV3IHRva2VuIGFuZCBmaWxsIHBhc3NlZCBwcm9wZXJ0aWVzLlxuICoqL1xuZnVuY3Rpb24gVG9rZW4odHlwZSwgdGFnLCBuZXN0aW5nKSB7XG4gIC8qKlxuICAgKiBUb2tlbiN0eXBlIC0+IFN0cmluZ1xuICAgKlxuICAgKiBUeXBlIG9mIHRoZSB0b2tlbiAoc3RyaW5nLCBlLmcuIFwicGFyYWdyYXBoX29wZW5cIilcbiAgICoqL1xuICB0aGlzLnR5cGUgICAgID0gdHlwZTtcblxuICAvKipcbiAgICogVG9rZW4jdGFnIC0+IFN0cmluZ1xuICAgKlxuICAgKiBodG1sIHRhZyBuYW1lLCBlLmcuIFwicFwiXG4gICAqKi9cbiAgdGhpcy50YWcgICAgICA9IHRhZztcblxuICAvKipcbiAgICogVG9rZW4jYXR0cnMgLT4gQXJyYXlcbiAgICpcbiAgICogSHRtbCBhdHRyaWJ1dGVzLiBGb3JtYXQ6IGBbIFsgbmFtZTEsIHZhbHVlMSBdLCBbIG5hbWUyLCB2YWx1ZTIgXSBdYFxuICAgKiovXG4gIHRoaXMuYXR0cnMgICAgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUb2tlbiNtYXAgLT4gQXJyYXlcbiAgICpcbiAgICogU291cmNlIG1hcCBpbmZvLiBGb3JtYXQ6IGBbIGxpbmVfYmVnaW4sIGxpbmVfZW5kIF1gXG4gICAqKi9cbiAgdGhpcy5tYXAgICAgICA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRva2VuI25lc3RpbmcgLT4gTnVtYmVyXG4gICAqXG4gICAqIExldmVsIGNoYW5nZSAobnVtYmVyIGluIHstMSwgMCwgMX0gc2V0KSwgd2hlcmU6XG4gICAqXG4gICAqIC0gIGAxYCBtZWFucyB0aGUgdGFnIGlzIG9wZW5pbmdcbiAgICogLSAgYDBgIG1lYW5zIHRoZSB0YWcgaXMgc2VsZi1jbG9zaW5nXG4gICAqIC0gYC0xYCBtZWFucyB0aGUgdGFnIGlzIGNsb3NpbmdcbiAgICoqL1xuICB0aGlzLm5lc3RpbmcgID0gbmVzdGluZztcblxuICAvKipcbiAgICogVG9rZW4jbGV2ZWwgLT4gTnVtYmVyXG4gICAqXG4gICAqIG5lc3RpbmcgbGV2ZWwsIHRoZSBzYW1lIGFzIGBzdGF0ZS5sZXZlbGBcbiAgICoqL1xuICB0aGlzLmxldmVsICAgID0gMDtcblxuICAvKipcbiAgICogVG9rZW4jY2hpbGRyZW4gLT4gQXJyYXlcbiAgICpcbiAgICogQW4gYXJyYXkgb2YgY2hpbGQgbm9kZXMgKGlubGluZSBhbmQgaW1nIHRva2VucylcbiAgICoqL1xuICB0aGlzLmNoaWxkcmVuID0gbnVsbDtcblxuICAvKipcbiAgICogVG9rZW4jY29udGVudCAtPiBTdHJpbmdcbiAgICpcbiAgICogSW4gYSBjYXNlIG9mIHNlbGYtY2xvc2luZyB0YWcgKGNvZGUsIGh0bWwsIGZlbmNlLCBldGMuKSxcbiAgICogaXQgaGFzIGNvbnRlbnRzIG9mIHRoaXMgdGFnLlxuICAgKiovXG4gIHRoaXMuY29udGVudCAgPSAnJztcblxuICAvKipcbiAgICogVG9rZW4jbWFya3VwIC0+IFN0cmluZ1xuICAgKlxuICAgKiAnKicgb3IgJ18nIGZvciBlbXBoYXNpcywgZmVuY2Ugc3RyaW5nIGZvciBmZW5jZSwgZXRjLlxuICAgKiovXG4gIHRoaXMubWFya3VwICAgPSAnJztcblxuICAvKipcbiAgICogVG9rZW4jaW5mbyAtPiBTdHJpbmdcbiAgICpcbiAgICogZmVuY2UgaW5mb3N0cmluZ1xuICAgKiovXG4gIHRoaXMuaW5mbyAgICAgPSAnJztcblxuICAvKipcbiAgICogVG9rZW4jbWV0YSAtPiBPYmplY3RcbiAgICpcbiAgICogQSBwbGFjZSBmb3IgcGx1Z2lucyB0byBzdG9yZSBhbiBhcmJpdHJhcnkgZGF0YVxuICAgKiovXG4gIHRoaXMubWV0YSAgICAgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUb2tlbiNibG9jayAtPiBCb29sZWFuXG4gICAqXG4gICAqIFRydWUgZm9yIGJsb2NrLWxldmVsIHRva2VucywgZmFsc2UgZm9yIGlubGluZSB0b2tlbnMuXG4gICAqIFVzZWQgaW4gcmVuZGVyZXIgdG8gY2FsY3VsYXRlIGxpbmUgYnJlYWtzXG4gICAqKi9cbiAgdGhpcy5ibG9jayAgICA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUb2tlbiNoaWRkZW4gLT4gQm9vbGVhblxuICAgKlxuICAgKiBJZiBpdCdzIHRydWUsIGlnbm9yZSB0aGlzIGVsZW1lbnQgd2hlbiByZW5kZXJpbmcuIFVzZWQgZm9yIHRpZ2h0IGxpc3RzXG4gICAqIHRvIGhpZGUgcGFyYWdyYXBocy5cbiAgICoqL1xuICB0aGlzLmhpZGRlbiAgID0gZmFsc2U7XG59XG5cblxuLyoqXG4gKiBUb2tlbi5hdHRySW5kZXgobmFtZSkgLT4gTnVtYmVyXG4gKlxuICogU2VhcmNoIGF0dHJpYnV0ZSBpbmRleCBieSBuYW1lLlxuICoqL1xuVG9rZW4ucHJvdG90eXBlLmF0dHJJbmRleCA9IGZ1bmN0aW9uIGF0dHJJbmRleChuYW1lKSB7XG4gIHZhciBhdHRycywgaSwgbGVuO1xuXG4gIGlmICghdGhpcy5hdHRycykgeyByZXR1cm4gLTE7IH1cblxuICBhdHRycyA9IHRoaXMuYXR0cnM7XG5cbiAgZm9yIChpID0gMCwgbGVuID0gYXR0cnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYXR0cnNbaV1bMF0gPT09IG5hbWUpIHsgcmV0dXJuIGk7IH1cbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG5cbi8qKlxuICogVG9rZW4uYXR0clB1c2goYXR0ckRhdGEpXG4gKlxuICogQWRkIGBbIG5hbWUsIHZhbHVlIF1gIGF0dHJpYnV0ZSB0byBsaXN0LiBJbml0IGF0dHJzIGlmIG5lY2Vzc2FyeVxuICoqL1xuVG9rZW4ucHJvdG90eXBlLmF0dHJQdXNoID0gZnVuY3Rpb24gYXR0clB1c2goYXR0ckRhdGEpIHtcbiAgaWYgKHRoaXMuYXR0cnMpIHtcbiAgICB0aGlzLmF0dHJzLnB1c2goYXR0ckRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuYXR0cnMgPSBbIGF0dHJEYXRhIF07XG4gIH1cbn07XG5cblxuLyoqXG4gKiBUb2tlbi5hdHRyU2V0KG5hbWUsIHZhbHVlKVxuICpcbiAqIFNldCBgbmFtZWAgYXR0cmlidXRlIHRvIGB2YWx1ZWAuIE92ZXJyaWRlIG9sZCB2YWx1ZSBpZiBleGlzdHMuXG4gKiovXG5Ub2tlbi5wcm90b3R5cGUuYXR0clNldCA9IGZ1bmN0aW9uIGF0dHJTZXQobmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkeCA9IHRoaXMuYXR0ckluZGV4KG5hbWUpLFxuICAgICAgYXR0ckRhdGEgPSBbIG5hbWUsIHZhbHVlIF07XG5cbiAgaWYgKGlkeCA8IDApIHtcbiAgICB0aGlzLmF0dHJQdXNoKGF0dHJEYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmF0dHJzW2lkeF0gPSBhdHRyRGF0YTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFRva2VuLmF0dHJHZXQobmFtZSlcbiAqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGF0dHJpYnV0ZSBgbmFtZWAsIG9yIG51bGwgaWYgaXQgZG9lcyBub3QgZXhpc3QuXG4gKiovXG5Ub2tlbi5wcm90b3R5cGUuYXR0ckdldCA9IGZ1bmN0aW9uIGF0dHJHZXQobmFtZSkge1xuICB2YXIgaWR4ID0gdGhpcy5hdHRySW5kZXgobmFtZSksIHZhbHVlID0gbnVsbDtcbiAgaWYgKGlkeCA+PSAwKSB7XG4gICAgdmFsdWUgPSB0aGlzLmF0dHJzW2lkeF1bMV07XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuXG4vKipcbiAqIFRva2VuLmF0dHJKb2luKG5hbWUsIHZhbHVlKVxuICpcbiAqIEpvaW4gdmFsdWUgdG8gZXhpc3RpbmcgYXR0cmlidXRlIHZpYSBzcGFjZS4gT3IgY3JlYXRlIG5ldyBhdHRyaWJ1dGUgaWYgbm90XG4gKiBleGlzdHMuIFVzZWZ1bCB0byBvcGVyYXRlIHdpdGggdG9rZW4gY2xhc3Nlcy5cbiAqKi9cblRva2VuLnByb3RvdHlwZS5hdHRySm9pbiA9IGZ1bmN0aW9uIGF0dHJKb2luKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZHggPSB0aGlzLmF0dHJJbmRleChuYW1lKTtcblxuICBpZiAoaWR4IDwgMCkge1xuICAgIHRoaXMuYXR0clB1c2goWyBuYW1lLCB2YWx1ZSBdKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmF0dHJzW2lkeF1bMV0gPSB0aGlzLmF0dHJzW2lkeF1bMV0gKyAnICcgKyB2YWx1ZTtcbiAgfVxufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRva2VuO1xuIiwiLy8gSFRNTDUgZW50aXRpZXMgbWFwOiB7IG5hbWUgLT4gdXRmMTZzdHJpbmcgfVxuLy9cbid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQgcXVvdGVzOjAqL1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdlbnRpdGllcy9saWIvbWFwcy9lbnRpdGllcy5qc29uJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMuZW5jb2RlID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbm1vZHVsZS5leHBvcnRzLmRlY29kZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5tb2R1bGUuZXhwb3J0cy5mb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xubW9kdWxlLmV4cG9ydHMucGFyc2UgID0gcmVxdWlyZSgnLi9wYXJzZScpO1xuIiwibW9kdWxlLmV4cG9ydHM9L1tcXDAtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS8iLCJtb2R1bGUuZXhwb3J0cz0vW1xcMC1cXHgxRlxceDdGLVxceDlGXS8iLCJtb2R1bGUuZXhwb3J0cz0vWyBcXHhBMFxcdTE2ODBcXHUyMDAwLVxcdTIwMEFcXHUyMDI4XFx1MjAyOVxcdTIwMkZcXHUyMDVGXFx1MzAwMF0vIiwiLy8gUmVnZXhwcyB0byBtYXRjaCBodG1sIGVsZW1lbnRzXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGF0dHJfbmFtZSAgICAgPSAnW2EtekEtWl86XVthLXpBLVowLTk6Ll8tXSonO1xuXG52YXIgdW5xdW90ZWQgICAgICA9ICdbXlwiXFwnPTw+YFxcXFx4MDAtXFxcXHgyMF0rJztcbnZhciBzaW5nbGVfcXVvdGVkID0gXCInW14nXSonXCI7XG52YXIgZG91YmxlX3F1b3RlZCA9ICdcIlteXCJdKlwiJztcblxudmFyIGF0dHJfdmFsdWUgID0gJyg/OicgKyB1bnF1b3RlZCArICd8JyArIHNpbmdsZV9xdW90ZWQgKyAnfCcgKyBkb3VibGVfcXVvdGVkICsgJyknO1xuXG52YXIgYXR0cmlidXRlICAgPSAnKD86XFxcXHMrJyArIGF0dHJfbmFtZSArICcoPzpcXFxccyo9XFxcXHMqJyArIGF0dHJfdmFsdWUgKyAnKT8pJztcblxudmFyIG9wZW5fdGFnICAgID0gJzxbQS1aYS16XVtBLVphLXowLTlcXFxcLV0qJyArIGF0dHJpYnV0ZSArICcqXFxcXHMqXFxcXC8/Pic7XG5cbnZhciBjbG9zZV90YWcgICA9ICc8XFxcXC9bQS1aYS16XVtBLVphLXowLTlcXFxcLV0qXFxcXHMqPic7XG52YXIgY29tbWVudCAgICAgPSAnPCEtLS0tPnw8IS0tKD86LT9bXj4tXSkoPzotP1teLV0pKi0tPic7XG52YXIgcHJvY2Vzc2luZyAgPSAnPFs/XS4qP1s/XT4nO1xudmFyIGRlY2xhcmF0aW9uID0gJzwhW0EtWl0rXFxcXHMrW14+XSo+JztcbnZhciBjZGF0YSAgICAgICA9ICc8IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT4nO1xuXG52YXIgSFRNTF9UQUdfUkUgPSBuZXcgUmVnRXhwKCdeKD86JyArIG9wZW5fdGFnICsgJ3wnICsgY2xvc2VfdGFnICsgJ3wnICsgY29tbWVudCArXG4gICAgICAgICAgICAgICAgICAgICAgICAnfCcgKyBwcm9jZXNzaW5nICsgJ3wnICsgZGVjbGFyYXRpb24gKyAnfCcgKyBjZGF0YSArICcpJyk7XG52YXIgSFRNTF9PUEVOX0NMT1NFX1RBR19SRSA9IG5ldyBSZWdFeHAoJ14oPzonICsgb3Blbl90YWcgKyAnfCcgKyBjbG9zZV90YWcgKyAnKScpO1xuXG5tb2R1bGUuZXhwb3J0cy5IVE1MX1RBR19SRSA9IEhUTUxfVEFHX1JFO1xubW9kdWxlLmV4cG9ydHMuSFRNTF9PUEVOX0NMT1NFX1RBR19SRSA9IEhUTUxfT1BFTl9DTE9TRV9UQUdfUkU7XG4iLCIvLyB+fnN0cmlrZSB0aHJvdWdofn5cbi8vXG4ndXNlIHN0cmljdCc7XG5cblxuLy8gSW5zZXJ0IGVhY2ggbWFya2VyIGFzIGEgc2VwYXJhdGUgdGV4dCB0b2tlbiwgYW5kIGFkZCBpdCB0byBkZWxpbWl0ZXIgbGlzdFxuLy9cbm1vZHVsZS5leHBvcnRzLnRva2VuaXplID0gZnVuY3Rpb24gc3RyaWtldGhyb3VnaChzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBpLCBzY2FubmVkLCB0b2tlbiwgbGVuLCBjaCxcbiAgICAgIHN0YXJ0ID0gc3RhdGUucG9zLFxuICAgICAgbWFya2VyID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQoc3RhcnQpO1xuXG4gIGlmIChzaWxlbnQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKG1hcmtlciAhPT0gMHg3RS8qIH4gKi8pIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgc2Nhbm5lZCA9IHN0YXRlLnNjYW5EZWxpbXMoc3RhdGUucG9zLCB0cnVlKTtcbiAgbGVuID0gc2Nhbm5lZC5sZW5ndGg7XG4gIGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXIpO1xuXG4gIGlmIChsZW4gPCAyKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmIChsZW4gJSAyKSB7XG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgdG9rZW4uY29udGVudCA9IGNoO1xuICAgIGxlbi0tO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgdG9rZW4uY29udGVudCA9IGNoICsgY2g7XG5cbiAgICBzdGF0ZS5kZWxpbWl0ZXJzLnB1c2goe1xuICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICBsZW5ndGg6IDAsIC8vIGRpc2FibGUgXCJydWxlIG9mIDNcIiBsZW5ndGggY2hlY2tzIG1lYW50IGZvciBlbXBoYXNpc1xuICAgICAganVtcDogICBpLFxuICAgICAgdG9rZW46ICBzdGF0ZS50b2tlbnMubGVuZ3RoIC0gMSxcbiAgICAgIGVuZDogICAgLTEsXG4gICAgICBvcGVuOiAgIHNjYW5uZWQuY2FuX29wZW4sXG4gICAgICBjbG9zZTogIHNjYW5uZWQuY2FuX2Nsb3NlXG4gICAgfSk7XG4gIH1cblxuICBzdGF0ZS5wb3MgKz0gc2Nhbm5lZC5sZW5ndGg7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbmZ1bmN0aW9uIHBvc3RQcm9jZXNzKHN0YXRlLCBkZWxpbWl0ZXJzKSB7XG4gIHZhciBpLCBqLFxuICAgICAgc3RhcnREZWxpbSxcbiAgICAgIGVuZERlbGltLFxuICAgICAgdG9rZW4sXG4gICAgICBsb25lTWFya2VycyA9IFtdLFxuICAgICAgbWF4ID0gZGVsaW1pdGVycy5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgc3RhcnREZWxpbSA9IGRlbGltaXRlcnNbaV07XG5cbiAgICBpZiAoc3RhcnREZWxpbS5tYXJrZXIgIT09IDB4N0UvKiB+ICovKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnREZWxpbS5lbmQgPT09IC0xKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBlbmREZWxpbSA9IGRlbGltaXRlcnNbc3RhcnREZWxpbS5lbmRdO1xuXG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnRva2Vuc1tzdGFydERlbGltLnRva2VuXTtcbiAgICB0b2tlbi50eXBlICAgID0gJ3Nfb3Blbic7XG4gICAgdG9rZW4udGFnICAgICA9ICdzJztcbiAgICB0b2tlbi5uZXN0aW5nID0gMTtcbiAgICB0b2tlbi5tYXJrdXAgID0gJ35+JztcbiAgICB0b2tlbi5jb250ZW50ID0gJyc7XG5cbiAgICB0b2tlbiAgICAgICAgID0gc3RhdGUudG9rZW5zW2VuZERlbGltLnRva2VuXTtcbiAgICB0b2tlbi50eXBlICAgID0gJ3NfY2xvc2UnO1xuICAgIHRva2VuLnRhZyAgICAgPSAncyc7XG4gICAgdG9rZW4ubmVzdGluZyA9IC0xO1xuICAgIHRva2VuLm1hcmt1cCAgPSAnfn4nO1xuICAgIHRva2VuLmNvbnRlbnQgPSAnJztcblxuICAgIGlmIChzdGF0ZS50b2tlbnNbZW5kRGVsaW0udG9rZW4gLSAxXS50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgc3RhdGUudG9rZW5zW2VuZERlbGltLnRva2VuIC0gMV0uY29udGVudCA9PT0gJ34nKSB7XG5cbiAgICAgIGxvbmVNYXJrZXJzLnB1c2goZW5kRGVsaW0udG9rZW4gLSAxKTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiBhIG1hcmtlciBzZXF1ZW5jZSBoYXMgYW4gb2RkIG51bWJlciBvZiBjaGFyYWN0ZXJzLCBpdCdzIHNwbGl0dGVkXG4gIC8vIGxpa2UgdGhpczogYH5+fn5+YCAtPiBgfmAgKyBgfn5gICsgYH5+YCwgbGVhdmluZyBvbmUgbWFya2VyIGF0IHRoZVxuICAvLyBzdGFydCBvZiB0aGUgc2VxdWVuY2UuXG4gIC8vXG4gIC8vIFNvLCB3ZSBoYXZlIHRvIG1vdmUgYWxsIHRob3NlIG1hcmtlcnMgYWZ0ZXIgc3Vic2VxdWVudCBzX2Nsb3NlIHRhZ3MuXG4gIC8vXG4gIHdoaWxlIChsb25lTWFya2Vycy5sZW5ndGgpIHtcbiAgICBpID0gbG9uZU1hcmtlcnMucG9wKCk7XG4gICAgaiA9IGkgKyAxO1xuXG4gICAgd2hpbGUgKGogPCBzdGF0ZS50b2tlbnMubGVuZ3RoICYmIHN0YXRlLnRva2Vuc1tqXS50eXBlID09PSAnc19jbG9zZScpIHtcbiAgICAgIGorKztcbiAgICB9XG5cbiAgICBqLS07XG5cbiAgICBpZiAoaSAhPT0gaikge1xuICAgICAgdG9rZW4gPSBzdGF0ZS50b2tlbnNbal07XG4gICAgICBzdGF0ZS50b2tlbnNbal0gPSBzdGF0ZS50b2tlbnNbaV07XG4gICAgICBzdGF0ZS50b2tlbnNbaV0gPSB0b2tlbjtcbiAgICB9XG4gIH1cbn1cblxuXG4vLyBXYWxrIHRocm91Z2ggZGVsaW1pdGVyIGxpc3QgYW5kIHJlcGxhY2UgdGV4dCB0b2tlbnMgd2l0aCB0YWdzXG4vL1xubW9kdWxlLmV4cG9ydHMucG9zdFByb2Nlc3MgPSBmdW5jdGlvbiBzdHJpa2V0aHJvdWdoKHN0YXRlKSB7XG4gIHZhciBjdXJyLFxuICAgICAgdG9rZW5zX21ldGEgPSBzdGF0ZS50b2tlbnNfbWV0YSxcbiAgICAgIG1heCA9IHN0YXRlLnRva2Vuc19tZXRhLmxlbmd0aDtcblxuICBwb3N0UHJvY2VzcyhzdGF0ZSwgc3RhdGUuZGVsaW1pdGVycyk7XG5cbiAgZm9yIChjdXJyID0gMDsgY3VyciA8IG1heDsgY3VycisrKSB7XG4gICAgaWYgKHRva2Vuc19tZXRhW2N1cnJdICYmIHRva2Vuc19tZXRhW2N1cnJdLmRlbGltaXRlcnMpIHtcbiAgICAgIHBvc3RQcm9jZXNzKHN0YXRlLCB0b2tlbnNfbWV0YVtjdXJyXS5kZWxpbWl0ZXJzKTtcbiAgICB9XG4gIH1cbn07XG4iLCIvLyBQcm9jZXNzICp0aGlzKiBhbmQgX3RoYXRfXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbi8vIEluc2VydCBlYWNoIG1hcmtlciBhcyBhIHNlcGFyYXRlIHRleHQgdG9rZW4sIGFuZCBhZGQgaXQgdG8gZGVsaW1pdGVyIGxpc3Rcbi8vXG5tb2R1bGUuZXhwb3J0cy50b2tlbml6ZSA9IGZ1bmN0aW9uIGVtcGhhc2lzKHN0YXRlLCBzaWxlbnQpIHtcbiAgdmFyIGksIHNjYW5uZWQsIHRva2VuLFxuICAgICAgc3RhcnQgPSBzdGF0ZS5wb3MsXG4gICAgICBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChzdGFydCk7XG5cbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAobWFya2VyICE9PSAweDVGIC8qIF8gKi8gJiYgbWFya2VyICE9PSAweDJBIC8qICogKi8pIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgc2Nhbm5lZCA9IHN0YXRlLnNjYW5EZWxpbXMoc3RhdGUucG9zLCBtYXJrZXIgPT09IDB4MkEpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzY2FubmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgdG9rZW4uY29udGVudCA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyKTtcblxuICAgIHN0YXRlLmRlbGltaXRlcnMucHVzaCh7XG4gICAgICAvLyBDaGFyIGNvZGUgb2YgdGhlIHN0YXJ0aW5nIG1hcmtlciAobnVtYmVyKS5cbiAgICAgIC8vXG4gICAgICBtYXJrZXI6IG1hcmtlcixcblxuICAgICAgLy8gVG90YWwgbGVuZ3RoIG9mIHRoZXNlIHNlcmllcyBvZiBkZWxpbWl0ZXJzLlxuICAgICAgLy9cbiAgICAgIGxlbmd0aDogc2Nhbm5lZC5sZW5ndGgsXG5cbiAgICAgIC8vIEFuIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGJlZm9yZSB0aGlzIG9uZSB0aGF0J3MgZXF1aXZhbGVudCB0b1xuICAgICAgLy8gY3VycmVudCBvbmUuIEluIHBsYWluIEVuZ2xpc2g6IGlmIHRoaXMgZGVsaW1pdGVyIGRvZXMgbm90IG9wZW5cbiAgICAgIC8vIGFuIGVtcGhhc2lzLCBuZWl0aGVyIGRvIHByZXZpb3VzIGBqdW1wYCBjaGFyYWN0ZXJzLlxuICAgICAgLy9cbiAgICAgIC8vIFVzZWQgdG8gc2tpcCBzZXF1ZW5jZXMgbGlrZSBcIioqKioqXCIgaW4gb25lIHN0ZXAsIGZvciAxc3QgYXN0ZXJpc2tcbiAgICAgIC8vIHZhbHVlIHdpbGwgYmUgMCwgZm9yIDJuZCBpdCdzIDEgYW5kIHNvIG9uLlxuICAgICAgLy9cbiAgICAgIGp1bXA6ICAgaSxcblxuICAgICAgLy8gQSBwb3NpdGlvbiBvZiB0aGUgdG9rZW4gdGhpcyBkZWxpbWl0ZXIgY29ycmVzcG9uZHMgdG8uXG4gICAgICAvL1xuICAgICAgdG9rZW46ICBzdGF0ZS50b2tlbnMubGVuZ3RoIC0gMSxcblxuICAgICAgLy8gSWYgdGhpcyBkZWxpbWl0ZXIgaXMgbWF0Y2hlZCBhcyBhIHZhbGlkIG9wZW5lciwgYGVuZGAgd2lsbCBiZVxuICAgICAgLy8gZXF1YWwgdG8gaXRzIHBvc2l0aW9uLCBvdGhlcndpc2UgaXQncyBgLTFgLlxuICAgICAgLy9cbiAgICAgIGVuZDogICAgLTEsXG5cbiAgICAgIC8vIEJvb2xlYW4gZmxhZ3MgdGhhdCBkZXRlcm1pbmUgaWYgdGhpcyBkZWxpbWl0ZXIgY291bGQgb3BlbiBvciBjbG9zZVxuICAgICAgLy8gYW4gZW1waGFzaXMuXG4gICAgICAvL1xuICAgICAgb3BlbjogICBzY2FubmVkLmNhbl9vcGVuLFxuICAgICAgY2xvc2U6ICBzY2FubmVkLmNhbl9jbG9zZVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGUucG9zICs9IHNjYW5uZWQubGVuZ3RoO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG5mdW5jdGlvbiBwb3N0UHJvY2VzcyhzdGF0ZSwgZGVsaW1pdGVycykge1xuICB2YXIgaSxcbiAgICAgIHN0YXJ0RGVsaW0sXG4gICAgICBlbmREZWxpbSxcbiAgICAgIHRva2VuLFxuICAgICAgY2gsXG4gICAgICBpc1N0cm9uZyxcbiAgICAgIG1heCA9IGRlbGltaXRlcnMubGVuZ3RoO1xuXG4gIGZvciAoaSA9IG1heCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgc3RhcnREZWxpbSA9IGRlbGltaXRlcnNbaV07XG5cbiAgICBpZiAoc3RhcnREZWxpbS5tYXJrZXIgIT09IDB4NUYvKiBfICovICYmIHN0YXJ0RGVsaW0ubWFya2VyICE9PSAweDJBLyogKiAqLykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBvbmx5IG9wZW5pbmcgbWFya2Vyc1xuICAgIGlmIChzdGFydERlbGltLmVuZCA9PT0gLTEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGVuZERlbGltID0gZGVsaW1pdGVyc1tzdGFydERlbGltLmVuZF07XG5cbiAgICAvLyBJZiB0aGUgcHJldmlvdXMgZGVsaW1pdGVyIGhhcyB0aGUgc2FtZSBtYXJrZXIgYW5kIGlzIGFkamFjZW50IHRvIHRoaXMgb25lLFxuICAgIC8vIG1lcmdlIHRob3NlIGludG8gb25lIHN0cm9uZyBkZWxpbWl0ZXIuXG4gICAgLy9cbiAgICAvLyBgPGVtPjxlbT53aGF0ZXZlcjwvZW0+PC9lbT5gIC0+IGA8c3Ryb25nPndoYXRldmVyPC9zdHJvbmc+YFxuICAgIC8vXG4gICAgaXNTdHJvbmcgPSBpID4gMCAmJlxuICAgICAgICAgICAgICAgZGVsaW1pdGVyc1tpIC0gMV0uZW5kID09PSBzdGFydERlbGltLmVuZCArIDEgJiZcbiAgICAgICAgICAgICAgIGRlbGltaXRlcnNbaSAtIDFdLnRva2VuID09PSBzdGFydERlbGltLnRva2VuIC0gMSAmJlxuICAgICAgICAgICAgICAgZGVsaW1pdGVyc1tzdGFydERlbGltLmVuZCArIDFdLnRva2VuID09PSBlbmREZWxpbS50b2tlbiArIDEgJiZcbiAgICAgICAgICAgICAgIGRlbGltaXRlcnNbaSAtIDFdLm1hcmtlciA9PT0gc3RhcnREZWxpbS5tYXJrZXI7XG5cbiAgICBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoc3RhcnREZWxpbS5tYXJrZXIpO1xuXG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnRva2Vuc1tzdGFydERlbGltLnRva2VuXTtcbiAgICB0b2tlbi50eXBlICAgID0gaXNTdHJvbmcgPyAnc3Ryb25nX29wZW4nIDogJ2VtX29wZW4nO1xuICAgIHRva2VuLnRhZyAgICAgPSBpc1N0cm9uZyA/ICdzdHJvbmcnIDogJ2VtJztcbiAgICB0b2tlbi5uZXN0aW5nID0gMTtcbiAgICB0b2tlbi5tYXJrdXAgID0gaXNTdHJvbmcgPyBjaCArIGNoIDogY2g7XG4gICAgdG9rZW4uY29udGVudCA9ICcnO1xuXG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnRva2Vuc1tlbmREZWxpbS50b2tlbl07XG4gICAgdG9rZW4udHlwZSAgICA9IGlzU3Ryb25nID8gJ3N0cm9uZ19jbG9zZScgOiAnZW1fY2xvc2UnO1xuICAgIHRva2VuLnRhZyAgICAgPSBpc1N0cm9uZyA/ICdzdHJvbmcnIDogJ2VtJztcbiAgICB0b2tlbi5uZXN0aW5nID0gLTE7XG4gICAgdG9rZW4ubWFya3VwICA9IGlzU3Ryb25nID8gY2ggKyBjaCA6IGNoO1xuICAgIHRva2VuLmNvbnRlbnQgPSAnJztcblxuICAgIGlmIChpc1N0cm9uZykge1xuICAgICAgc3RhdGUudG9rZW5zW2RlbGltaXRlcnNbaSAtIDFdLnRva2VuXS5jb250ZW50ID0gJyc7XG4gICAgICBzdGF0ZS50b2tlbnNbZGVsaW1pdGVyc1tzdGFydERlbGltLmVuZCArIDFdLnRva2VuXS5jb250ZW50ID0gJyc7XG4gICAgICBpLS07XG4gICAgfVxuICB9XG59XG5cblxuLy8gV2FsayB0aHJvdWdoIGRlbGltaXRlciBsaXN0IGFuZCByZXBsYWNlIHRleHQgdG9rZW5zIHdpdGggdGFnc1xuLy9cbm1vZHVsZS5leHBvcnRzLnBvc3RQcm9jZXNzID0gZnVuY3Rpb24gZW1waGFzaXMoc3RhdGUpIHtcbiAgdmFyIGN1cnIsXG4gICAgICB0b2tlbnNfbWV0YSA9IHN0YXRlLnRva2Vuc19tZXRhLFxuICAgICAgbWF4ID0gc3RhdGUudG9rZW5zX21ldGEubGVuZ3RoO1xuXG4gIHBvc3RQcm9jZXNzKHN0YXRlLCBzdGF0ZS5kZWxpbWl0ZXJzKTtcblxuICBmb3IgKGN1cnIgPSAwOyBjdXJyIDwgbWF4OyBjdXJyKyspIHtcbiAgICBpZiAodG9rZW5zX21ldGFbY3Vycl0gJiYgdG9rZW5zX21ldGFbY3Vycl0uZGVsaW1pdGVycykge1xuICAgICAgcG9zdFByb2Nlc3Moc3RhdGUsIHRva2Vuc19tZXRhW2N1cnJdLmRlbGltaXRlcnMpO1xuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliLycpO1xuIiwiLy8gTWFpbiBwYXJzZXIgY2xhc3NcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB1dGlscyAgICAgICAgPSByZXF1aXJlKCcuL2NvbW1vbi91dGlscycpO1xudmFyIGhlbHBlcnMgICAgICA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xudmFyIFJlbmRlcmVyICAgICA9IHJlcXVpcmUoJy4vcmVuZGVyZXInKTtcbnZhciBQYXJzZXJDb3JlICAgPSByZXF1aXJlKCcuL3BhcnNlcl9jb3JlJyk7XG52YXIgUGFyc2VyQmxvY2sgID0gcmVxdWlyZSgnLi9wYXJzZXJfYmxvY2snKTtcbnZhciBQYXJzZXJJbmxpbmUgPSByZXF1aXJlKCcuL3BhcnNlcl9pbmxpbmUnKTtcbnZhciBMaW5raWZ5SXQgICAgPSByZXF1aXJlKCdsaW5raWZ5LWl0Jyk7XG52YXIgbWR1cmwgICAgICAgID0gcmVxdWlyZSgnbWR1cmwnKTtcbnZhciBwdW55Y29kZSAgICAgPSByZXF1aXJlKCdwdW55Y29kZScpO1xuXG5cbnZhciBjb25maWcgPSB7XG4gICdkZWZhdWx0JzogcmVxdWlyZSgnLi9wcmVzZXRzL2RlZmF1bHQnKSxcbiAgemVybzogcmVxdWlyZSgnLi9wcmVzZXRzL3plcm8nKSxcbiAgY29tbW9ubWFyazogcmVxdWlyZSgnLi9wcmVzZXRzL2NvbW1vbm1hcmsnKVxufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXG4vLyBUaGlzIHZhbGlkYXRvciBjYW4gcHJvaGliaXQgbW9yZSB0aGFuIHJlYWxseSBuZWVkZWQgdG8gcHJldmVudCBYU1MuIEl0J3MgYVxuLy8gdHJhZGVvZmYgdG8ga2VlcCBjb2RlIHNpbXBsZSBhbmQgdG8gYmUgc2VjdXJlIGJ5IGRlZmF1bHQuXG4vL1xuLy8gSWYgeW91IG5lZWQgZGlmZmVyZW50IHNldHVwIC0gb3ZlcnJpZGUgdmFsaWRhdG9yIG1ldGhvZCBhcyB5b3Ugd2lzaC4gT3Jcbi8vIHJlcGxhY2UgaXQgd2l0aCBkdW1teSBmdW5jdGlvbiBhbmQgdXNlIGV4dGVybmFsIHNhbml0aXplci5cbi8vXG5cbnZhciBCQURfUFJPVE9fUkUgPSAvXih2YnNjcmlwdHxqYXZhc2NyaXB0fGZpbGV8ZGF0YSk6LztcbnZhciBHT09EX0RBVEFfUkUgPSAvXmRhdGE6aW1hZ2VcXC8oZ2lmfHBuZ3xqcGVnfHdlYnApOy87XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTGluayh1cmwpIHtcbiAgLy8gdXJsIHNob3VsZCBiZSBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnQsIGFuZCBleGlzdGluZyBlbnRpdGllcyBhcmUgZGVjb2RlZFxuICB2YXIgc3RyID0gdXJsLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gIHJldHVybiBCQURfUFJPVE9fUkUudGVzdChzdHIpID8gKEdPT0RfREFUQV9SRS50ZXN0KHN0cikgPyB0cnVlIDogZmFsc2UpIDogdHJ1ZTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG52YXIgUkVDT0RFX0hPU1ROQU1FX0ZPUiA9IFsgJ2h0dHA6JywgJ2h0dHBzOicsICdtYWlsdG86JyBdO1xuXG5mdW5jdGlvbiBub3JtYWxpemVMaW5rKHVybCkge1xuICB2YXIgcGFyc2VkID0gbWR1cmwucGFyc2UodXJsLCB0cnVlKTtcblxuICBpZiAocGFyc2VkLmhvc3RuYW1lKSB7XG4gICAgLy8gRW5jb2RlIGhvc3RuYW1lcyBpbiB1cmxzIGxpa2U6XG4gICAgLy8gYGh0dHA6Ly9ob3N0L2AsIGBodHRwczovL2hvc3QvYCwgYG1haWx0bzp1c2VyQGhvc3RgLCBgLy9ob3N0L2BcbiAgICAvL1xuICAgIC8vIFdlIGRvbid0IGVuY29kZSB1bmtub3duIHNjaGVtYXMsIGJlY2F1c2UgaXQncyBsaWtlbHkgdGhhdCB3ZSBlbmNvZGVcbiAgICAvLyBzb21ldGhpbmcgd2Ugc2hvdWxkbid0IChlLmcuIGBza3lwZTpuYW1lYCB0cmVhdGVkIGFzIGBza3lwZTpob3N0YClcbiAgICAvL1xuICAgIGlmICghcGFyc2VkLnByb3RvY29sIHx8IFJFQ09ERV9IT1NUTkFNRV9GT1IuaW5kZXhPZihwYXJzZWQucHJvdG9jb2wpID49IDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZC5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkocGFyc2VkLmhvc3RuYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGVyKSB7IC8qKi8gfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZHVybC5lbmNvZGUobWR1cmwuZm9ybWF0KHBhcnNlZCkpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVMaW5rVGV4dCh1cmwpIHtcbiAgdmFyIHBhcnNlZCA9IG1kdXJsLnBhcnNlKHVybCwgdHJ1ZSk7XG5cbiAgaWYgKHBhcnNlZC5ob3N0bmFtZSkge1xuICAgIC8vIEVuY29kZSBob3N0bmFtZXMgaW4gdXJscyBsaWtlOlxuICAgIC8vIGBodHRwOi8vaG9zdC9gLCBgaHR0cHM6Ly9ob3N0L2AsIGBtYWlsdG86dXNlckBob3N0YCwgYC8vaG9zdC9gXG4gICAgLy9cbiAgICAvLyBXZSBkb24ndCBlbmNvZGUgdW5rbm93biBzY2hlbWFzLCBiZWNhdXNlIGl0J3MgbGlrZWx5IHRoYXQgd2UgZW5jb2RlXG4gICAgLy8gc29tZXRoaW5nIHdlIHNob3VsZG4ndCAoZS5nLiBgc2t5cGU6bmFtZWAgdHJlYXRlZCBhcyBgc2t5cGU6aG9zdGApXG4gICAgLy9cbiAgICBpZiAoIXBhcnNlZC5wcm90b2NvbCB8fCBSRUNPREVfSE9TVE5BTUVfRk9SLmluZGV4T2YocGFyc2VkLnByb3RvY29sKSA+PSAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICBwYXJzZWQuaG9zdG5hbWUgPSBwdW55Y29kZS50b1VuaWNvZGUocGFyc2VkLmhvc3RuYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGVyKSB7IC8qKi8gfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZHVybC5kZWNvZGUobWR1cmwuZm9ybWF0KHBhcnNlZCkpO1xufVxuXG5cbi8qKlxuICogY2xhc3MgTWFya2Rvd25JdFxuICpcbiAqIE1haW4gcGFyc2VyL3JlbmRlcmVyIGNsYXNzLlxuICpcbiAqICMjIyMjIFVzYWdlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogLy8gbm9kZS5qcywgXCJjbGFzc2ljXCIgd2F5OlxuICogdmFyIE1hcmtkb3duSXQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpLFxuICogICAgIG1kID0gbmV3IE1hcmtkb3duSXQoKTtcbiAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXIoJyMgbWFya2Rvd24taXQgcnVsZXp6IScpO1xuICpcbiAqIC8vIG5vZGUuanMsIHRoZSBzYW1lLCBidXQgd2l0aCBzdWdhcjpcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKTtcbiAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXIoJyMgbWFya2Rvd24taXQgcnVsZXp6IScpO1xuICpcbiAqIC8vIGJyb3dzZXIgd2l0aG91dCBBTUQsIGFkZGVkIHRvIFwid2luZG93XCIgb24gc2NyaXB0IGxvYWRcbiAqIC8vIE5vdGUsIHRoZXJlIGFyZSBubyBkYXNoLlxuICogdmFyIG1kID0gd2luZG93Lm1hcmtkb3duaXQoKTtcbiAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXIoJyMgbWFya2Rvd24taXQgcnVsZXp6IScpO1xuICogYGBgXG4gKlxuICogU2luZ2xlIGxpbmUgcmVuZGVyaW5nLCB3aXRob3V0IHBhcmFncmFwaCB3cmFwOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKTtcbiAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXJJbmxpbmUoJ19fbWFya2Rvd24taXRfXyBydWxlenohJyk7XG4gKiBgYGBcbiAqKi9cblxuLyoqXG4gKiBuZXcgTWFya2Rvd25JdChbcHJlc2V0TmFtZSwgb3B0aW9uc10pXG4gKiAtIHByZXNldE5hbWUgKFN0cmluZyk6IG9wdGlvbmFsLCBgY29tbW9ubWFya2AgLyBgemVyb2BcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KVxuICpcbiAqIENyZWF0ZXMgcGFyc2VyIGluc3RhbnNlIHdpdGggZ2l2ZW4gY29uZmlnLiBDYW4gYmUgY2FsbGVkIHdpdGhvdXQgYG5ld2AuXG4gKlxuICogIyMjIyMgcHJlc2V0TmFtZVxuICpcbiAqIE1hcmtkb3duSXQgcHJvdmlkZXMgbmFtZWQgcHJlc2V0cyBhcyBhIGNvbnZlbmllbmNlIHRvIHF1aWNrbHlcbiAqIGVuYWJsZS9kaXNhYmxlIGFjdGl2ZSBzeW50YXggcnVsZXMgYW5kIG9wdGlvbnMgZm9yIGNvbW1vbiB1c2UgY2FzZXMuXG4gKlxuICogLSBbXCJjb21tb25tYXJrXCJdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC9ibG9iL21hc3Rlci9saWIvcHJlc2V0cy9jb21tb25tYXJrLmpzKSAtXG4gKiAgIGNvbmZpZ3VyZXMgcGFyc2VyIHRvIHN0cmljdCBbQ29tbW9uTWFya10oaHR0cDovL2NvbW1vbm1hcmsub3JnLykgbW9kZS5cbiAqIC0gW2RlZmF1bHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC9ibG9iL21hc3Rlci9saWIvcHJlc2V0cy9kZWZhdWx0LmpzKSAtXG4gKiAgIHNpbWlsYXIgdG8gR0ZNLCB1c2VkIHdoZW4gbm8gcHJlc2V0IG5hbWUgZ2l2ZW4uIEVuYWJsZXMgYWxsIGF2YWlsYWJsZSBydWxlcyxcbiAqICAgYnV0IHN0aWxsIHdpdGhvdXQgaHRtbCwgdHlwb2dyYXBoZXIgJiBhdXRvbGlua2VyLlxuICogLSBbXCJ6ZXJvXCJdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC9ibG9iL21hc3Rlci9saWIvcHJlc2V0cy96ZXJvLmpzKSAtXG4gKiAgIGFsbCBydWxlcyBkaXNhYmxlZC4gVXNlZnVsIHRvIHF1aWNrbHkgc2V0dXAgeW91ciBjb25maWcgdmlhIGAuZW5hYmxlKClgLlxuICogICBGb3IgZXhhbXBsZSwgd2hlbiB5b3UgbmVlZCBvbmx5IGBib2xkYCBhbmQgYGl0YWxpY2AgbWFya3VwIGFuZCBub3RoaW5nIGVsc2UuXG4gKlxuICogIyMjIyMgb3B0aW9uczpcbiAqXG4gKiAtIF9faHRtbF9fIC0gYGZhbHNlYC4gU2V0IGB0cnVlYCB0byBlbmFibGUgSFRNTCB0YWdzIGluIHNvdXJjZS4gQmUgY2FyZWZ1bCFcbiAqICAgVGhhdCdzIG5vdCBzYWZlISBZb3UgbWF5IG5lZWQgZXh0ZXJuYWwgc2FuaXRpemVyIHRvIHByb3RlY3Qgb3V0cHV0IGZyb20gWFNTLlxuICogICBJdCdzIGJldHRlciB0byBleHRlbmQgZmVhdHVyZXMgdmlhIHBsdWdpbnMsIGluc3RlYWQgb2YgZW5hYmxpbmcgSFRNTC5cbiAqIC0gX194aHRtbE91dF9fIC0gYGZhbHNlYC4gU2V0IGB0cnVlYCB0byBhZGQgJy8nIHdoZW4gY2xvc2luZyBzaW5nbGUgdGFnc1xuICogICAoYDxiciAvPmApLiBUaGlzIGlzIG5lZWRlZCBvbmx5IGZvciBmdWxsIENvbW1vbk1hcmsgY29tcGF0aWJpbGl0eS4gSW4gcmVhbFxuICogICB3b3JsZCB5b3Ugd2lsbCBuZWVkIEhUTUwgb3V0cHV0LlxuICogLSBfX2JyZWFrc19fIC0gYGZhbHNlYC4gU2V0IGB0cnVlYCB0byBjb252ZXJ0IGBcXG5gIGluIHBhcmFncmFwaHMgaW50byBgPGJyPmAuXG4gKiAtIF9fbGFuZ1ByZWZpeF9fIC0gYGxhbmd1YWdlLWAuIENTUyBsYW5ndWFnZSBjbGFzcyBwcmVmaXggZm9yIGZlbmNlZCBibG9ja3MuXG4gKiAgIENhbiBiZSB1c2VmdWwgZm9yIGV4dGVybmFsIGhpZ2hsaWdodGVycy5cbiAqIC0gX19saW5raWZ5X18gLSBgZmFsc2VgLiBTZXQgYHRydWVgIHRvIGF1dG9jb252ZXJ0IFVSTC1saWtlIHRleHQgdG8gbGlua3MuXG4gKiAtIF9fdHlwb2dyYXBoZXJfXyAgLSBgZmFsc2VgLiBTZXQgYHRydWVgIHRvIGVuYWJsZSBbc29tZSBsYW5ndWFnZS1uZXV0cmFsXG4gKiAgIHJlcGxhY2VtZW50XShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL3J1bGVzX2NvcmUvcmVwbGFjZW1lbnRzLmpzKSArXG4gKiAgIHF1b3RlcyBiZWF1dGlmaWNhdGlvbiAoc21hcnRxdW90ZXMpLlxuICogLSBfX3F1b3Rlc19fIC0gYOKAnOKAneKAmOKAmWAsIFN0cmluZyBvciBBcnJheS4gRG91YmxlICsgc2luZ2xlIHF1b3RlcyByZXBsYWNlbWVudFxuICogICBwYWlycywgd2hlbiB0eXBvZ3JhcGhlciBlbmFibGVkIGFuZCBzbWFydHF1b3RlcyBvbi4gRm9yIGV4YW1wbGUsIHlvdSBjYW5cbiAqICAgdXNlIGAnwqvCu+KAnuKAnCdgIGZvciBSdXNzaWFuLCBgJ+KAnuKAnOKAmuKAmCdgIGZvciBHZXJtYW4sIGFuZFxuICogICBgWyfCq1xceEEwJywgJ1xceEEwwrsnLCAn4oC5XFx4QTAnLCAnXFx4QTDigLonXWAgZm9yIEZyZW5jaCAoaW5jbHVkaW5nIG5ic3ApLlxuICogLSBfX2hpZ2hsaWdodF9fIC0gYG51bGxgLiBIaWdobGlnaHRlciBmdW5jdGlvbiBmb3IgZmVuY2VkIGNvZGUgYmxvY2tzLlxuICogICBIaWdobGlnaHRlciBgZnVuY3Rpb24gKHN0ciwgbGFuZylgIHNob3VsZCByZXR1cm4gZXNjYXBlZCBIVE1MLiBJdCBjYW4gYWxzb1xuICogICByZXR1cm4gZW1wdHkgc3RyaW5nIGlmIHRoZSBzb3VyY2Ugd2FzIG5vdCBjaGFuZ2VkIGFuZCBzaG91bGQgYmUgZXNjYXBlZFxuICogICBleHRlcm5hbHkuIElmIHJlc3VsdCBzdGFydHMgd2l0aCA8cHJlLi4uIGludGVybmFsIHdyYXBwZXIgaXMgc2tpcHBlZC5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogLy8gY29tbW9ubWFyayBtb2RlXG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKCdjb21tb25tYXJrJyk7XG4gKlxuICogLy8gZGVmYXVsdCBtb2RlXG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKCk7XG4gKlxuICogLy8gZW5hYmxlIGV2ZXJ5dGhpbmdcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0Jykoe1xuICogICBodG1sOiB0cnVlLFxuICogICBsaW5raWZ5OiB0cnVlLFxuICogICB0eXBvZ3JhcGhlcjogdHJ1ZVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiAjIyMjIyBTeW50YXggaGlnaGxpZ2h0aW5nXG4gKlxuICogYGBganNcbiAqIHZhciBobGpzID0gcmVxdWlyZSgnaGlnaGxpZ2h0LmpzJykgLy8gaHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcvXG4gKlxuICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSh7XG4gKiAgIGhpZ2hsaWdodDogZnVuY3Rpb24gKHN0ciwgbGFuZykge1xuICogICAgIGlmIChsYW5nICYmIGhsanMuZ2V0TGFuZ3VhZ2UobGFuZykpIHtcbiAqICAgICAgIHRyeSB7XG4gKiAgICAgICAgIHJldHVybiBobGpzLmhpZ2hsaWdodChsYW5nLCBzdHIsIHRydWUpLnZhbHVlO1xuICogICAgICAgfSBjYXRjaCAoX18pIHt9XG4gKiAgICAgfVxuICpcbiAqICAgICByZXR1cm4gJyc7IC8vIHVzZSBleHRlcm5hbCBkZWZhdWx0IGVzY2FwaW5nXG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogT3Igd2l0aCBmdWxsIHdyYXBwZXIgb3ZlcnJpZGUgKGlmIHlvdSBuZWVkIGFzc2lnbiBjbGFzcyB0byBgPHByZT5gKTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgaGxqcyA9IHJlcXVpcmUoJ2hpZ2hsaWdodC5qcycpIC8vIGh0dHBzOi8vaGlnaGxpZ2h0anMub3JnL1xuICpcbiAqIC8vIEFjdHVhbCBkZWZhdWx0IHZhbHVlc1xuICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSh7XG4gKiAgIGhpZ2hsaWdodDogZnVuY3Rpb24gKHN0ciwgbGFuZykge1xuICogICAgIGlmIChsYW5nICYmIGhsanMuZ2V0TGFuZ3VhZ2UobGFuZykpIHtcbiAqICAgICAgIHRyeSB7XG4gKiAgICAgICAgIHJldHVybiAnPHByZSBjbGFzcz1cImhsanNcIj48Y29kZT4nICtcbiAqICAgICAgICAgICAgICAgIGhsanMuaGlnaGxpZ2h0KGxhbmcsIHN0ciwgdHJ1ZSkudmFsdWUgK1xuICogICAgICAgICAgICAgICAgJzwvY29kZT48L3ByZT4nO1xuICogICAgICAgfSBjYXRjaCAoX18pIHt9XG4gKiAgICAgfVxuICpcbiAqICAgICByZXR1cm4gJzxwcmUgY2xhc3M9XCJobGpzXCI+PGNvZGU+JyArIG1kLnV0aWxzLmVzY2FwZUh0bWwoc3RyKSArICc8L2NvZGU+PC9wcmU+JztcbiAqICAgfVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiovXG5mdW5jdGlvbiBNYXJrZG93bkl0KHByZXNldE5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hcmtkb3duSXQpKSB7XG4gICAgcmV0dXJuIG5ldyBNYXJrZG93bkl0KHByZXNldE5hbWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgaWYgKCF1dGlscy5pc1N0cmluZyhwcmVzZXROYW1lKSkge1xuICAgICAgb3B0aW9ucyA9IHByZXNldE5hbWUgfHwge307XG4gICAgICBwcmVzZXROYW1lID0gJ2RlZmF1bHQnO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrZG93bkl0I2lubGluZSAtPiBQYXJzZXJJbmxpbmVcbiAgICpcbiAgICogSW5zdGFuY2Ugb2YgW1tQYXJzZXJJbmxpbmVdXS4gWW91IG1heSBuZWVkIGl0IHRvIGFkZCBuZXcgcnVsZXMgd2hlblxuICAgKiB3cml0aW5nIHBsdWdpbnMuIEZvciBzaW1wbGUgcnVsZXMgY29udHJvbCB1c2UgW1tNYXJrZG93bkl0LmRpc2FibGVdXSBhbmRcbiAgICogW1tNYXJrZG93bkl0LmVuYWJsZV1dLlxuICAgKiovXG4gIHRoaXMuaW5saW5lID0gbmV3IFBhcnNlcklubGluZSgpO1xuXG4gIC8qKlxuICAgKiBNYXJrZG93bkl0I2Jsb2NrIC0+IFBhcnNlckJsb2NrXG4gICAqXG4gICAqIEluc3RhbmNlIG9mIFtbUGFyc2VyQmxvY2tdXS4gWW91IG1heSBuZWVkIGl0IHRvIGFkZCBuZXcgcnVsZXMgd2hlblxuICAgKiB3cml0aW5nIHBsdWdpbnMuIEZvciBzaW1wbGUgcnVsZXMgY29udHJvbCB1c2UgW1tNYXJrZG93bkl0LmRpc2FibGVdXSBhbmRcbiAgICogW1tNYXJrZG93bkl0LmVuYWJsZV1dLlxuICAgKiovXG4gIHRoaXMuYmxvY2sgPSBuZXcgUGFyc2VyQmxvY2soKTtcblxuICAvKipcbiAgICogTWFya2Rvd25JdCNjb3JlIC0+IENvcmVcbiAgICpcbiAgICogSW5zdGFuY2Ugb2YgW1tDb3JlXV0gY2hhaW4gZXhlY3V0b3IuIFlvdSBtYXkgbmVlZCBpdCB0byBhZGQgbmV3IHJ1bGVzIHdoZW5cbiAgICogd3JpdGluZyBwbHVnaW5zLiBGb3Igc2ltcGxlIHJ1bGVzIGNvbnRyb2wgdXNlIFtbTWFya2Rvd25JdC5kaXNhYmxlXV0gYW5kXG4gICAqIFtbTWFya2Rvd25JdC5lbmFibGVdXS5cbiAgICoqL1xuICB0aGlzLmNvcmUgPSBuZXcgUGFyc2VyQ29yZSgpO1xuXG4gIC8qKlxuICAgKiBNYXJrZG93bkl0I3JlbmRlcmVyIC0+IFJlbmRlcmVyXG4gICAqXG4gICAqIEluc3RhbmNlIG9mIFtbUmVuZGVyZXJdXS4gVXNlIGl0IHRvIG1vZGlmeSBvdXRwdXQgbG9vay4gT3IgdG8gYWRkIHJlbmRlcmluZ1xuICAgKiBydWxlcyBmb3IgbmV3IHRva2VuIHR5cGVzLCBnZW5lcmF0ZWQgYnkgcGx1Z2lucy5cbiAgICpcbiAgICogIyMjIyMgRXhhbXBsZVxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKTtcbiAgICpcbiAgICogZnVuY3Rpb24gbXlUb2tlbih0b2tlbnMsIGlkeCwgb3B0aW9ucywgZW52LCBzZWxmKSB7XG4gICAqICAgLy8uLi5cbiAgICogICByZXR1cm4gcmVzdWx0O1xuICAgKiB9O1xuICAgKlxuICAgKiBtZC5yZW5kZXJlci5ydWxlc1snbXlfdG9rZW4nXSA9IG15VG9rZW5cbiAgICogYGBgXG4gICAqXG4gICAqIFNlZSBbW1JlbmRlcmVyXV0gZG9jcyBhbmQgW3NvdXJjZSBjb2RlXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL3JlbmRlcmVyLmpzKS5cbiAgICoqL1xuICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG5cbiAgLyoqXG4gICAqIE1hcmtkb3duSXQjbGlua2lmeSAtPiBMaW5raWZ5SXRcbiAgICpcbiAgICogW2xpbmtpZnktaXRdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9saW5raWZ5LWl0KSBpbnN0YW5jZS5cbiAgICogVXNlZCBieSBbbGlua2lmeV0oaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0L2Jsb2IvbWFzdGVyL2xpYi9ydWxlc19jb3JlL2xpbmtpZnkuanMpXG4gICAqIHJ1bGUuXG4gICAqKi9cbiAgdGhpcy5saW5raWZ5ID0gbmV3IExpbmtpZnlJdCgpO1xuXG4gIC8qKlxuICAgKiBNYXJrZG93bkl0I3ZhbGlkYXRlTGluayh1cmwpIC0+IEJvb2xlYW5cbiAgICpcbiAgICogTGluayB2YWxpZGF0aW9uIGZ1bmN0aW9uLiBDb21tb25NYXJrIGFsbG93cyB0b28gbXVjaCBpbiBsaW5rcy4gQnkgZGVmYXVsdFxuICAgKiB3ZSBkaXNhYmxlIGBqYXZhc2NyaXB0OmAsIGB2YnNjcmlwdDpgLCBgZmlsZTpgIHNjaGVtYXMsIGFuZCBhbG1vc3QgYWxsIGBkYXRhOi4uLmAgc2NoZW1hc1xuICAgKiBleGNlcHQgc29tZSBlbWJlZGRlZCBpbWFnZSB0eXBlcy5cbiAgICpcbiAgICogWW91IGNhbiBjaGFuZ2UgdGhpcyBiZWhhdmlvdXI6XG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgpO1xuICAgKiAvLyBlbmFibGUgZXZlcnl0aGluZ1xuICAgKiBtZC52YWxpZGF0ZUxpbmsgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9XG4gICAqIGBgYFxuICAgKiovXG4gIHRoaXMudmFsaWRhdGVMaW5rID0gdmFsaWRhdGVMaW5rO1xuXG4gIC8qKlxuICAgKiBNYXJrZG93bkl0I25vcm1hbGl6ZUxpbmsodXJsKSAtPiBTdHJpbmdcbiAgICpcbiAgICogRnVuY3Rpb24gdXNlZCB0byBlbmNvZGUgbGluayB1cmwgdG8gYSBtYWNoaW5lLXJlYWRhYmxlIGZvcm1hdCxcbiAgICogd2hpY2ggaW5jbHVkZXMgdXJsLWVuY29kaW5nLCBwdW55Y29kZSwgZXRjLlxuICAgKiovXG4gIHRoaXMubm9ybWFsaXplTGluayA9IG5vcm1hbGl6ZUxpbms7XG5cbiAgLyoqXG4gICAqIE1hcmtkb3duSXQjbm9ybWFsaXplTGlua1RleHQodXJsKSAtPiBTdHJpbmdcbiAgICpcbiAgICogRnVuY3Rpb24gdXNlZCB0byBkZWNvZGUgbGluayB1cmwgdG8gYSBodW1hbi1yZWFkYWJsZSBmb3JtYXRgXG4gICAqKi9cbiAgdGhpcy5ub3JtYWxpemVMaW5rVGV4dCA9IG5vcm1hbGl6ZUxpbmtUZXh0O1xuXG5cbiAgLy8gRXhwb3NlIHV0aWxzICYgaGVscGVycyBmb3IgZWFzeSBhY2NlcyBmcm9tIHBsdWdpbnNcblxuICAvKipcbiAgICogTWFya2Rvd25JdCN1dGlscyAtPiB1dGlsc1xuICAgKlxuICAgKiBBc3NvcnRlZCB1dGlsaXR5IGZ1bmN0aW9ucywgdXNlZnVsIHRvIHdyaXRlIHBsdWdpbnMuIFNlZSBkZXRhaWxzXG4gICAqIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL2NvbW1vbi91dGlscy5qcykuXG4gICAqKi9cbiAgdGhpcy51dGlscyA9IHV0aWxzO1xuXG4gIC8qKlxuICAgKiBNYXJrZG93bkl0I2hlbHBlcnMgLT4gaGVscGVyc1xuICAgKlxuICAgKiBMaW5rIGNvbXBvbmVudHMgcGFyc2VyIGZ1bmN0aW9ucywgdXNlZnVsIHRvIHdyaXRlIHBsdWdpbnMuIFNlZSBkZXRhaWxzXG4gICAqIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL2hlbHBlcnMpLlxuICAgKiovXG4gIHRoaXMuaGVscGVycyA9IHV0aWxzLmFzc2lnbih7fSwgaGVscGVycyk7XG5cblxuICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgdGhpcy5jb25maWd1cmUocHJlc2V0TmFtZSk7XG5cbiAgaWYgKG9wdGlvbnMpIHsgdGhpcy5zZXQob3B0aW9ucyk7IH1cbn1cblxuXG4vKiogY2hhaW5hYmxlXG4gKiBNYXJrZG93bkl0LnNldChvcHRpb25zKVxuICpcbiAqIFNldCBwYXJzZXIgb3B0aW9ucyAoaW4gdGhlIHNhbWUgZm9ybWF0IGFzIGluIGNvbnN0cnVjdG9yKS4gUHJvYmFibHksIHlvdVxuICogd2lsbCBuZXZlciBuZWVkIGl0LCBidXQgeW91IGNhbiBjaGFuZ2Ugb3B0aW9ucyBhZnRlciBjb25zdHJ1Y3RvciBjYWxsLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKClcbiAqICAgICAgICAgICAgIC5zZXQoeyBodG1sOiB0cnVlLCBicmVha3M6IHRydWUgfSlcbiAqICAgICAgICAgICAgIC5zZXQoeyB0eXBvZ3JhcGhlciwgdHJ1ZSB9KTtcbiAqIGBgYFxuICpcbiAqIF9fTm90ZTpfXyBUbyBhY2hpZXZlIHRoZSBiZXN0IHBvc3NpYmxlIHBlcmZvcm1hbmNlLCBkb24ndCBtb2RpZnkgYVxuICogYG1hcmtkb3duLWl0YCBpbnN0YW5jZSBvcHRpb25zIG9uIHRoZSBmbHkuIElmIHlvdSBuZWVkIG11bHRpcGxlIGNvbmZpZ3VyYXRpb25zXG4gKiBpdCdzIGJlc3QgdG8gY3JlYXRlIG11bHRpcGxlIGluc3RhbmNlcyBhbmQgaW5pdGlhbGl6ZSBlYWNoIHdpdGggc2VwYXJhdGVcbiAqIGNvbmZpZy5cbiAqKi9cbk1hcmtkb3duSXQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHV0aWxzLmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqIGNoYWluYWJsZSwgaW50ZXJuYWxcbiAqIE1hcmtkb3duSXQuY29uZmlndXJlKHByZXNldHMpXG4gKlxuICogQmF0Y2ggbG9hZCBvZiBhbGwgb3B0aW9ucyBhbmQgY29tcGVuZW50IHNldHRpbmdzLiBUaGlzIGlzIGludGVybmFsIG1ldGhvZCxcbiAqIGFuZCB5b3UgcHJvYmFibHkgd2lsbCBub3QgbmVlZCBpdC4gQnV0IGlmIHlvdSB3aXRoIC0gc2VlIGF2YWlsYWJsZSBwcmVzZXRzXG4gKiBhbmQgZGF0YSBzdHJ1Y3R1cmUgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC90cmVlL21hc3Rlci9saWIvcHJlc2V0cylcbiAqXG4gKiBXZSBzdHJvbmdseSByZWNvbW1lbmQgdG8gdXNlIHByZXNldHMgaW5zdGVhZCBvZiBkaXJlY3QgY29uZmlnIGxvYWRzLiBUaGF0XG4gKiB3aWxsIGdpdmUgYmV0dGVyIGNvbXBhdGliaWxpdHkgd2l0aCBuZXh0IHZlcnNpb25zLlxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUuY29uZmlndXJlID0gZnVuY3Rpb24gKHByZXNldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLCBwcmVzZXROYW1lO1xuXG4gIGlmICh1dGlscy5pc1N0cmluZyhwcmVzZXRzKSkge1xuICAgIHByZXNldE5hbWUgPSBwcmVzZXRzO1xuICAgIHByZXNldHMgPSBjb25maWdbcHJlc2V0TmFtZV07XG4gICAgaWYgKCFwcmVzZXRzKSB7IHRocm93IG5ldyBFcnJvcignV3JvbmcgYG1hcmtkb3duLWl0YCBwcmVzZXQgXCInICsgcHJlc2V0TmFtZSArICdcIiwgY2hlY2sgbmFtZScpOyB9XG4gIH1cblxuICBpZiAoIXByZXNldHMpIHsgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBgbWFya2Rvd24taXRgIHByZXNldCwgY2FuXFwndCBiZSBlbXB0eScpOyB9XG5cbiAgaWYgKHByZXNldHMub3B0aW9ucykgeyBzZWxmLnNldChwcmVzZXRzLm9wdGlvbnMpOyB9XG5cbiAgaWYgKHByZXNldHMuY29tcG9uZW50cykge1xuICAgIE9iamVjdC5rZXlzKHByZXNldHMuY29tcG9uZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKHByZXNldHMuY29tcG9uZW50c1tuYW1lXS5ydWxlcykge1xuICAgICAgICBzZWxmW25hbWVdLnJ1bGVyLmVuYWJsZU9ubHkocHJlc2V0cy5jb21wb25lbnRzW25hbWVdLnJ1bGVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmVzZXRzLmNvbXBvbmVudHNbbmFtZV0ucnVsZXMyKSB7XG4gICAgICAgIHNlbGZbbmFtZV0ucnVsZXIyLmVuYWJsZU9ubHkocHJlc2V0cy5jb21wb25lbnRzW25hbWVdLnJ1bGVzMik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKiBjaGFpbmFibGVcbiAqIE1hcmtkb3duSXQuZW5hYmxlKGxpc3QsIGlnbm9yZUludmFsaWQpXG4gKiAtIGxpc3QgKFN0cmluZ3xBcnJheSk6IHJ1bGUgbmFtZSBvciBsaXN0IG9mIHJ1bGUgbmFtZXMgdG8gZW5hYmxlXG4gKiAtIGlnbm9yZUludmFsaWQgKEJvb2xlYW4pOiBzZXQgYHRydWVgIHRvIGlnbm9yZSBlcnJvcnMgd2hlbiBydWxlIG5vdCBmb3VuZC5cbiAqXG4gKiBFbmFibGUgbGlzdCBvciBydWxlcy4gSXQgd2lsbCBhdXRvbWF0aWNhbGx5IGZpbmQgYXBwcm9wcmlhdGUgY29tcG9uZW50cyxcbiAqIGNvbnRhaW5pbmcgcnVsZXMgd2l0aCBnaXZlbiBuYW1lcy4gSWYgcnVsZSBub3QgZm91bmQsIGFuZCBgaWdub3JlSW52YWxpZGBcbiAqIG5vdCBzZXQgLSB0aHJvd3MgZXhjZXB0aW9uLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKClcbiAqICAgICAgICAgICAgIC5lbmFibGUoWydzdWInLCAnc3VwJ10pXG4gKiAgICAgICAgICAgICAuZGlzYWJsZSgnc21hcnRxdW90ZXMnKTtcbiAqIGBgYFxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKGxpc3QsIGlnbm9yZUludmFsaWQpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgeyBsaXN0ID0gWyBsaXN0IF07IH1cblxuICBbICdjb3JlJywgJ2Jsb2NrJywgJ2lubGluZScgXS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFpbikge1xuICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpc1tjaGFpbl0ucnVsZXIuZW5hYmxlKGxpc3QsIHRydWUpKTtcbiAgfSwgdGhpcyk7XG5cbiAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCh0aGlzLmlubGluZS5ydWxlcjIuZW5hYmxlKGxpc3QsIHRydWUpKTtcblxuICB2YXIgbWlzc2VkID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIHJlc3VsdC5pbmRleE9mKG5hbWUpIDwgMDsgfSk7XG5cbiAgaWYgKG1pc3NlZC5sZW5ndGggJiYgIWlnbm9yZUludmFsaWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcmtkb3duSXQuIEZhaWxlZCB0byBlbmFibGUgdW5rbm93biBydWxlKHMpOiAnICsgbWlzc2VkKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKiogY2hhaW5hYmxlXG4gKiBNYXJrZG93bkl0LmRpc2FibGUobGlzdCwgaWdub3JlSW52YWxpZClcbiAqIC0gbGlzdCAoU3RyaW5nfEFycmF5KTogcnVsZSBuYW1lIG9yIGxpc3Qgb2YgcnVsZSBuYW1lcyB0byBkaXNhYmxlLlxuICogLSBpZ25vcmVJbnZhbGlkIChCb29sZWFuKTogc2V0IGB0cnVlYCB0byBpZ25vcmUgZXJyb3JzIHdoZW4gcnVsZSBub3QgZm91bmQuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tNYXJrZG93bkl0LmVuYWJsZV1dLCBidXQgdHVybiBzcGVjaWZpZWQgcnVsZXMgb2ZmLlxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIChsaXN0LCBpZ25vcmVJbnZhbGlkKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHsgbGlzdCA9IFsgbGlzdCBdOyB9XG5cbiAgWyAnY29yZScsICdibG9jaycsICdpbmxpbmUnIF0uZm9yRWFjaChmdW5jdGlvbiAoY2hhaW4pIHtcbiAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHRoaXNbY2hhaW5dLnJ1bGVyLmRpc2FibGUobGlzdCwgdHJ1ZSkpO1xuICB9LCB0aGlzKTtcblxuICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHRoaXMuaW5saW5lLnJ1bGVyMi5kaXNhYmxlKGxpc3QsIHRydWUpKTtcblxuICB2YXIgbWlzc2VkID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIHJlc3VsdC5pbmRleE9mKG5hbWUpIDwgMDsgfSk7XG5cbiAgaWYgKG1pc3NlZC5sZW5ndGggJiYgIWlnbm9yZUludmFsaWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcmtkb3duSXQuIEZhaWxlZCB0byBkaXNhYmxlIHVua25vd24gcnVsZShzKTogJyArIG1pc3NlZCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKiBjaGFpbmFibGVcbiAqIE1hcmtkb3duSXQudXNlKHBsdWdpbiwgcGFyYW1zKVxuICpcbiAqIExvYWQgc3BlY2lmaWVkIHBsdWdpbiB3aXRoIGdpdmVuIHBhcmFtcyBpbnRvIGN1cnJlbnQgcGFyc2VyIGluc3RhbmNlLlxuICogSXQncyBqdXN0IGEgc3VnYXIgdG8gY2FsbCBgcGx1Z2luKG1kLCBwYXJhbXMpYCB3aXRoIGN1cnJpbmcuXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBpdGVyYXRvciA9IHJlcXVpcmUoJ21hcmtkb3duLWl0LWZvci1pbmxpbmUnKTtcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKVxuICogICAgICAgICAgICAgLnVzZShpdGVyYXRvciwgJ2Zvb19yZXBsYWNlJywgJ3RleHQnLCBmdW5jdGlvbiAodG9rZW5zLCBpZHgpIHtcbiAqICAgICAgICAgICAgICAgdG9rZW5zW2lkeF0uY29udGVudCA9IHRva2Vuc1tpZHhdLmNvbnRlbnQucmVwbGFjZSgvZm9vL2csICdiYXInKTtcbiAqICAgICAgICAgICAgIH0pO1xuICogYGBgXG4gKiovXG5NYXJrZG93bkl0LnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luIC8qLCBwYXJhbXMsIC4uLiAqLykge1xuICB2YXIgYXJncyA9IFsgdGhpcyBdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgcGx1Z2luLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKiogaW50ZXJuYWxcbiAqIE1hcmtkb3duSXQucGFyc2Uoc3JjLCBlbnYpIC0+IEFycmF5XG4gKiAtIHNyYyAoU3RyaW5nKTogc291cmNlIHN0cmluZ1xuICogLSBlbnYgKE9iamVjdCk6IGVudmlyb25tZW50IHNhbmRib3hcbiAqXG4gKiBQYXJzZSBpbnB1dCBzdHJpbmcgYW5kIHJldHVybnMgbGlzdCBvZiBibG9jayB0b2tlbnMgKHNwZWNpYWwgdG9rZW4gdHlwZVxuICogXCJpbmxpbmVcIiB3aWxsIGNvbnRhaW4gbGlzdCBvZiBpbmxpbmUgdG9rZW5zKS4gWW91IHNob3VsZCBub3QgY2FsbCB0aGlzXG4gKiBtZXRob2QgZGlyZWN0bHksIHVudGlsIHlvdSB3cml0ZSBjdXN0b20gcmVuZGVyZXIgKGZvciBleGFtcGxlLCB0byBwcm9kdWNlXG4gKiBBU1QpLlxuICpcbiAqIGBlbnZgIGlzIHVzZWQgdG8gcGFzcyBkYXRhIGJldHdlZW4gXCJkaXN0cmlidXRlZFwiIHJ1bGVzIGFuZCByZXR1cm4gYWRkaXRpb25hbFxuICogbWV0YWRhdGEgbGlrZSByZWZlcmVuY2UgaW5mbywgbmVlZGVkIGZvciB0aGUgcmVuZGVyZXIuIEl0IGFsc28gY2FuIGJlIHVzZWQgdG9cbiAqIGluamVjdCBkYXRhIGluIHNwZWNpZmljIGNhc2VzLiBVc3VhbGx5LCB5b3Ugd2lsbCBiZSBvayB0byBwYXNzIGB7fWAsXG4gKiBhbmQgdGhlbiBwYXNzIHVwZGF0ZWQgb2JqZWN0IHRvIHJlbmRlcmVyLlxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoc3JjLCBlbnYpIHtcbiAgaWYgKHR5cGVvZiBzcmMgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBkYXRhIHNob3VsZCBiZSBhIFN0cmluZycpO1xuICB9XG5cbiAgdmFyIHN0YXRlID0gbmV3IHRoaXMuY29yZS5TdGF0ZShzcmMsIHRoaXMsIGVudik7XG5cbiAgdGhpcy5jb3JlLnByb2Nlc3Moc3RhdGUpO1xuXG4gIHJldHVybiBzdGF0ZS50b2tlbnM7XG59O1xuXG5cbi8qKlxuICogTWFya2Rvd25JdC5yZW5kZXIoc3JjIFssIGVudl0pIC0+IFN0cmluZ1xuICogLSBzcmMgKFN0cmluZyk6IHNvdXJjZSBzdHJpbmdcbiAqIC0gZW52IChPYmplY3QpOiBlbnZpcm9ubWVudCBzYW5kYm94XG4gKlxuICogUmVuZGVyIG1hcmtkb3duIHN0cmluZyBpbnRvIGh0bWwuIEl0IGRvZXMgYWxsIG1hZ2ljIGZvciB5b3UgOikuXG4gKlxuICogYGVudmAgY2FuIGJlIHVzZWQgdG8gaW5qZWN0IGFkZGl0aW9uYWwgbWV0YWRhdGEgKGB7fWAgYnkgZGVmYXVsdCkuXG4gKiBCdXQgeW91IHdpbGwgbm90IG5lZWQgaXQgd2l0aCBoaWdoIHByb2JhYmlsaXR5LiBTZWUgYWxzbyBjb21tZW50XG4gKiBpbiBbW01hcmtkb3duSXQucGFyc2VdXS5cbiAqKi9cbk1hcmtkb3duSXQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChzcmMsIGVudikge1xuICBlbnYgPSBlbnYgfHwge307XG5cbiAgcmV0dXJuIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMucGFyc2Uoc3JjLCBlbnYpLCB0aGlzLm9wdGlvbnMsIGVudik7XG59O1xuXG5cbi8qKiBpbnRlcm5hbFxuICogTWFya2Rvd25JdC5wYXJzZUlubGluZShzcmMsIGVudikgLT4gQXJyYXlcbiAqIC0gc3JjIChTdHJpbmcpOiBzb3VyY2Ugc3RyaW5nXG4gKiAtIGVudiAoT2JqZWN0KTogZW52aXJvbm1lbnQgc2FuZGJveFxuICpcbiAqIFRoZSBzYW1lIGFzIFtbTWFya2Rvd25JdC5wYXJzZV1dIGJ1dCBza2lwIGFsbCBibG9jayBydWxlcy4gSXQgcmV0dXJucyB0aGVcbiAqIGJsb2NrIHRva2VucyBsaXN0IHdpdGggdGhlIHNpbmdsZSBgaW5saW5lYCBlbGVtZW50LCBjb250YWluaW5nIHBhcnNlZCBpbmxpbmVcbiAqIHRva2VucyBpbiBgY2hpbGRyZW5gIHByb3BlcnR5LiBBbHNvIHVwZGF0ZXMgYGVudmAgb2JqZWN0LlxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUucGFyc2VJbmxpbmUgPSBmdW5jdGlvbiAoc3JjLCBlbnYpIHtcbiAgdmFyIHN0YXRlID0gbmV3IHRoaXMuY29yZS5TdGF0ZShzcmMsIHRoaXMsIGVudik7XG5cbiAgc3RhdGUuaW5saW5lTW9kZSA9IHRydWU7XG4gIHRoaXMuY29yZS5wcm9jZXNzKHN0YXRlKTtcblxuICByZXR1cm4gc3RhdGUudG9rZW5zO1xufTtcblxuXG4vKipcbiAqIE1hcmtkb3duSXQucmVuZGVySW5saW5lKHNyYyBbLCBlbnZdKSAtPiBTdHJpbmdcbiAqIC0gc3JjIChTdHJpbmcpOiBzb3VyY2Ugc3RyaW5nXG4gKiAtIGVudiAoT2JqZWN0KTogZW52aXJvbm1lbnQgc2FuZGJveFxuICpcbiAqIFNpbWlsYXIgdG8gW1tNYXJrZG93bkl0LnJlbmRlcl1dIGJ1dCBmb3Igc2luZ2xlIHBhcmFncmFwaCBjb250ZW50LiBSZXN1bHRcbiAqIHdpbGwgTk9UIGJlIHdyYXBwZWQgaW50byBgPHA+YCB0YWdzLlxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUucmVuZGVySW5saW5lID0gZnVuY3Rpb24gKHNyYywgZW52KSB7XG4gIGVudiA9IGVudiB8fCB7fTtcblxuICByZXR1cm4gdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5wYXJzZUlubGluZShzcmMsIGVudiksIHRoaXMub3B0aW9ucywgZW52KTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNYXJrZG93bkl0O1xuIiwiXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIGVuY29kZUNhY2hlID0ge307XG5cblxuLy8gQ3JlYXRlIGEgbG9va3VwIGFycmF5IHdoZXJlIGFueXRoaW5nIGJ1dCBjaGFyYWN0ZXJzIGluIGBjaGFyc2Agc3RyaW5nXG4vLyBhbmQgYWxwaGFudW1lcmljIGNoYXJzIGlzIHBlcmNlbnQtZW5jb2RlZC5cbi8vXG5mdW5jdGlvbiBnZXRFbmNvZGVDYWNoZShleGNsdWRlKSB7XG4gIHZhciBpLCBjaCwgY2FjaGUgPSBlbmNvZGVDYWNoZVtleGNsdWRlXTtcbiAgaWYgKGNhY2hlKSB7IHJldHVybiBjYWNoZTsgfVxuXG4gIGNhY2hlID0gZW5jb2RlQ2FjaGVbZXhjbHVkZV0gPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgMTI4OyBpKyspIHtcbiAgICBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSk7XG5cbiAgICBpZiAoL15bMC05YS16XSQvaS50ZXN0KGNoKSkge1xuICAgICAgLy8gYWx3YXlzIGFsbG93IHVuZW5jb2RlZCBhbHBoYW51bWVyaWMgY2hhcmFjdGVyc1xuICAgICAgY2FjaGUucHVzaChjaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlLnB1c2goJyUnICsgKCcwJyArIGkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC0yKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4Y2x1ZGUubGVuZ3RoOyBpKyspIHtcbiAgICBjYWNoZVtleGNsdWRlLmNoYXJDb2RlQXQoaSldID0gZXhjbHVkZVtpXTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZTtcbn1cblxuXG4vLyBFbmNvZGUgdW5zYWZlIGNoYXJhY3RlcnMgd2l0aCBwZXJjZW50LWVuY29kaW5nLCBza2lwcGluZyBhbHJlYWR5XG4vLyBlbmNvZGVkIHNlcXVlbmNlcy5cbi8vXG4vLyAgLSBzdHJpbmcgICAgICAgLSBzdHJpbmcgdG8gZW5jb2RlXG4vLyAgLSBleGNsdWRlICAgICAgLSBsaXN0IG9mIGNoYXJhY3RlcnMgdG8gaWdub3JlIChpbiBhZGRpdGlvbiB0byBhLXpBLVowLTkpXG4vLyAgLSBrZWVwRXNjYXBlZCAgLSBkb24ndCBlbmNvZGUgJyUnIGluIGEgY29ycmVjdCBlc2NhcGUgc2VxdWVuY2UgKGRlZmF1bHQ6IHRydWUpXG4vL1xuZnVuY3Rpb24gZW5jb2RlKHN0cmluZywgZXhjbHVkZSwga2VlcEVzY2FwZWQpIHtcbiAgdmFyIGksIGwsIGNvZGUsIG5leHRDb2RlLCBjYWNoZSxcbiAgICAgIHJlc3VsdCA9ICcnO1xuXG4gIGlmICh0eXBlb2YgZXhjbHVkZSAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBlbmNvZGUoc3RyaW5nLCBrZWVwRXNjYXBlZClcbiAgICBrZWVwRXNjYXBlZCAgPSBleGNsdWRlO1xuICAgIGV4Y2x1ZGUgPSBlbmNvZGUuZGVmYXVsdENoYXJzO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBrZWVwRXNjYXBlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBrZWVwRXNjYXBlZCA9IHRydWU7XG4gIH1cblxuICBjYWNoZSA9IGdldEVuY29kZUNhY2hlKGV4Y2x1ZGUpO1xuXG4gIGZvciAoaSA9IDAsIGwgPSBzdHJpbmcubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXG4gICAgaWYgKGtlZXBFc2NhcGVkICYmIGNvZGUgPT09IDB4MjUgLyogJSAqLyAmJiBpICsgMiA8IGwpIHtcbiAgICAgIGlmICgvXlswLTlhLWZdezJ9JC9pLnRlc3Qoc3RyaW5nLnNsaWNlKGkgKyAxLCBpICsgMykpKSB7XG4gICAgICAgIHJlc3VsdCArPSBzdHJpbmcuc2xpY2UoaSwgaSArIDMpO1xuICAgICAgICBpICs9IDI7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlIDwgMTI4KSB7XG4gICAgICByZXN1bHQgKz0gY2FjaGVbY29kZV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoY29kZSA+PSAweEQ4MDAgJiYgY29kZSA8PSAweERGRkYpIHtcbiAgICAgIGlmIChjb2RlID49IDB4RDgwMCAmJiBjb2RlIDw9IDB4REJGRiAmJiBpICsgMSA8IGwpIHtcbiAgICAgICAgbmV4dENvZGUgPSBzdHJpbmcuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICAgIGlmIChuZXh0Q29kZSA+PSAweERDMDAgJiYgbmV4dENvZGUgPD0gMHhERkZGKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdbaV0gKyBzdHJpbmdbaSArIDFdKTtcbiAgICAgICAgICBpKys7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdCArPSAnJUVGJUJGJUJEJztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc3VsdCArPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nW2ldKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmVuY29kZS5kZWZhdWx0Q2hhcnMgICA9IFwiOy8/OkAmPSskLC1fLiF+KicoKSNcIjtcbmVuY29kZS5jb21wb25lbnRDaGFycyA9IFwiLV8uIX4qJygpXCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBlbmNvZGU7XG4iLCJcbid1c2Ugc3RyaWN0JztcblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbnZhciBkZWNvZGVDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWNvZGVDYWNoZShleGNsdWRlKSB7XG4gIHZhciBpLCBjaCwgY2FjaGUgPSBkZWNvZGVDYWNoZVtleGNsdWRlXTtcbiAgaWYgKGNhY2hlKSB7IHJldHVybiBjYWNoZTsgfVxuXG4gIGNhY2hlID0gZGVjb2RlQ2FjaGVbZXhjbHVkZV0gPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgMTI4OyBpKyspIHtcbiAgICBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSk7XG4gICAgY2FjaGUucHVzaChjaCk7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhjbHVkZS5sZW5ndGg7IGkrKykge1xuICAgIGNoID0gZXhjbHVkZS5jaGFyQ29kZUF0KGkpO1xuICAgIGNhY2hlW2NoXSA9ICclJyArICgnMCcgKyBjaC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkuc2xpY2UoLTIpO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlO1xufVxuXG5cbi8vIERlY29kZSBwZXJjZW50LWVuY29kZWQgc3RyaW5nLlxuLy9cbmZ1bmN0aW9uIGRlY29kZShzdHJpbmcsIGV4Y2x1ZGUpIHtcbiAgdmFyIGNhY2hlO1xuXG4gIGlmICh0eXBlb2YgZXhjbHVkZSAhPT0gJ3N0cmluZycpIHtcbiAgICBleGNsdWRlID0gZGVjb2RlLmRlZmF1bHRDaGFycztcbiAgfVxuXG4gIGNhY2hlID0gZ2V0RGVjb2RlQ2FjaGUoZXhjbHVkZSk7XG5cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oJVthLWYwLTldezJ9KSsvZ2ksIGZ1bmN0aW9uKHNlcSkge1xuICAgIHZhciBpLCBsLCBiMSwgYjIsIGIzLCBiNCwgY2hyLFxuICAgICAgICByZXN1bHQgPSAnJztcblxuICAgIGZvciAoaSA9IDAsIGwgPSBzZXEubGVuZ3RoOyBpIDwgbDsgaSArPSAzKSB7XG4gICAgICBiMSA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgMSwgaSArIDMpLCAxNik7XG5cbiAgICAgIGlmIChiMSA8IDB4ODApIHtcbiAgICAgICAgcmVzdWx0ICs9IGNhY2hlW2IxXTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgoYjEgJiAweEUwKSA9PT0gMHhDMCAmJiAoaSArIDMgPCBsKSkge1xuICAgICAgICAvLyAxMTB4eHh4eCAxMHh4eHh4eFxuICAgICAgICBiMiA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgNCwgaSArIDYpLCAxNik7XG5cbiAgICAgICAgaWYgKChiMiAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgY2hyID0gKChiMSA8PCA2KSAmIDB4N0MwKSB8IChiMiAmIDB4M0YpO1xuXG4gICAgICAgICAgaWYgKGNociA8IDB4ODApIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnXFx1ZmZmZFxcdWZmZmQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoKGIxICYgMHhGMCkgPT09IDB4RTAgJiYgKGkgKyA2IDwgbCkpIHtcbiAgICAgICAgLy8gMTExMHh4eHggMTB4eHh4eHggMTB4eHh4eHhcbiAgICAgICAgYjIgPSBwYXJzZUludChzZXEuc2xpY2UoaSArIDQsIGkgKyA2KSwgMTYpO1xuICAgICAgICBiMyA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgNywgaSArIDkpLCAxNik7XG5cbiAgICAgICAgaWYgKChiMiAmIDB4QzApID09PSAweDgwICYmIChiMyAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgY2hyID0gKChiMSA8PCAxMikgJiAweEYwMDApIHwgKChiMiA8PCA2KSAmIDB4RkMwKSB8IChiMyAmIDB4M0YpO1xuXG4gICAgICAgICAgaWYgKGNociA8IDB4ODAwIHx8IChjaHIgPj0gMHhEODAwICYmIGNociA8PSAweERGRkYpKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJ1xcdWZmZmRcXHVmZmZkXFx1ZmZmZCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSA2O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgoYjEgJiAweEY4KSA9PT0gMHhGMCAmJiAoaSArIDkgPCBsKSkge1xuICAgICAgICAvLyAxMTExMTB4eCAxMHh4eHh4eCAxMHh4eHh4eCAxMHh4eHh4eFxuICAgICAgICBiMiA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgNCwgaSArIDYpLCAxNik7XG4gICAgICAgIGIzID0gcGFyc2VJbnQoc2VxLnNsaWNlKGkgKyA3LCBpICsgOSksIDE2KTtcbiAgICAgICAgYjQgPSBwYXJzZUludChzZXEuc2xpY2UoaSArIDEwLCBpICsgMTIpLCAxNik7XG5cbiAgICAgICAgaWYgKChiMiAmIDB4QzApID09PSAweDgwICYmIChiMyAmIDB4QzApID09PSAweDgwICYmIChiNCAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgY2hyID0gKChiMSA8PCAxOCkgJiAweDFDMDAwMCkgfCAoKGIyIDw8IDEyKSAmIDB4M0YwMDApIHwgKChiMyA8PCA2KSAmIDB4RkMwKSB8IChiNCAmIDB4M0YpO1xuXG4gICAgICAgICAgaWYgKGNociA8IDB4MTAwMDAgfHwgY2hyID4gMHgxMEZGRkYpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnXFx1ZmZmZFxcdWZmZmRcXHVmZmZkXFx1ZmZmZCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNociAtPSAweDEwMDAwO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwICsgKGNociA+PiAxMCksIDB4REMwMCArIChjaHIgJiAweDNGRikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gOTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQgKz0gJ1xcdWZmZmQnO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xufVxuXG5cbmRlY29kZS5kZWZhdWx0Q2hhcnMgICA9ICc7Lz86QCY9KyQsIyc7XG5kZWNvZGUuY29tcG9uZW50Q2hhcnMgPSAnJztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZTtcbiIsIlxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9ybWF0KHVybCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgcmVzdWx0ICs9IHVybC5wcm90b2NvbCB8fCAnJztcbiAgcmVzdWx0ICs9IHVybC5zbGFzaGVzID8gJy8vJyA6ICcnO1xuICByZXN1bHQgKz0gdXJsLmF1dGggPyB1cmwuYXV0aCArICdAJyA6ICcnO1xuXG4gIGlmICh1cmwuaG9zdG5hbWUgJiYgdXJsLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICAvLyBpcHY2IGFkZHJlc3NcbiAgICByZXN1bHQgKz0gJ1snICsgdXJsLmhvc3RuYW1lICsgJ10nO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCArPSB1cmwuaG9zdG5hbWUgfHwgJyc7XG4gIH1cblxuICByZXN1bHQgKz0gdXJsLnBvcnQgPyAnOicgKyB1cmwucG9ydCA6ICcnO1xuICByZXN1bHQgKz0gdXJsLnBhdGhuYW1lIHx8ICcnO1xuICByZXN1bHQgKz0gdXJsLnNlYXJjaCB8fCAnJztcbiAgcmVzdWx0ICs9IHVybC5oYXNoIHx8ICcnO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy9cbi8vIENoYW5nZXMgZnJvbSBqb3llbnQvbm9kZTpcbi8vXG4vLyAxLiBObyBsZWFkaW5nIHNsYXNoIGluIHBhdGhzLFxuLy8gICAgZS5nLiBpbiBgdXJsLnBhcnNlKCdodHRwOi8vZm9vP2JhcicpYCBwYXRobmFtZSBpcyBgYCwgbm90IGAvYFxuLy9cbi8vIDIuIEJhY2tzbGFzaGVzIGFyZSBub3QgcmVwbGFjZWQgd2l0aCBzbGFzaGVzLFxuLy8gICAgc28gYGh0dHA6XFxcXGV4YW1wbGUub3JnXFxgIGlzIHRyZWF0ZWQgbGlrZSBhIHJlbGF0aXZlIHBhdGhcbi8vXG4vLyAzLiBUcmFpbGluZyBjb2xvbiBpcyB0cmVhdGVkIGxpa2UgYSBwYXJ0IG9mIHRoZSBwYXRoLFxuLy8gICAgaS5lLiBpbiBgaHR0cDovL2V4YW1wbGUub3JnOmZvb2AgcGF0aG5hbWUgaXMgYDpmb29gXG4vL1xuLy8gNC4gTm90aGluZyBpcyBVUkwtZW5jb2RlZCBpbiB0aGUgcmVzdWx0aW5nIG9iamVjdCxcbi8vICAgIChpbiBqb3llbnQvbm9kZSBzb21lIGNoYXJzIGluIGF1dGggYW5kIHBhdGhzIGFyZSBlbmNvZGVkKVxuLy9cbi8vIDUuIGB1cmwucGFyc2UoKWAgZG9lcyBub3QgaGF2ZSBgcGFyc2VRdWVyeVN0cmluZ2AgYXJndW1lbnRcbi8vXG4vLyA2LiBSZW1vdmVkIGV4dHJhbmVvdXMgcmVzdWx0IHByb3BlcnRpZXM6IGBob3N0YCwgYHBhdGhgLCBgcXVlcnlgLCBldGMuLFxuLy8gICAgd2hpY2ggY2FuIGJlIGNvbnN0cnVjdGVkIHVzaW5nIG90aGVyIHBhcnRzIG9mIHRoZSB1cmwuXG4vL1xuXG5cbmZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbICc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0JyBdLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgbm90IGFsbG93ZWQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbiAgICB1bndpc2UgPSBbICd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCcgXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWyAnXFwnJyBdLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyAnJScsICcvJywgJz8nLCAnOycsICcjJyBdLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgICBob3N0RW5kaW5nQ2hhcnMgPSBbICcvJywgJz8nLCAnIycgXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICAgIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLFxuICAgIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNjcmlwdC11cmwgKi9cbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH07XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1zY3JpcHQtdXJsICovXG5cbmZ1bmN0aW9uIHVybFBhcnNlKHVybCwgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHVybCAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHsgcmV0dXJuIHVybDsgfVxuXG4gIHZhciB1ID0gbmV3IFVybCgpO1xuICB1LnBhcnNlKHVybCwgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHVybCwgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgdmFyIGksIGwsIGxvd2VyUHJvdG8sIGhlYywgc2xhc2hlcyxcbiAgICAgIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgaWYgKHByb3RvKSB7XG4gICAgcHJvdG8gPSBwcm90b1swXTtcbiAgICBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnByb3RvY29sID0gcHJvdG87XG4gICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7XG4gIH1cblxuICAvLyBmaWd1cmUgb3V0IGlmIGl0J3MgZ290IGEgaG9zdFxuICAvLyB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsXG4gIC8vIHJlc29sdXRpb24gd2lsbCB0cmVhdCAvL2Zvby9iYXIgYXMgaG9zdD1mb28scGF0aD1iYXIgYmVjYXVzZSB0aGF0J3NcbiAgLy8gaG93IHRoZSBicm93c2VyIHJlc29sdmVzIHJlbGF0aXZlIFVSTHMuXG4gIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXFwvXFwvW15AXFwvXStAW15AXFwvXSsvKSkge1xuICAgIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJztcbiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkge1xuICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpO1xuICAgICAgdGhpcy5zbGFzaGVzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAvL1xuICAgIC8vIGV4OlxuICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuXG4gICAgLy8gdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkge1xuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZVxuICAgIC8vIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLlxuICAgIHZhciBhdXRoLCBhdFNpZ247XG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLlxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpO1xuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLlxuICAgIC8vIFB1bGwgdGhhdCBvZmYuXG4gICAgaWYgKGF0U2lnbiAhPT0gLTEpIHtcbiAgICAgIGF1dGggPSByZXN0LnNsaWNlKDAsIGF0U2lnbik7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZShhdFNpZ24gKyAxKTtcbiAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgfVxuXG4gICAgLy8gdGhlIGhvc3QgaXMgdGhlIHJlbWFpbmluZyB0byB0aGUgbGVmdCBvZiB0aGUgZmlyc3Qgbm9uLWhvc3QgY2hhclxuICAgIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkge1xuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiB3ZSBzdGlsbCBoYXZlIG5vdCBoaXQgaXQsIHRoZW4gdGhlIGVudGlyZSB0aGluZyBpcyBhIGhvc3QuXG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG4gICAgfVxuXG4gICAgaWYgKHJlc3RbaG9zdEVuZCAtIDFdID09PSAnOicpIHsgaG9zdEVuZC0tOyB9XG4gICAgdmFyIGhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICB0aGlzLnBhcnNlSG9zdChob3N0KTtcblxuICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsXG4gICAgLy8gc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC5cbiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcblxuICAgIC8vIGlmIGhvc3RuYW1lIGJlZ2lucyB3aXRoIFsgYW5kIGVuZHMgd2l0aCBdXG4gICAgLy8gYXNzdW1lIHRoYXQgaXQncyBhbiBJUHY2IGFkZHJlc3MuXG4gICAgdmFyIGlwdjZIb3N0bmFtZSA9IHRoaXMuaG9zdG5hbWVbMF0gPT09ICdbJyAmJlxuICAgICAgICB0aGlzLmhvc3RuYW1lW3RoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMV0gPT09ICddJztcblxuICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLlxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB2YXIgaG9zdHBhcnRzID0gdGhpcy5ob3N0bmFtZS5zcGxpdCgvXFwuLyk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IGhvc3RwYXJ0c1tpXTtcbiAgICAgICAgaWYgKCFwYXJ0KSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgIHZhciBuZXdwYXJ0ID0gJyc7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykge1xuICAgICAgICAgICAgICAvLyB3ZSByZXBsYWNlIG5vbi1BU0NJSSBjaGFyIHdpdGggYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdFxuICAgICAgICAgICAgICAvLyBicm9rZW4gYnkgcmVwbGFjaW5nIG5vbi1BU0NJSSBieSBub3RoaW5nXG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gJ3gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSB0ZXN0IGFnYWluIHdpdGggQVNDSUkgY2hhciBvbmx5XG4gICAgICAgICAgaWYgKCFuZXdwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHZhciBub3RIb3N0ID0gaG9zdHBhcnRzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgIHZhciBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChiaXQpIHtcbiAgICAgICAgICAgICAgdmFsaWRQYXJ0cy5wdXNoKGJpdFsxXSk7XG4gICAgICAgICAgICAgIG5vdEhvc3QudW5zaGlmdChiaXRbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3QgPSBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhvc3RuYW1lID0gdmFsaWRQYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9ICcnO1xuICAgIH1cblxuICAgIC8vIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWVcbiAgICAvLyB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaFxuICAgIGlmIChpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnN1YnN0cigxLCB0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICB0aGlzLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHRoaXMuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTtcbiAgfVxuICBpZiAocmVzdCkgeyB0aGlzLnBhdGhuYW1lID0gcmVzdDsgfVxuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmXG4gICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7XG4gICAgdGhpcy5wYXRobmFtZSA9ICcnO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKGhvc3QpIHtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHsgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7IH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdXJsUGFyc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuQW55ID0gcmVxdWlyZSgnLi9wcm9wZXJ0aWVzL0FueS9yZWdleCcpO1xuZXhwb3J0cy5DYyAgPSByZXF1aXJlKCcuL2NhdGVnb3JpZXMvQ2MvcmVnZXgnKTtcbmV4cG9ydHMuQ2YgID0gcmVxdWlyZSgnLi9jYXRlZ29yaWVzL0NmL3JlZ2V4Jyk7XG5leHBvcnRzLlAgICA9IHJlcXVpcmUoJy4vY2F0ZWdvcmllcy9QL3JlZ2V4Jyk7XG5leHBvcnRzLlogICA9IHJlcXVpcmUoJy4vY2F0ZWdvcmllcy9aL3JlZ2V4Jyk7XG4iLCJtb2R1bGUuZXhwb3J0cz0vW1xceEFEXFx1MDYwMC1cXHUwNjA1XFx1MDYxQ1xcdTA2RERcXHUwNzBGXFx1MDhFMlxcdTE4MEVcXHUyMDBCLVxcdTIwMEZcXHUyMDJBLVxcdTIwMkVcXHUyMDYwLVxcdTIwNjRcXHUyMDY2LVxcdTIwNkZcXHVGRUZGXFx1RkZGOS1cXHVGRkZCXXxcXHVEODA0W1xcdURDQkRcXHVEQ0NEXXxcXHVEODJGW1xcdURDQTAtXFx1RENBM118XFx1RDgzNFtcXHVERDczLVxcdUREN0FdfFxcdURCNDBbXFx1REMwMVxcdURDMjAtXFx1REM3Rl0vIiwiLy8gSnVzdCBhIHNob3J0Y3V0IGZvciBidWxrIGV4cG9ydFxuJ3VzZSBzdHJpY3QnO1xuXG5cbmV4cG9ydHMucGFyc2VMaW5rTGFiZWwgICAgICAgPSByZXF1aXJlKCcuL3BhcnNlX2xpbmtfbGFiZWwnKTtcbmV4cG9ydHMucGFyc2VMaW5rRGVzdGluYXRpb24gPSByZXF1aXJlKCcuL3BhcnNlX2xpbmtfZGVzdGluYXRpb24nKTtcbmV4cG9ydHMucGFyc2VMaW5rVGl0bGUgICAgICAgPSByZXF1aXJlKCcuL3BhcnNlX2xpbmtfdGl0bGUnKTtcbiIsIi8vIFBhcnNlIGxpbmsgbGFiZWxcbi8vXG4vLyB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBmaXJzdCBjaGFyYWN0ZXIgKFwiW1wiKSBhbHJlYWR5IG1hdGNoZXM7XG4vLyByZXR1cm5zIHRoZSBlbmQgb2YgdGhlIGxhYmVsXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlTGlua0xhYmVsKHN0YXRlLCBzdGFydCwgZGlzYWJsZU5lc3RlZCkge1xuICB2YXIgbGV2ZWwsIGZvdW5kLCBtYXJrZXIsIHByZXZQb3MsXG4gICAgICBsYWJlbEVuZCA9IC0xLFxuICAgICAgbWF4ID0gc3RhdGUucG9zTWF4LFxuICAgICAgb2xkUG9zID0gc3RhdGUucG9zO1xuXG4gIHN0YXRlLnBvcyA9IHN0YXJ0ICsgMTtcbiAgbGV2ZWwgPSAxO1xuXG4gIHdoaWxlIChzdGF0ZS5wb3MgPCBtYXgpIHtcbiAgICBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChzdGF0ZS5wb3MpO1xuICAgIGlmIChtYXJrZXIgPT09IDB4NUQgLyogXSAqLykge1xuICAgICAgbGV2ZWwtLTtcbiAgICAgIGlmIChsZXZlbCA9PT0gMCkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByZXZQb3MgPSBzdGF0ZS5wb3M7XG4gICAgc3RhdGUubWQuaW5saW5lLnNraXBUb2tlbihzdGF0ZSk7XG4gICAgaWYgKG1hcmtlciA9PT0gMHg1QiAvKiBbICovKSB7XG4gICAgICBpZiAocHJldlBvcyA9PT0gc3RhdGUucG9zIC0gMSkge1xuICAgICAgICAvLyBpbmNyZWFzZSBsZXZlbCBpZiB3ZSBmaW5kIHRleHQgYFtgLCB3aGljaCBpcyBub3QgYSBwYXJ0IG9mIGFueSB0b2tlblxuICAgICAgICBsZXZlbCsrO1xuICAgICAgfSBlbHNlIGlmIChkaXNhYmxlTmVzdGVkKSB7XG4gICAgICAgIHN0YXRlLnBvcyA9IG9sZFBvcztcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChmb3VuZCkge1xuICAgIGxhYmVsRW5kID0gc3RhdGUucG9zO1xuICB9XG5cbiAgLy8gcmVzdG9yZSBvbGQgc3RhdGVcbiAgc3RhdGUucG9zID0gb2xkUG9zO1xuXG4gIHJldHVybiBsYWJlbEVuZDtcbn07XG4iLCIvLyBQYXJzZSBsaW5rIGRlc3RpbmF0aW9uXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB1bmVzY2FwZUFsbCA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLnVuZXNjYXBlQWxsO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VMaW5rRGVzdGluYXRpb24oc3RyLCBwb3MsIG1heCkge1xuICB2YXIgY29kZSwgbGV2ZWwsXG4gICAgICBsaW5lcyA9IDAsXG4gICAgICBzdGFydCA9IHBvcyxcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICBwb3M6IDAsXG4gICAgICAgIGxpbmVzOiAwLFxuICAgICAgICBzdHI6ICcnXG4gICAgICB9O1xuXG4gIGlmIChzdHIuY2hhckNvZGVBdChwb3MpID09PSAweDNDIC8qIDwgKi8pIHtcbiAgICBwb3MrKztcbiAgICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgICBjb2RlID0gc3RyLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgIGlmIChjb2RlID09PSAweDBBIC8qIFxcbiAqLykgeyByZXR1cm4gcmVzdWx0OyB9XG4gICAgICBpZiAoY29kZSA9PT0gMHgzRSAvKiA+ICovKSB7XG4gICAgICAgIHJlc3VsdC5wb3MgPSBwb3MgKyAxO1xuICAgICAgICByZXN1bHQuc3RyID0gdW5lc2NhcGVBbGwoc3RyLnNsaWNlKHN0YXJ0ICsgMSwgcG9zKSk7XG4gICAgICAgIHJlc3VsdC5vayA9IHRydWU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoY29kZSA9PT0gMHg1QyAvKiBcXCAqLyAmJiBwb3MgKyAxIDwgbWF4KSB7XG4gICAgICAgIHBvcyArPSAyO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcG9zKys7XG4gICAgfVxuXG4gICAgLy8gbm8gY2xvc2luZyAnPidcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gdGhpcyBzaG91bGQgYmUgLi4uIH0gZWxzZSB7IC4uLiBicmFuY2hcblxuICBsZXZlbCA9IDA7XG4gIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICBjb2RlID0gc3RyLmNoYXJDb2RlQXQocG9zKTtcblxuICAgIGlmIChjb2RlID09PSAweDIwKSB7IGJyZWFrOyB9XG5cbiAgICAvLyBhc2NpaSBjb250cm9sIGNoYXJhY3RlcnNcbiAgICBpZiAoY29kZSA8IDB4MjAgfHwgY29kZSA9PT0gMHg3RikgeyBicmVhazsgfVxuXG4gICAgaWYgKGNvZGUgPT09IDB4NUMgLyogXFwgKi8gJiYgcG9zICsgMSA8IG1heCkge1xuICAgICAgcG9zICs9IDI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gMHgyOCAvKiAoICovKSB7XG4gICAgICBsZXZlbCsrO1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSAweDI5IC8qICkgKi8pIHtcbiAgICAgIGlmIChsZXZlbCA9PT0gMCkgeyBicmVhazsgfVxuICAgICAgbGV2ZWwtLTtcbiAgICB9XG5cbiAgICBwb3MrKztcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gcG9zKSB7IHJldHVybiByZXN1bHQ7IH1cbiAgaWYgKGxldmVsICE9PSAwKSB7IHJldHVybiByZXN1bHQ7IH1cblxuICByZXN1bHQuc3RyID0gdW5lc2NhcGVBbGwoc3RyLnNsaWNlKHN0YXJ0LCBwb3MpKTtcbiAgcmVzdWx0LmxpbmVzID0gbGluZXM7XG4gIHJlc3VsdC5wb3MgPSBwb3M7XG4gIHJlc3VsdC5vayA9IHRydWU7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gUGFyc2UgbGluayB0aXRsZVxuLy9cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgdW5lc2NhcGVBbGwgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS51bmVzY2FwZUFsbDtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlTGlua1RpdGxlKHN0ciwgcG9zLCBtYXgpIHtcbiAgdmFyIGNvZGUsXG4gICAgICBtYXJrZXIsXG4gICAgICBsaW5lcyA9IDAsXG4gICAgICBzdGFydCA9IHBvcyxcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICBwb3M6IDAsXG4gICAgICAgIGxpbmVzOiAwLFxuICAgICAgICBzdHI6ICcnXG4gICAgICB9O1xuXG4gIGlmIChwb3MgPj0gbWF4KSB7IHJldHVybiByZXN1bHQ7IH1cblxuICBtYXJrZXIgPSBzdHIuY2hhckNvZGVBdChwb3MpO1xuXG4gIGlmIChtYXJrZXIgIT09IDB4MjIgLyogXCIgKi8gJiYgbWFya2VyICE9PSAweDI3IC8qICcgKi8gJiYgbWFya2VyICE9PSAweDI4IC8qICggKi8pIHsgcmV0dXJuIHJlc3VsdDsgfVxuXG4gIHBvcysrO1xuXG4gIC8vIGlmIG9wZW5pbmcgbWFya2VyIGlzIFwiKFwiLCBzd2l0Y2ggaXQgdG8gY2xvc2luZyBtYXJrZXIgXCIpXCJcbiAgaWYgKG1hcmtlciA9PT0gMHgyOCkgeyBtYXJrZXIgPSAweDI5OyB9XG5cbiAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgIGNvZGUgPSBzdHIuY2hhckNvZGVBdChwb3MpO1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIHJlc3VsdC5wb3MgPSBwb3MgKyAxO1xuICAgICAgcmVzdWx0LmxpbmVzID0gbGluZXM7XG4gICAgICByZXN1bHQuc3RyID0gdW5lc2NhcGVBbGwoc3RyLnNsaWNlKHN0YXJ0ICsgMSwgcG9zKSk7XG4gICAgICByZXN1bHQub2sgPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MEEpIHtcbiAgICAgIGxpbmVzKys7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDVDIC8qIFxcICovICYmIHBvcyArIDEgPCBtYXgpIHtcbiAgICAgIHBvcysrO1xuICAgICAgaWYgKHN0ci5jaGFyQ29kZUF0KHBvcykgPT09IDB4MEEpIHtcbiAgICAgICAgbGluZXMrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwb3MrKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyoqXG4gKiBjbGFzcyBSZW5kZXJlclxuICpcbiAqIEdlbmVyYXRlcyBIVE1MIGZyb20gcGFyc2VkIHRva2VuIHN0cmVhbS4gRWFjaCBpbnN0YW5jZSBoYXMgaW5kZXBlbmRlbnRcbiAqIGNvcHkgb2YgcnVsZXMuIFRob3NlIGNhbiBiZSByZXdyaXR0ZW4gd2l0aCBlYXNlLiBBbHNvLCB5b3UgY2FuIGFkZCBuZXdcbiAqIHJ1bGVzIGlmIHlvdSBjcmVhdGUgcGx1Z2luIGFuZCBhZGRzIG5ldyB0b2tlbiB0eXBlcy5cbiAqKi9cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgYXNzaWduICAgICAgICAgID0gcmVxdWlyZSgnLi9jb21tb24vdXRpbHMnKS5hc3NpZ247XG52YXIgdW5lc2NhcGVBbGwgICAgID0gcmVxdWlyZSgnLi9jb21tb24vdXRpbHMnKS51bmVzY2FwZUFsbDtcbnZhciBlc2NhcGVIdG1sICAgICAgPSByZXF1aXJlKCcuL2NvbW1vbi91dGlscycpLmVzY2FwZUh0bWw7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxudmFyIGRlZmF1bHRfcnVsZXMgPSB7fTtcblxuXG5kZWZhdWx0X3J1bGVzLmNvZGVfaW5saW5lID0gZnVuY3Rpb24gKHRva2VucywgaWR4LCBvcHRpb25zLCBlbnYsIHNsZikge1xuICB2YXIgdG9rZW4gPSB0b2tlbnNbaWR4XTtcblxuICByZXR1cm4gICc8Y29kZScgKyBzbGYucmVuZGVyQXR0cnModG9rZW4pICsgJz4nICtcbiAgICAgICAgICBlc2NhcGVIdG1sKHRva2Vuc1tpZHhdLmNvbnRlbnQpICtcbiAgICAgICAgICAnPC9jb2RlPic7XG59O1xuXG5cbmRlZmF1bHRfcnVsZXMuY29kZV9ibG9jayA9IGZ1bmN0aW9uICh0b2tlbnMsIGlkeCwgb3B0aW9ucywgZW52LCBzbGYpIHtcbiAgdmFyIHRva2VuID0gdG9rZW5zW2lkeF07XG5cbiAgcmV0dXJuICAnPHByZScgKyBzbGYucmVuZGVyQXR0cnModG9rZW4pICsgJz48Y29kZT4nICtcbiAgICAgICAgICBlc2NhcGVIdG1sKHRva2Vuc1tpZHhdLmNvbnRlbnQpICtcbiAgICAgICAgICAnPC9jb2RlPjwvcHJlPlxcbic7XG59O1xuXG5cbmRlZmF1bHRfcnVsZXMuZmVuY2UgPSBmdW5jdGlvbiAodG9rZW5zLCBpZHgsIG9wdGlvbnMsIGVudiwgc2xmKSB7XG4gIHZhciB0b2tlbiA9IHRva2Vuc1tpZHhdLFxuICAgICAgaW5mbyA9IHRva2VuLmluZm8gPyB1bmVzY2FwZUFsbCh0b2tlbi5pbmZvKS50cmltKCkgOiAnJyxcbiAgICAgIGxhbmdOYW1lID0gJycsXG4gICAgICBoaWdobGlnaHRlZCwgaSwgdG1wQXR0cnMsIHRtcFRva2VuO1xuXG4gIGlmIChpbmZvKSB7XG4gICAgbGFuZ05hbWUgPSBpbmZvLnNwbGl0KC9cXHMrL2cpWzBdO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGlnaGxpZ2h0KSB7XG4gICAgaGlnaGxpZ2h0ZWQgPSBvcHRpb25zLmhpZ2hsaWdodCh0b2tlbi5jb250ZW50LCBsYW5nTmFtZSkgfHwgZXNjYXBlSHRtbCh0b2tlbi5jb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBoaWdobGlnaHRlZCA9IGVzY2FwZUh0bWwodG9rZW4uY29udGVudCk7XG4gIH1cblxuICBpZiAoaGlnaGxpZ2h0ZWQuaW5kZXhPZignPHByZScpID09PSAwKSB7XG4gICAgcmV0dXJuIGhpZ2hsaWdodGVkICsgJ1xcbic7XG4gIH1cblxuICAvLyBJZiBsYW5ndWFnZSBleGlzdHMsIGluamVjdCBjbGFzcyBnZW50bHksIHdpdGhvdXQgbW9kaWZ5aW5nIG9yaWdpbmFsIHRva2VuLlxuICAvLyBNYXkgYmUsIG9uZSBkYXkgd2Ugd2lsbCBhZGQgLmNsb25lKCkgZm9yIHRva2VuIGFuZCBzaW1wbGlmeSB0aGlzIHBhcnQsIGJ1dFxuICAvLyBub3cgd2UgcHJlZmVyIHRvIGtlZXAgdGhpbmdzIGxvY2FsLlxuICBpZiAoaW5mbykge1xuICAgIGkgICAgICAgID0gdG9rZW4uYXR0ckluZGV4KCdjbGFzcycpO1xuICAgIHRtcEF0dHJzID0gdG9rZW4uYXR0cnMgPyB0b2tlbi5hdHRycy5zbGljZSgpIDogW107XG5cbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRtcEF0dHJzLnB1c2goWyAnY2xhc3MnLCBvcHRpb25zLmxhbmdQcmVmaXggKyBsYW5nTmFtZSBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG1wQXR0cnNbaV1bMV0gKz0gJyAnICsgb3B0aW9ucy5sYW5nUHJlZml4ICsgbGFuZ05hbWU7XG4gICAgfVxuXG4gICAgLy8gRmFrZSB0b2tlbiBqdXN0IHRvIHJlbmRlciBhdHRyaWJ1dGVzXG4gICAgdG1wVG9rZW4gPSB7XG4gICAgICBhdHRyczogdG1wQXR0cnNcbiAgICB9O1xuXG4gICAgcmV0dXJuICAnPHByZT48Y29kZScgKyBzbGYucmVuZGVyQXR0cnModG1wVG9rZW4pICsgJz4nXG4gICAgICAgICAgKyBoaWdobGlnaHRlZFxuICAgICAgICAgICsgJzwvY29kZT48L3ByZT5cXG4nO1xuICB9XG5cblxuICByZXR1cm4gICc8cHJlPjxjb2RlJyArIHNsZi5yZW5kZXJBdHRycyh0b2tlbikgKyAnPidcbiAgICAgICAgKyBoaWdobGlnaHRlZFxuICAgICAgICArICc8L2NvZGU+PC9wcmU+XFxuJztcbn07XG5cblxuZGVmYXVsdF9ydWxlcy5pbWFnZSA9IGZ1bmN0aW9uICh0b2tlbnMsIGlkeCwgb3B0aW9ucywgZW52LCBzbGYpIHtcbiAgdmFyIHRva2VuID0gdG9rZW5zW2lkeF07XG5cbiAgLy8gXCJhbHRcIiBhdHRyIE1VU1QgYmUgc2V0LCBldmVuIGlmIGVtcHR5LiBCZWNhdXNlIGl0J3MgbWFuZGF0b3J5IGFuZFxuICAvLyBzaG91bGQgYmUgcGxhY2VkIG9uIHByb3BlciBwb3NpdGlvbiBmb3IgdGVzdHMuXG4gIC8vXG4gIC8vIFJlcGxhY2UgY29udGVudCB3aXRoIGFjdHVhbCB2YWx1ZVxuXG4gIHRva2VuLmF0dHJzW3Rva2VuLmF0dHJJbmRleCgnYWx0JyldWzFdID1cbiAgICBzbGYucmVuZGVySW5saW5lQXNUZXh0KHRva2VuLmNoaWxkcmVuLCBvcHRpb25zLCBlbnYpO1xuXG4gIHJldHVybiBzbGYucmVuZGVyVG9rZW4odG9rZW5zLCBpZHgsIG9wdGlvbnMpO1xufTtcblxuXG5kZWZhdWx0X3J1bGVzLmhhcmRicmVhayA9IGZ1bmN0aW9uICh0b2tlbnMsIGlkeCwgb3B0aW9ucyAvKiwgZW52ICovKSB7XG4gIHJldHVybiBvcHRpb25zLnhodG1sT3V0ID8gJzxiciAvPlxcbicgOiAnPGJyPlxcbic7XG59O1xuZGVmYXVsdF9ydWxlcy5zb2Z0YnJlYWsgPSBmdW5jdGlvbiAodG9rZW5zLCBpZHgsIG9wdGlvbnMgLyosIGVudiAqLykge1xuICByZXR1cm4gb3B0aW9ucy5icmVha3MgPyAob3B0aW9ucy54aHRtbE91dCA/ICc8YnIgLz5cXG4nIDogJzxicj5cXG4nKSA6ICdcXG4nO1xufTtcblxuXG5kZWZhdWx0X3J1bGVzLnRleHQgPSBmdW5jdGlvbiAodG9rZW5zLCBpZHggLyosIG9wdGlvbnMsIGVudiAqLykge1xuICByZXR1cm4gZXNjYXBlSHRtbCh0b2tlbnNbaWR4XS5jb250ZW50KTtcbn07XG5cblxuZGVmYXVsdF9ydWxlcy5odG1sX2Jsb2NrID0gZnVuY3Rpb24gKHRva2VucywgaWR4IC8qLCBvcHRpb25zLCBlbnYgKi8pIHtcbiAgcmV0dXJuIHRva2Vuc1tpZHhdLmNvbnRlbnQ7XG59O1xuZGVmYXVsdF9ydWxlcy5odG1sX2lubGluZSA9IGZ1bmN0aW9uICh0b2tlbnMsIGlkeCAvKiwgb3B0aW9ucywgZW52ICovKSB7XG4gIHJldHVybiB0b2tlbnNbaWR4XS5jb250ZW50O1xufTtcblxuXG4vKipcbiAqIG5ldyBSZW5kZXJlcigpXG4gKlxuICogQ3JlYXRlcyBuZXcgW1tSZW5kZXJlcl1dIGluc3RhbmNlIGFuZCBmaWxsIFtbUmVuZGVyZXIjcnVsZXNdXSB3aXRoIGRlZmF1bHRzLlxuICoqL1xuZnVuY3Rpb24gUmVuZGVyZXIoKSB7XG5cbiAgLyoqXG4gICAqIFJlbmRlcmVyI3J1bGVzIC0+IE9iamVjdFxuICAgKlxuICAgKiBDb250YWlucyByZW5kZXIgcnVsZXMgZm9yIHRva2Vucy4gQ2FuIGJlIHVwZGF0ZWQgYW5kIGV4dGVuZGVkLlxuICAgKlxuICAgKiAjIyMjIyBFeGFtcGxlXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgpO1xuICAgKlxuICAgKiBtZC5yZW5kZXJlci5ydWxlcy5zdHJvbmdfb3BlbiAgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnPGI+JzsgfTtcbiAgICogbWQucmVuZGVyZXIucnVsZXMuc3Ryb25nX2Nsb3NlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJzwvYj4nOyB9O1xuICAgKlxuICAgKiB2YXIgcmVzdWx0ID0gbWQucmVuZGVySW5saW5lKC4uLik7XG4gICAqIGBgYFxuICAgKlxuICAgKiBFYWNoIHJ1bGUgaXMgY2FsbGVkIGFzIGluZGVwZW5kZW50IHN0YXRpYyBmdW5jdGlvbiB3aXRoIGZpeGVkIHNpZ25hdHVyZTpcbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBmdW5jdGlvbiBteV90b2tlbl9yZW5kZXIodG9rZW5zLCBpZHgsIG9wdGlvbnMsIGVudiwgcmVuZGVyZXIpIHtcbiAgICogICAvLyAuLi5cbiAgICogICByZXR1cm4gcmVuZGVyZWRIVE1MO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBTZWUgW3NvdXJjZSBjb2RlXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL3JlbmRlcmVyLmpzKVxuICAgKiBmb3IgbW9yZSBkZXRhaWxzIGFuZCBleGFtcGxlcy5cbiAgICoqL1xuICB0aGlzLnJ1bGVzID0gYXNzaWduKHt9LCBkZWZhdWx0X3J1bGVzKTtcbn1cblxuXG4vKipcbiAqIFJlbmRlcmVyLnJlbmRlckF0dHJzKHRva2VuKSAtPiBTdHJpbmdcbiAqXG4gKiBSZW5kZXIgdG9rZW4gYXR0cmlidXRlcyB0byBzdHJpbmcuXG4gKiovXG5SZW5kZXJlci5wcm90b3R5cGUucmVuZGVyQXR0cnMgPSBmdW5jdGlvbiByZW5kZXJBdHRycyh0b2tlbikge1xuICB2YXIgaSwgbCwgcmVzdWx0O1xuXG4gIGlmICghdG9rZW4uYXR0cnMpIHsgcmV0dXJuICcnOyB9XG5cbiAgcmVzdWx0ID0gJyc7XG5cbiAgZm9yIChpID0gMCwgbCA9IHRva2VuLmF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHJlc3VsdCArPSAnICcgKyBlc2NhcGVIdG1sKHRva2VuLmF0dHJzW2ldWzBdKSArICc9XCInICsgZXNjYXBlSHRtbCh0b2tlbi5hdHRyc1tpXVsxXSkgKyAnXCInO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqXG4gKiBSZW5kZXJlci5yZW5kZXJUb2tlbih0b2tlbnMsIGlkeCwgb3B0aW9ucykgLT4gU3RyaW5nXG4gKiAtIHRva2VucyAoQXJyYXkpOiBsaXN0IG9mIHRva2Vuc1xuICogLSBpZHggKE51bWJlZCk6IHRva2VuIGluZGV4IHRvIHJlbmRlclxuICogLSBvcHRpb25zIChPYmplY3QpOiBwYXJhbXMgb2YgcGFyc2VyIGluc3RhbmNlXG4gKlxuICogRGVmYXVsdCB0b2tlbiByZW5kZXJlci4gQ2FuIGJlIG92ZXJyaWRlbiBieSBjdXN0b20gZnVuY3Rpb25cbiAqIGluIFtbUmVuZGVyZXIjcnVsZXNdXS5cbiAqKi9cblJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJUb2tlbiA9IGZ1bmN0aW9uIHJlbmRlclRva2VuKHRva2VucywgaWR4LCBvcHRpb25zKSB7XG4gIHZhciBuZXh0VG9rZW4sXG4gICAgICByZXN1bHQgPSAnJyxcbiAgICAgIG5lZWRMZiA9IGZhbHNlLFxuICAgICAgdG9rZW4gPSB0b2tlbnNbaWR4XTtcblxuICAvLyBUaWdodCBsaXN0IHBhcmFncmFwaHNcbiAgaWYgKHRva2VuLmhpZGRlbikge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8vIEluc2VydCBhIG5ld2xpbmUgYmV0d2VlbiBoaWRkZW4gcGFyYWdyYXBoIGFuZCBzdWJzZXF1ZW50IG9wZW5pbmdcbiAgLy8gYmxvY2stbGV2ZWwgdGFnLlxuICAvL1xuICAvLyBGb3IgZXhhbXBsZSwgaGVyZSB3ZSBzaG91bGQgaW5zZXJ0IGEgbmV3bGluZSBiZWZvcmUgYmxvY2txdW90ZTpcbiAgLy8gIC0gYVxuICAvLyAgICA+XG4gIC8vXG4gIGlmICh0b2tlbi5ibG9jayAmJiB0b2tlbi5uZXN0aW5nICE9PSAtMSAmJiBpZHggJiYgdG9rZW5zW2lkeCAtIDFdLmhpZGRlbikge1xuICAgIHJlc3VsdCArPSAnXFxuJztcbiAgfVxuXG4gIC8vIEFkZCB0b2tlbiBuYW1lLCBlLmcuIGA8aW1nYFxuICByZXN1bHQgKz0gKHRva2VuLm5lc3RpbmcgPT09IC0xID8gJzwvJyA6ICc8JykgKyB0b2tlbi50YWc7XG5cbiAgLy8gRW5jb2RlIGF0dHJpYnV0ZXMsIGUuZy4gYDxpbWcgc3JjPVwiZm9vXCJgXG4gIHJlc3VsdCArPSB0aGlzLnJlbmRlckF0dHJzKHRva2VuKTtcblxuICAvLyBBZGQgYSBzbGFzaCBmb3Igc2VsZi1jbG9zaW5nIHRhZ3MsIGUuZy4gYDxpbWcgc3JjPVwiZm9vXCIgL2BcbiAgaWYgKHRva2VuLm5lc3RpbmcgPT09IDAgJiYgb3B0aW9ucy54aHRtbE91dCkge1xuICAgIHJlc3VsdCArPSAnIC8nO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBhZGQgYSBuZXdsaW5lIGFmdGVyIHRoaXMgdGFnXG4gIGlmICh0b2tlbi5ibG9jaykge1xuICAgIG5lZWRMZiA9IHRydWU7XG5cbiAgICBpZiAodG9rZW4ubmVzdGluZyA9PT0gMSkge1xuICAgICAgaWYgKGlkeCArIDEgPCB0b2tlbnMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRUb2tlbiA9IHRva2Vuc1tpZHggKyAxXTtcblxuICAgICAgICBpZiAobmV4dFRva2VuLnR5cGUgPT09ICdpbmxpbmUnIHx8IG5leHRUb2tlbi5oaWRkZW4pIHtcbiAgICAgICAgICAvLyBCbG9jay1sZXZlbCB0YWcgY29udGFpbmluZyBhbiBpbmxpbmUgdGFnLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgbmVlZExmID0gZmFsc2U7XG5cbiAgICAgICAgfSBlbHNlIGlmIChuZXh0VG9rZW4ubmVzdGluZyA9PT0gLTEgJiYgbmV4dFRva2VuLnRhZyA9PT0gdG9rZW4udGFnKSB7XG4gICAgICAgICAgLy8gT3BlbmluZyB0YWcgKyBjbG9zaW5nIHRhZyBvZiB0aGUgc2FtZSB0eXBlLiBFLmcuIGA8bGk+PC9saT5gLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgbmVlZExmID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXN1bHQgKz0gbmVlZExmID8gJz5cXG4nIDogJz4nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKlxuICogUmVuZGVyZXIucmVuZGVySW5saW5lKHRva2Vucywgb3B0aW9ucywgZW52KSAtPiBTdHJpbmdcbiAqIC0gdG9rZW5zIChBcnJheSk6IGxpc3Qgb24gYmxvY2sgdG9rZW5zIHRvIHJlbnRlclxuICogLSBvcHRpb25zIChPYmplY3QpOiBwYXJhbXMgb2YgcGFyc2VyIGluc3RhbmNlXG4gKiAtIGVudiAoT2JqZWN0KTogYWRkaXRpb25hbCBkYXRhIGZyb20gcGFyc2VkIGlucHV0IChyZWZlcmVuY2VzLCBmb3IgZXhhbXBsZSlcbiAqXG4gKiBUaGUgc2FtZSBhcyBbW1JlbmRlcmVyLnJlbmRlcl1dLCBidXQgZm9yIHNpbmdsZSB0b2tlbiBvZiBgaW5saW5lYCB0eXBlLlxuICoqL1xuUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlcklubGluZSA9IGZ1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMsIGVudikge1xuICB2YXIgdHlwZSxcbiAgICAgIHJlc3VsdCA9ICcnLFxuICAgICAgcnVsZXMgPSB0aGlzLnJ1bGVzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB0eXBlID0gdG9rZW5zW2ldLnR5cGU7XG5cbiAgICBpZiAodHlwZW9mIHJ1bGVzW3R5cGVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzdWx0ICs9IHJ1bGVzW3R5cGVdKHRva2VucywgaSwgb3B0aW9ucywgZW52LCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IHRoaXMucmVuZGVyVG9rZW4odG9rZW5zLCBpLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKiogaW50ZXJuYWxcbiAqIFJlbmRlcmVyLnJlbmRlcklubGluZUFzVGV4dCh0b2tlbnMsIG9wdGlvbnMsIGVudikgLT4gU3RyaW5nXG4gKiAtIHRva2VucyAoQXJyYXkpOiBsaXN0IG9uIGJsb2NrIHRva2VucyB0byByZW50ZXJcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogcGFyYW1zIG9mIHBhcnNlciBpbnN0YW5jZVxuICogLSBlbnYgKE9iamVjdCk6IGFkZGl0aW9uYWwgZGF0YSBmcm9tIHBhcnNlZCBpbnB1dCAocmVmZXJlbmNlcywgZm9yIGV4YW1wbGUpXG4gKlxuICogU3BlY2lhbCBrbHVkZ2UgZm9yIGltYWdlIGBhbHRgIGF0dHJpYnV0ZXMgdG8gY29uZm9ybSBDb21tb25NYXJrIHNwZWMuXG4gKiBEb24ndCB0cnkgdG8gdXNlIGl0ISBTcGVjIHJlcXVpcmVzIHRvIHNob3cgYGFsdGAgY29udGVudCB3aXRoIHN0cmlwcGVkIG1hcmt1cCxcbiAqIGluc3RlYWQgb2Ygc2ltcGxlIGVzY2FwaW5nLlxuICoqL1xuUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlcklubGluZUFzVGV4dCA9IGZ1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMsIGVudikge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRva2Vucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICh0b2tlbnNbaV0udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICByZXN1bHQgKz0gdG9rZW5zW2ldLmNvbnRlbnQ7XG4gICAgfSBlbHNlIGlmICh0b2tlbnNbaV0udHlwZSA9PT0gJ2ltYWdlJykge1xuICAgICAgcmVzdWx0ICs9IHRoaXMucmVuZGVySW5saW5lQXNUZXh0KHRva2Vuc1tpXS5jaGlsZHJlbiwgb3B0aW9ucywgZW52KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKipcbiAqIFJlbmRlcmVyLnJlbmRlcih0b2tlbnMsIG9wdGlvbnMsIGVudikgLT4gU3RyaW5nXG4gKiAtIHRva2VucyAoQXJyYXkpOiBsaXN0IG9uIGJsb2NrIHRva2VucyB0byByZW50ZXJcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogcGFyYW1zIG9mIHBhcnNlciBpbnN0YW5jZVxuICogLSBlbnYgKE9iamVjdCk6IGFkZGl0aW9uYWwgZGF0YSBmcm9tIHBhcnNlZCBpbnB1dCAocmVmZXJlbmNlcywgZm9yIGV4YW1wbGUpXG4gKlxuICogVGFrZXMgdG9rZW4gc3RyZWFtIGFuZCBnZW5lcmF0ZXMgSFRNTC4gUHJvYmFibHksIHlvdSB3aWxsIG5ldmVyIG5lZWQgdG8gY2FsbFxuICogdGhpcyBtZXRob2QgZGlyZWN0bHkuXG4gKiovXG5SZW5kZXJlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucywgZW52KSB7XG4gIHZhciBpLCBsZW4sIHR5cGUsXG4gICAgICByZXN1bHQgPSAnJyxcbiAgICAgIHJ1bGVzID0gdGhpcy5ydWxlcztcblxuICBmb3IgKGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB0eXBlID0gdG9rZW5zW2ldLnR5cGU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2lubGluZScpIHtcbiAgICAgIHJlc3VsdCArPSB0aGlzLnJlbmRlcklubGluZSh0b2tlbnNbaV0uY2hpbGRyZW4sIG9wdGlvbnMsIGVudik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcnVsZXNbdHlwZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXN1bHQgKz0gcnVsZXNbdG9rZW5zW2ldLnR5cGVdKHRva2VucywgaSwgb3B0aW9ucywgZW52LCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IHRoaXMucmVuZGVyVG9rZW4odG9rZW5zLCBpLCBvcHRpb25zLCBlbnYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbmRlcmVyO1xuIiwiLyoqIGludGVybmFsXG4gKiBjbGFzcyBDb3JlXG4gKlxuICogVG9wLWxldmVsIHJ1bGVzIGV4ZWN1dG9yLiBHbHVlcyBibG9jay9pbmxpbmUgcGFyc2VycyBhbmQgZG9lcyBpbnRlcm1lZGlhdGVcbiAqIHRyYW5zZm9ybWF0aW9ucy5cbiAqKi9cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgUnVsZXIgID0gcmVxdWlyZSgnLi9ydWxlcicpO1xuXG5cbnZhciBfcnVsZXMgPSBbXG4gIFsgJ25vcm1hbGl6ZScsICAgICAgcmVxdWlyZSgnLi9ydWxlc19jb3JlL25vcm1hbGl6ZScpICAgICAgXSxcbiAgWyAnYmxvY2snLCAgICAgICAgICByZXF1aXJlKCcuL3J1bGVzX2NvcmUvYmxvY2snKSAgICAgICAgICBdLFxuICBbICdpbmxpbmUnLCAgICAgICAgIHJlcXVpcmUoJy4vcnVsZXNfY29yZS9pbmxpbmUnKSAgICAgICAgIF0sXG4gIFsgJ2xpbmtpZnknLCAgICAgICAgcmVxdWlyZSgnLi9ydWxlc19jb3JlL2xpbmtpZnknKSAgICAgICAgXSxcbiAgWyAncmVwbGFjZW1lbnRzJywgICByZXF1aXJlKCcuL3J1bGVzX2NvcmUvcmVwbGFjZW1lbnRzJykgICBdLFxuICBbICdzbWFydHF1b3RlcycsICAgIHJlcXVpcmUoJy4vcnVsZXNfY29yZS9zbWFydHF1b3RlcycpICAgIF1cbl07XG5cblxuLyoqXG4gKiBuZXcgQ29yZSgpXG4gKiovXG5mdW5jdGlvbiBDb3JlKCkge1xuICAvKipcbiAgICogQ29yZSNydWxlciAtPiBSdWxlclxuICAgKlxuICAgKiBbW1J1bGVyXV0gaW5zdGFuY2UuIEtlZXAgY29uZmlndXJhdGlvbiBvZiBjb3JlIHJ1bGVzLlxuICAgKiovXG4gIHRoaXMucnVsZXIgPSBuZXcgUnVsZXIoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IF9ydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucnVsZXIucHVzaChfcnVsZXNbaV1bMF0sIF9ydWxlc1tpXVsxXSk7XG4gIH1cbn1cblxuXG4vKipcbiAqIENvcmUucHJvY2VzcyhzdGF0ZSlcbiAqXG4gKiBFeGVjdXRlcyBjb3JlIGNoYWluIHJ1bGVzLlxuICoqL1xuQ29yZS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB2YXIgaSwgbCwgcnVsZXM7XG5cbiAgcnVsZXMgPSB0aGlzLnJ1bGVyLmdldFJ1bGVzKCcnKTtcblxuICBmb3IgKGkgPSAwLCBsID0gcnVsZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcnVsZXNbaV0oc3RhdGUpO1xuICB9XG59O1xuXG5Db3JlLnByb3RvdHlwZS5TdGF0ZSA9IHJlcXVpcmUoJy4vcnVsZXNfY29yZS9zdGF0ZV9jb3JlJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBDb3JlO1xuIiwiLy8gTm9ybWFsaXplIGlucHV0IHN0cmluZ1xuXG4ndXNlIHN0cmljdCc7XG5cblxuLy8gaHR0cHM6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMjkvI2xpbmUtZW5kaW5nXG52YXIgTkVXTElORVNfUkUgID0gL1xcclxcbj98XFxuL2c7XG52YXIgTlVMTF9SRSAgICAgID0gL1xcMC9nO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplKHN0YXRlKSB7XG4gIHZhciBzdHI7XG5cbiAgLy8gTm9ybWFsaXplIG5ld2xpbmVzXG4gIHN0ciA9IHN0YXRlLnNyYy5yZXBsYWNlKE5FV0xJTkVTX1JFLCAnXFxuJyk7XG5cbiAgLy8gUmVwbGFjZSBOVUxMIGNoYXJhY3RlcnNcbiAgc3RyID0gc3RyLnJlcGxhY2UoTlVMTF9SRSwgJ1xcdUZGRkQnKTtcblxuICBzdGF0ZS5zcmMgPSBzdHI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmxvY2soc3RhdGUpIHtcbiAgdmFyIHRva2VuO1xuXG4gIGlmIChzdGF0ZS5pbmxpbmVNb2RlKSB7XG4gICAgdG9rZW4gICAgICAgICAgPSBuZXcgc3RhdGUuVG9rZW4oJ2lubGluZScsICcnLCAwKTtcbiAgICB0b2tlbi5jb250ZW50ICA9IHN0YXRlLnNyYztcbiAgICB0b2tlbi5tYXAgICAgICA9IFsgMCwgMSBdO1xuICAgIHRva2VuLmNoaWxkcmVuID0gW107XG4gICAgc3RhdGUudG9rZW5zLnB1c2godG9rZW4pO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLm1kLmJsb2NrLnBhcnNlKHN0YXRlLnNyYywgc3RhdGUubWQsIHN0YXRlLmVudiwgc3RhdGUudG9rZW5zKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmxpbmUoc3RhdGUpIHtcbiAgdmFyIHRva2VucyA9IHN0YXRlLnRva2VucywgdG9rLCBpLCBsO1xuXG4gIC8vIFBhcnNlIGlubGluZXNcbiAgZm9yIChpID0gMCwgbCA9IHRva2Vucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB0b2sgPSB0b2tlbnNbaV07XG4gICAgaWYgKHRvay50eXBlID09PSAnaW5saW5lJykge1xuICAgICAgc3RhdGUubWQuaW5saW5lLnBhcnNlKHRvay5jb250ZW50LCBzdGF0ZS5tZCwgc3RhdGUuZW52LCB0b2suY2hpbGRyZW4pO1xuICAgIH1cbiAgfVxufTtcbiIsIi8vIFJlcGxhY2UgbGluay1saWtlIHRleHRzIHdpdGggbGluayBub2Rlcy5cbi8vXG4vLyBDdXJyZW50bHkgcmVzdHJpY3RlZCBieSBgbWQudmFsaWRhdGVMaW5rKClgIHRvIGh0dHAvaHR0cHMvZnRwXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBhcnJheVJlcGxhY2VBdCA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmFycmF5UmVwbGFjZUF0O1xuXG5cbmZ1bmN0aW9uIGlzTGlua09wZW4oc3RyKSB7XG4gIHJldHVybiAvXjxhWz5cXHNdL2kudGVzdChzdHIpO1xufVxuZnVuY3Rpb24gaXNMaW5rQ2xvc2Uoc3RyKSB7XG4gIHJldHVybiAvXjxcXC9hXFxzKj4vaS50ZXN0KHN0cik7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsaW5raWZ5KHN0YXRlKSB7XG4gIHZhciBpLCBqLCBsLCB0b2tlbnMsIHRva2VuLCBjdXJyZW50VG9rZW4sIG5vZGVzLCBsbiwgdGV4dCwgcG9zLCBsYXN0UG9zLFxuICAgICAgbGV2ZWwsIGh0bWxMaW5rTGV2ZWwsIHVybCwgZnVsbFVybCwgdXJsVGV4dCxcbiAgICAgIGJsb2NrVG9rZW5zID0gc3RhdGUudG9rZW5zLFxuICAgICAgbGlua3M7XG5cbiAgaWYgKCFzdGF0ZS5tZC5vcHRpb25zLmxpbmtpZnkpIHsgcmV0dXJuOyB9XG5cbiAgZm9yIChqID0gMCwgbCA9IGJsb2NrVG9rZW5zLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgIGlmIChibG9ja1Rva2Vuc1tqXS50eXBlICE9PSAnaW5saW5lJyB8fFxuICAgICAgICAhc3RhdGUubWQubGlua2lmeS5wcmV0ZXN0KGJsb2NrVG9rZW5zW2pdLmNvbnRlbnQpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB0b2tlbnMgPSBibG9ja1Rva2Vuc1tqXS5jaGlsZHJlbjtcblxuICAgIGh0bWxMaW5rTGV2ZWwgPSAwO1xuXG4gICAgLy8gV2Ugc2NhbiBmcm9tIHRoZSBlbmQsIHRvIGtlZXAgcG9zaXRpb24gd2hlbiBuZXcgdGFncyBhZGRlZC5cbiAgICAvLyBVc2UgcmV2ZXJzZWQgbG9naWMgaW4gbGlua3Mgc3RhcnQvZW5kIG1hdGNoXG4gICAgZm9yIChpID0gdG9rZW5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjdXJyZW50VG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIC8vIFNraXAgY29udGVudCBvZiBtYXJrZG93biBsaW5rc1xuICAgICAgaWYgKGN1cnJlbnRUb2tlbi50eXBlID09PSAnbGlua19jbG9zZScpIHtcbiAgICAgICAgaS0tO1xuICAgICAgICB3aGlsZSAodG9rZW5zW2ldLmxldmVsICE9PSBjdXJyZW50VG9rZW4ubGV2ZWwgJiYgdG9rZW5zW2ldLnR5cGUgIT09ICdsaW5rX29wZW4nKSB7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBTa2lwIGNvbnRlbnQgb2YgaHRtbCB0YWcgbGlua3NcbiAgICAgIGlmIChjdXJyZW50VG9rZW4udHlwZSA9PT0gJ2h0bWxfaW5saW5lJykge1xuICAgICAgICBpZiAoaXNMaW5rT3BlbihjdXJyZW50VG9rZW4uY29udGVudCkgJiYgaHRtbExpbmtMZXZlbCA+IDApIHtcbiAgICAgICAgICBodG1sTGlua0xldmVsLS07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTGlua0Nsb3NlKGN1cnJlbnRUb2tlbi5jb250ZW50KSkge1xuICAgICAgICAgIGh0bWxMaW5rTGV2ZWwrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGh0bWxMaW5rTGV2ZWwgPiAwKSB7IGNvbnRpbnVlOyB9XG5cbiAgICAgIGlmIChjdXJyZW50VG9rZW4udHlwZSA9PT0gJ3RleHQnICYmIHN0YXRlLm1kLmxpbmtpZnkudGVzdChjdXJyZW50VG9rZW4uY29udGVudCkpIHtcblxuICAgICAgICB0ZXh0ID0gY3VycmVudFRva2VuLmNvbnRlbnQ7XG4gICAgICAgIGxpbmtzID0gc3RhdGUubWQubGlua2lmeS5tYXRjaCh0ZXh0KTtcblxuICAgICAgICAvLyBOb3cgc3BsaXQgc3RyaW5nIHRvIG5vZGVzXG4gICAgICAgIG5vZGVzID0gW107XG4gICAgICAgIGxldmVsID0gY3VycmVudFRva2VuLmxldmVsO1xuICAgICAgICBsYXN0UG9zID0gMDtcblxuICAgICAgICBmb3IgKGxuID0gMDsgbG4gPCBsaW5rcy5sZW5ndGg7IGxuKyspIHtcblxuICAgICAgICAgIHVybCA9IGxpbmtzW2xuXS51cmw7XG4gICAgICAgICAgZnVsbFVybCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsodXJsKTtcbiAgICAgICAgICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhmdWxsVXJsKSkgeyBjb250aW51ZTsgfVxuXG4gICAgICAgICAgdXJsVGV4dCA9IGxpbmtzW2xuXS50ZXh0O1xuXG4gICAgICAgICAgLy8gTGlua2lmaWVyIG1pZ2h0IHNlbmQgcmF3IGhvc3RuYW1lcyBsaWtlIFwiZXhhbXBsZS5jb21cIiwgd2hlcmUgdXJsXG4gICAgICAgICAgLy8gc3RhcnRzIHdpdGggZG9tYWluIG5hbWUuIFNvIHdlIHByZXBlbmQgaHR0cDovLyBpbiB0aG9zZSBjYXNlcyxcbiAgICAgICAgICAvLyBhbmQgcmVtb3ZlIGl0IGFmdGVyd2FyZHMuXG4gICAgICAgICAgLy9cbiAgICAgICAgICBpZiAoIWxpbmtzW2xuXS5zY2hlbWEpIHtcbiAgICAgICAgICAgIHVybFRleHQgPSBzdGF0ZS5tZC5ub3JtYWxpemVMaW5rVGV4dCgnaHR0cDovLycgKyB1cmxUZXh0KS5yZXBsYWNlKC9eaHR0cDpcXC9cXC8vLCAnJyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaW5rc1tsbl0uc2NoZW1hID09PSAnbWFpbHRvOicgJiYgIS9ebWFpbHRvOi9pLnRlc3QodXJsVGV4dCkpIHtcbiAgICAgICAgICAgIHVybFRleHQgPSBzdGF0ZS5tZC5ub3JtYWxpemVMaW5rVGV4dCgnbWFpbHRvOicgKyB1cmxUZXh0KS5yZXBsYWNlKC9ebWFpbHRvOi8sICcnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsVGV4dCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmtUZXh0KHVybFRleHQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBvcyA9IGxpbmtzW2xuXS5pbmRleDtcblxuICAgICAgICAgIGlmIChwb3MgPiBsYXN0UG9zKSB7XG4gICAgICAgICAgICB0b2tlbiAgICAgICAgID0gbmV3IHN0YXRlLlRva2VuKCd0ZXh0JywgJycsIDApO1xuICAgICAgICAgICAgdG9rZW4uY29udGVudCA9IHRleHQuc2xpY2UobGFzdFBvcywgcG9zKTtcbiAgICAgICAgICAgIHRva2VuLmxldmVsICAgPSBsZXZlbDtcbiAgICAgICAgICAgIG5vZGVzLnB1c2godG9rZW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRva2VuICAgICAgICAgPSBuZXcgc3RhdGUuVG9rZW4oJ2xpbmtfb3BlbicsICdhJywgMSk7XG4gICAgICAgICAgdG9rZW4uYXR0cnMgICA9IFsgWyAnaHJlZicsIGZ1bGxVcmwgXSBdO1xuICAgICAgICAgIHRva2VuLmxldmVsICAgPSBsZXZlbCsrO1xuICAgICAgICAgIHRva2VuLm1hcmt1cCAgPSAnbGlua2lmeSc7XG4gICAgICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcbiAgICAgICAgICBub2Rlcy5wdXNoKHRva2VuKTtcblxuICAgICAgICAgIHRva2VuICAgICAgICAgPSBuZXcgc3RhdGUuVG9rZW4oJ3RleHQnLCAnJywgMCk7XG4gICAgICAgICAgdG9rZW4uY29udGVudCA9IHVybFRleHQ7XG4gICAgICAgICAgdG9rZW4ubGV2ZWwgICA9IGxldmVsO1xuICAgICAgICAgIG5vZGVzLnB1c2godG9rZW4pO1xuXG4gICAgICAgICAgdG9rZW4gICAgICAgICA9IG5ldyBzdGF0ZS5Ub2tlbignbGlua19jbG9zZScsICdhJywgLTEpO1xuICAgICAgICAgIHRva2VuLmxldmVsICAgPSAtLWxldmVsO1xuICAgICAgICAgIHRva2VuLm1hcmt1cCAgPSAnbGlua2lmeSc7XG4gICAgICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcbiAgICAgICAgICBub2Rlcy5wdXNoKHRva2VuKTtcblxuICAgICAgICAgIGxhc3RQb3MgPSBsaW5rc1tsbl0ubGFzdEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UG9zIDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICB0b2tlbiAgICAgICAgID0gbmV3IHN0YXRlLlRva2VuKCd0ZXh0JywgJycsIDApO1xuICAgICAgICAgIHRva2VuLmNvbnRlbnQgPSB0ZXh0LnNsaWNlKGxhc3RQb3MpO1xuICAgICAgICAgIHRva2VuLmxldmVsICAgPSBsZXZlbDtcbiAgICAgICAgICBub2Rlcy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2UgY3VycmVudCBub2RlXG4gICAgICAgIGJsb2NrVG9rZW5zW2pdLmNoaWxkcmVuID0gdG9rZW5zID0gYXJyYXlSZXBsYWNlQXQodG9rZW5zLCBpLCBub2Rlcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuIiwiLy8gU2ltcGxlIHR5cG9ncmFwaGljIHJlcGxhY2VtZW50c1xuLy9cbi8vIChjKSAoQykg4oaSIMKpXG4vLyAodG0pIChUTSkg4oaSIOKEolxuLy8gKHIpIChSKSDihpIgwq5cbi8vICstIOKGkiDCsVxuLy8gKHApIChQKSAtPiDCp1xuLy8gLi4uIOKGkiDigKYgKGFsc28gPy4uLi4g4oaSID8uLiwgIS4uLi4g4oaSICEuLilcbi8vID8/Pz8/Pz8/IOKGkiA/Pz8sICEhISEhIOKGkiAhISEsIGAsLGAg4oaSIGAsYFxuLy8gLS0g4oaSICZuZGFzaDssIC0tLSDihpIgJm1kYXNoO1xuLy9cbid1c2Ugc3RyaWN0JztcblxuLy8gVE9ETzpcbi8vIC0gZnJhY3Rpb25hbHMgMS8yLCAxLzQsIDMvNCAtPiDCvSwgwrwsIMK+XG4vLyAtIG1pbHRpcGxpY2F0aW9uIDIgeCA0IC0+IDIgw5cgNFxuXG52YXIgUkFSRV9SRSA9IC9cXCstfFxcLlxcLnxcXD9cXD9cXD9cXD98ISEhIXwsLHwtLS87XG5cbi8vIFdvcmthcm91bmQgZm9yIHBoYW50b21qcyAtIG5lZWQgcmVnZXggd2l0aG91dCAvZyBmbGFnLFxuLy8gb3Igcm9vdCBjaGVjayB3aWxsIGZhaWwgZXZlcnkgc2Vjb25kIHRpbWVcbnZhciBTQ09QRURfQUJCUl9URVNUX1JFID0gL1xcKChjfHRtfHJ8cClcXCkvaTtcblxudmFyIFNDT1BFRF9BQkJSX1JFID0gL1xcKChjfHRtfHJ8cClcXCkvaWc7XG52YXIgU0NPUEVEX0FCQlIgPSB7XG4gIGM6ICfCqScsXG4gIHI6ICfCricsXG4gIHA6ICfCpycsXG4gIHRtOiAn4oSiJ1xufTtcblxuZnVuY3Rpb24gcmVwbGFjZUZuKG1hdGNoLCBuYW1lKSB7XG4gIHJldHVybiBTQ09QRURfQUJCUltuYW1lLnRvTG93ZXJDYXNlKCldO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlX3Njb3BlZChpbmxpbmVUb2tlbnMpIHtcbiAgdmFyIGksIHRva2VuLCBpbnNpZGVfYXV0b2xpbmsgPSAwO1xuXG4gIGZvciAoaSA9IGlubGluZVRva2Vucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHRva2VuID0gaW5saW5lVG9rZW5zW2ldO1xuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICd0ZXh0JyAmJiAhaW5zaWRlX2F1dG9saW5rKSB7XG4gICAgICB0b2tlbi5jb250ZW50ID0gdG9rZW4uY29udGVudC5yZXBsYWNlKFNDT1BFRF9BQkJSX1JFLCByZXBsYWNlRm4pO1xuICAgIH1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAnbGlua19vcGVuJyAmJiB0b2tlbi5pbmZvID09PSAnYXV0bycpIHtcbiAgICAgIGluc2lkZV9hdXRvbGluay0tO1xuICAgIH1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAnbGlua19jbG9zZScgJiYgdG9rZW4uaW5mbyA9PT0gJ2F1dG8nKSB7XG4gICAgICBpbnNpZGVfYXV0b2xpbmsrKztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZV9yYXJlKGlubGluZVRva2Vucykge1xuICB2YXIgaSwgdG9rZW4sIGluc2lkZV9hdXRvbGluayA9IDA7XG5cbiAgZm9yIChpID0gaW5saW5lVG9rZW5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdG9rZW4gPSBpbmxpbmVUb2tlbnNbaV07XG5cbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3RleHQnICYmICFpbnNpZGVfYXV0b2xpbmspIHtcbiAgICAgIGlmIChSQVJFX1JFLnRlc3QodG9rZW4uY29udGVudCkpIHtcbiAgICAgICAgdG9rZW4uY29udGVudCA9IHRva2VuLmNvbnRlbnRcbiAgICAgICAgICAucmVwbGFjZSgvXFwrLS9nLCAnwrEnKVxuICAgICAgICAgIC8vIC4uLCAuLi4sIC4uLi4uLi4gLT4g4oCmXG4gICAgICAgICAgLy8gYnV0ID8uLi4uLiAmICEuLi4uLiAtPiA/Li4gJiAhLi5cbiAgICAgICAgICAucmVwbGFjZSgvXFwuezIsfS9nLCAn4oCmJykucmVwbGFjZSgvKFs/IV0p4oCmL2csICckMS4uJylcbiAgICAgICAgICAucmVwbGFjZSgvKFs/IV0pezQsfS9nLCAnJDEkMSQxJykucmVwbGFjZSgvLHsyLH0vZywgJywnKVxuICAgICAgICAgIC8vIGVtLWRhc2hcbiAgICAgICAgICAucmVwbGFjZSgvKF58W14tXSktLS0oW14tXXwkKS9tZywgJyQxXFx1MjAxNCQyJylcbiAgICAgICAgICAvLyBlbi1kYXNoXG4gICAgICAgICAgLnJlcGxhY2UoLyhefFxccyktLShcXHN8JCkvbWcsICckMVxcdTIwMTMkMicpXG4gICAgICAgICAgLnJlcGxhY2UoLyhefFteLVxcc10pLS0oW14tXFxzXXwkKS9tZywgJyQxXFx1MjAxMyQyJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICdsaW5rX29wZW4nICYmIHRva2VuLmluZm8gPT09ICdhdXRvJykge1xuICAgICAgaW5zaWRlX2F1dG9saW5rLS07XG4gICAgfVxuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICdsaW5rX2Nsb3NlJyAmJiB0b2tlbi5pbmZvID09PSAnYXV0bycpIHtcbiAgICAgIGluc2lkZV9hdXRvbGluaysrO1xuICAgIH1cbiAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwbGFjZShzdGF0ZSkge1xuICB2YXIgYmxrSWR4O1xuXG4gIGlmICghc3RhdGUubWQub3B0aW9ucy50eXBvZ3JhcGhlcikgeyByZXR1cm47IH1cblxuICBmb3IgKGJsa0lkeCA9IHN0YXRlLnRva2Vucy5sZW5ndGggLSAxOyBibGtJZHggPj0gMDsgYmxrSWR4LS0pIHtcblxuICAgIGlmIChzdGF0ZS50b2tlbnNbYmxrSWR4XS50eXBlICE9PSAnaW5saW5lJykgeyBjb250aW51ZTsgfVxuXG4gICAgaWYgKFNDT1BFRF9BQkJSX1RFU1RfUkUudGVzdChzdGF0ZS50b2tlbnNbYmxrSWR4XS5jb250ZW50KSkge1xuICAgICAgcmVwbGFjZV9zY29wZWQoc3RhdGUudG9rZW5zW2Jsa0lkeF0uY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIGlmIChSQVJFX1JFLnRlc3Qoc3RhdGUudG9rZW5zW2Jsa0lkeF0uY29udGVudCkpIHtcbiAgICAgIHJlcGxhY2VfcmFyZShzdGF0ZS50b2tlbnNbYmxrSWR4XS5jaGlsZHJlbik7XG4gICAgfVxuXG4gIH1cbn07XG4iLCIvLyBDb252ZXJ0IHN0cmFpZ2h0IHF1b3RhdGlvbiBtYXJrcyB0byB0eXBvZ3JhcGhpYyBvbmVzXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBpc1doaXRlU3BhY2UgICA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmlzV2hpdGVTcGFjZTtcbnZhciBpc1B1bmN0Q2hhciAgICA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmlzUHVuY3RDaGFyO1xudmFyIGlzTWRBc2NpaVB1bmN0ID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNNZEFzY2lpUHVuY3Q7XG5cbnZhciBRVU9URV9URVNUX1JFID0gL1snXCJdLztcbnZhciBRVU9URV9SRSA9IC9bJ1wiXS9nO1xudmFyIEFQT1NUUk9QSEUgPSAnXFx1MjAxOSc7IC8qIOKAmSAqL1xuXG5cbmZ1bmN0aW9uIHJlcGxhY2VBdChzdHIsIGluZGV4LCBjaCkge1xuICByZXR1cm4gc3RyLnN1YnN0cigwLCBpbmRleCkgKyBjaCArIHN0ci5zdWJzdHIoaW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc19pbmxpbmVzKHRva2Vucywgc3RhdGUpIHtcbiAgdmFyIGksIHRva2VuLCB0ZXh0LCB0LCBwb3MsIG1heCwgdGhpc0xldmVsLCBpdGVtLCBsYXN0Q2hhciwgbmV4dENoYXIsXG4gICAgICBpc0xhc3RQdW5jdENoYXIsIGlzTmV4dFB1bmN0Q2hhciwgaXNMYXN0V2hpdGVTcGFjZSwgaXNOZXh0V2hpdGVTcGFjZSxcbiAgICAgIGNhbk9wZW4sIGNhbkNsb3NlLCBqLCBpc1NpbmdsZSwgc3RhY2ssIG9wZW5RdW90ZSwgY2xvc2VRdW90ZTtcblxuICBzdGFjayA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIHRoaXNMZXZlbCA9IHRva2Vuc1tpXS5sZXZlbDtcblxuICAgIGZvciAoaiA9IHN0YWNrLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICBpZiAoc3RhY2tbal0ubGV2ZWwgPD0gdGhpc0xldmVsKSB7IGJyZWFrOyB9XG4gICAgfVxuICAgIHN0YWNrLmxlbmd0aCA9IGogKyAxO1xuXG4gICAgaWYgKHRva2VuLnR5cGUgIT09ICd0ZXh0JykgeyBjb250aW51ZTsgfVxuXG4gICAgdGV4dCA9IHRva2VuLmNvbnRlbnQ7XG4gICAgcG9zID0gMDtcbiAgICBtYXggPSB0ZXh0Lmxlbmd0aDtcblxuICAgIC8qZXNsaW50IG5vLWxhYmVsczowLGJsb2NrLXNjb3BlZC12YXI6MCovXG4gICAgT1VURVI6XG4gICAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgICAgUVVPVEVfUkUubGFzdEluZGV4ID0gcG9zO1xuICAgICAgdCA9IFFVT1RFX1JFLmV4ZWModGV4dCk7XG4gICAgICBpZiAoIXQpIHsgYnJlYWs7IH1cblxuICAgICAgY2FuT3BlbiA9IGNhbkNsb3NlID0gdHJ1ZTtcbiAgICAgIHBvcyA9IHQuaW5kZXggKyAxO1xuICAgICAgaXNTaW5nbGUgPSAodFswXSA9PT0gXCInXCIpO1xuXG4gICAgICAvLyBGaW5kIHByZXZpb3VzIGNoYXJhY3RlcixcbiAgICAgIC8vIGRlZmF1bHQgdG8gc3BhY2UgaWYgaXQncyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5lXG4gICAgICAvL1xuICAgICAgbGFzdENoYXIgPSAweDIwO1xuXG4gICAgICBpZiAodC5pbmRleCAtIDEgPj0gMCkge1xuICAgICAgICBsYXN0Q2hhciA9IHRleHQuY2hhckNvZGVBdCh0LmluZGV4IC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGogPSBpIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBpZiAodG9rZW5zW2pdLnR5cGUgPT09ICdzb2Z0YnJlYWsnIHx8IHRva2Vuc1tqXS50eXBlID09PSAnaGFyZGJyZWFrJykgYnJlYWs7IC8vIGxhc3RDaGFyIGRlZmF1bHRzIHRvIDB4MjBcbiAgICAgICAgICBpZiAodG9rZW5zW2pdLnR5cGUgIT09ICd0ZXh0JykgY29udGludWU7XG5cbiAgICAgICAgICBsYXN0Q2hhciA9IHRva2Vuc1tqXS5jb250ZW50LmNoYXJDb2RlQXQodG9rZW5zW2pdLmNvbnRlbnQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBuZXh0IGNoYXJhY3RlcixcbiAgICAgIC8vIGRlZmF1bHQgdG8gc3BhY2UgaWYgaXQncyB0aGUgZW5kIG9mIHRoZSBsaW5lXG4gICAgICAvL1xuICAgICAgbmV4dENoYXIgPSAweDIwO1xuXG4gICAgICBpZiAocG9zIDwgbWF4KSB7XG4gICAgICAgIG5leHRDaGFyID0gdGV4dC5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGogPSBpICsgMTsgaiA8IHRva2Vucy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmICh0b2tlbnNbal0udHlwZSA9PT0gJ3NvZnRicmVhaycgfHwgdG9rZW5zW2pdLnR5cGUgPT09ICdoYXJkYnJlYWsnKSBicmVhazsgLy8gbmV4dENoYXIgZGVmYXVsdHMgdG8gMHgyMFxuICAgICAgICAgIGlmICh0b2tlbnNbal0udHlwZSAhPT0gJ3RleHQnKSBjb250aW51ZTtcblxuICAgICAgICAgIG5leHRDaGFyID0gdG9rZW5zW2pdLmNvbnRlbnQuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpc0xhc3RQdW5jdENoYXIgPSBpc01kQXNjaWlQdW5jdChsYXN0Q2hhcikgfHwgaXNQdW5jdENoYXIoU3RyaW5nLmZyb21DaGFyQ29kZShsYXN0Q2hhcikpO1xuICAgICAgaXNOZXh0UHVuY3RDaGFyID0gaXNNZEFzY2lpUHVuY3QobmV4dENoYXIpIHx8IGlzUHVuY3RDaGFyKFN0cmluZy5mcm9tQ2hhckNvZGUobmV4dENoYXIpKTtcblxuICAgICAgaXNMYXN0V2hpdGVTcGFjZSA9IGlzV2hpdGVTcGFjZShsYXN0Q2hhcik7XG4gICAgICBpc05leHRXaGl0ZVNwYWNlID0gaXNXaGl0ZVNwYWNlKG5leHRDaGFyKTtcblxuICAgICAgaWYgKGlzTmV4dFdoaXRlU3BhY2UpIHtcbiAgICAgICAgY2FuT3BlbiA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChpc05leHRQdW5jdENoYXIpIHtcbiAgICAgICAgaWYgKCEoaXNMYXN0V2hpdGVTcGFjZSB8fCBpc0xhc3RQdW5jdENoYXIpKSB7XG4gICAgICAgICAgY2FuT3BlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xhc3RXaGl0ZVNwYWNlKSB7XG4gICAgICAgIGNhbkNsb3NlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGlzTGFzdFB1bmN0Q2hhcikge1xuICAgICAgICBpZiAoIShpc05leHRXaGl0ZVNwYWNlIHx8IGlzTmV4dFB1bmN0Q2hhcikpIHtcbiAgICAgICAgICBjYW5DbG9zZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0Q2hhciA9PT0gMHgyMiAvKiBcIiAqLyAmJiB0WzBdID09PSAnXCInKSB7XG4gICAgICAgIGlmIChsYXN0Q2hhciA+PSAweDMwIC8qIDAgKi8gJiYgbGFzdENoYXIgPD0gMHgzOSAvKiA5ICovKSB7XG4gICAgICAgICAgLy8gc3BlY2lhbCBjYXNlOiAxXCJcIiAtIGNvdW50IGZpcnN0IHF1b3RlIGFzIGFuIGluY2hcbiAgICAgICAgICBjYW5DbG9zZSA9IGNhbk9wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2FuT3BlbiAmJiBjYW5DbG9zZSkge1xuICAgICAgICAvLyB0cmVhdCB0aGlzIGFzIHRoZSBtaWRkbGUgb2YgdGhlIHdvcmRcbiAgICAgICAgY2FuT3BlbiA9IGZhbHNlO1xuICAgICAgICBjYW5DbG9zZSA9IGlzTmV4dFB1bmN0Q2hhcjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjYW5PcGVuICYmICFjYW5DbG9zZSkge1xuICAgICAgICAvLyBtaWRkbGUgb2Ygd29yZFxuICAgICAgICBpZiAoaXNTaW5nbGUpIHtcbiAgICAgICAgICB0b2tlbi5jb250ZW50ID0gcmVwbGFjZUF0KHRva2VuLmNvbnRlbnQsIHQuaW5kZXgsIEFQT1NUUk9QSEUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FuQ2xvc2UpIHtcbiAgICAgICAgLy8gdGhpcyBjb3VsZCBiZSBhIGNsb3NpbmcgcXVvdGUsIHJld2luZCB0aGUgc3RhY2sgdG8gZ2V0IGEgbWF0Y2hcbiAgICAgICAgZm9yIChqID0gc3RhY2subGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBpdGVtID0gc3RhY2tbal07XG4gICAgICAgICAgaWYgKHN0YWNrW2pdLmxldmVsIDwgdGhpc0xldmVsKSB7IGJyZWFrOyB9XG4gICAgICAgICAgaWYgKGl0ZW0uc2luZ2xlID09PSBpc1NpbmdsZSAmJiBzdGFja1tqXS5sZXZlbCA9PT0gdGhpc0xldmVsKSB7XG4gICAgICAgICAgICBpdGVtID0gc3RhY2tbal07XG5cbiAgICAgICAgICAgIGlmIChpc1NpbmdsZSkge1xuICAgICAgICAgICAgICBvcGVuUXVvdGUgPSBzdGF0ZS5tZC5vcHRpb25zLnF1b3Rlc1syXTtcbiAgICAgICAgICAgICAgY2xvc2VRdW90ZSA9IHN0YXRlLm1kLm9wdGlvbnMucXVvdGVzWzNdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3BlblF1b3RlID0gc3RhdGUubWQub3B0aW9ucy5xdW90ZXNbMF07XG4gICAgICAgICAgICAgIGNsb3NlUXVvdGUgPSBzdGF0ZS5tZC5vcHRpb25zLnF1b3Rlc1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVwbGFjZSB0b2tlbi5jb250ZW50ICpiZWZvcmUqIHRva2Vuc1tpdGVtLnRva2VuXS5jb250ZW50LFxuICAgICAgICAgICAgLy8gYmVjYXVzZSwgaWYgdGhleSBhcmUgcG9pbnRpbmcgYXQgdGhlIHNhbWUgdG9rZW4sIHJlcGxhY2VBdFxuICAgICAgICAgICAgLy8gY291bGQgbWVzcyB1cCBpbmRpY2VzIHdoZW4gcXVvdGUgbGVuZ3RoICE9IDFcbiAgICAgICAgICAgIHRva2VuLmNvbnRlbnQgPSByZXBsYWNlQXQodG9rZW4uY29udGVudCwgdC5pbmRleCwgY2xvc2VRdW90ZSk7XG4gICAgICAgICAgICB0b2tlbnNbaXRlbS50b2tlbl0uY29udGVudCA9IHJlcGxhY2VBdChcbiAgICAgICAgICAgICAgdG9rZW5zW2l0ZW0udG9rZW5dLmNvbnRlbnQsIGl0ZW0ucG9zLCBvcGVuUXVvdGUpO1xuXG4gICAgICAgICAgICBwb3MgKz0gY2xvc2VRdW90ZS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKGl0ZW0udG9rZW4gPT09IGkpIHsgcG9zICs9IG9wZW5RdW90ZS5sZW5ndGggLSAxOyB9XG5cbiAgICAgICAgICAgIHRleHQgPSB0b2tlbi5jb250ZW50O1xuICAgICAgICAgICAgbWF4ID0gdGV4dC5sZW5ndGg7XG5cbiAgICAgICAgICAgIHN0YWNrLmxlbmd0aCA9IGo7XG4gICAgICAgICAgICBjb250aW51ZSBPVVRFUjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNhbk9wZW4pIHtcbiAgICAgICAgc3RhY2sucHVzaCh7XG4gICAgICAgICAgdG9rZW46IGksXG4gICAgICAgICAgcG9zOiB0LmluZGV4LFxuICAgICAgICAgIHNpbmdsZTogaXNTaW5nbGUsXG4gICAgICAgICAgbGV2ZWw6IHRoaXNMZXZlbFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoY2FuQ2xvc2UgJiYgaXNTaW5nbGUpIHtcbiAgICAgICAgdG9rZW4uY29udGVudCA9IHJlcGxhY2VBdCh0b2tlbi5jb250ZW50LCB0LmluZGV4LCBBUE9TVFJPUEhFKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNtYXJ0cXVvdGVzKHN0YXRlKSB7XG4gIC8qZXNsaW50IG1heC1kZXB0aDowKi9cbiAgdmFyIGJsa0lkeDtcblxuICBpZiAoIXN0YXRlLm1kLm9wdGlvbnMudHlwb2dyYXBoZXIpIHsgcmV0dXJuOyB9XG5cbiAgZm9yIChibGtJZHggPSBzdGF0ZS50b2tlbnMubGVuZ3RoIC0gMTsgYmxrSWR4ID49IDA7IGJsa0lkeC0tKSB7XG5cbiAgICBpZiAoc3RhdGUudG9rZW5zW2Jsa0lkeF0udHlwZSAhPT0gJ2lubGluZScgfHxcbiAgICAgICAgIVFVT1RFX1RFU1RfUkUudGVzdChzdGF0ZS50b2tlbnNbYmxrSWR4XS5jb250ZW50KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcHJvY2Vzc19pbmxpbmVzKHN0YXRlLnRva2Vuc1tibGtJZHhdLmNoaWxkcmVuLCBzdGF0ZSk7XG4gIH1cbn07XG4iLCIvLyBDb3JlIHN0YXRlIG9iamVjdFxuLy9cbid1c2Ugc3RyaWN0JztcblxudmFyIFRva2VuID0gcmVxdWlyZSgnLi4vdG9rZW4nKTtcblxuXG5mdW5jdGlvbiBTdGF0ZUNvcmUoc3JjLCBtZCwgZW52KSB7XG4gIHRoaXMuc3JjID0gc3JjO1xuICB0aGlzLmVudiA9IGVudjtcbiAgdGhpcy50b2tlbnMgPSBbXTtcbiAgdGhpcy5pbmxpbmVNb2RlID0gZmFsc2U7XG4gIHRoaXMubWQgPSBtZDsgLy8gbGluayB0byBwYXJzZXIgaW5zdGFuY2Vcbn1cblxuLy8gcmUtZXhwb3J0IFRva2VuIGNsYXNzIHRvIHVzZSBpbiBjb3JlIHJ1bGVzXG5TdGF0ZUNvcmUucHJvdG90eXBlLlRva2VuID0gVG9rZW47XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTdGF0ZUNvcmU7XG4iLCIvKiogaW50ZXJuYWxcbiAqIGNsYXNzIFBhcnNlckJsb2NrXG4gKlxuICogQmxvY2stbGV2ZWwgdG9rZW5pemVyLlxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBSdWxlciAgICAgICAgICAgPSByZXF1aXJlKCcuL3J1bGVyJyk7XG5cblxudmFyIF9ydWxlcyA9IFtcbiAgLy8gRmlyc3QgMiBwYXJhbXMgLSBydWxlIG5hbWUgJiBzb3VyY2UuIFNlY29uZGFyeSBhcnJheSAtIGxpc3Qgb2YgcnVsZXMsXG4gIC8vIHdoaWNoIGNhbiBiZSB0ZXJtaW5hdGVkIGJ5IHRoaXMgb25lLlxuICBbICd0YWJsZScsICAgICAgcmVxdWlyZSgnLi9ydWxlc19ibG9jay90YWJsZScpLCAgICAgIFsgJ3BhcmFncmFwaCcsICdyZWZlcmVuY2UnIF0gXSxcbiAgWyAnY29kZScsICAgICAgIHJlcXVpcmUoJy4vcnVsZXNfYmxvY2svY29kZScpIF0sXG4gIFsgJ2ZlbmNlJywgICAgICByZXF1aXJlKCcuL3J1bGVzX2Jsb2NrL2ZlbmNlJyksICAgICAgWyAncGFyYWdyYXBoJywgJ3JlZmVyZW5jZScsICdibG9ja3F1b3RlJywgJ2xpc3QnIF0gXSxcbiAgWyAnYmxvY2txdW90ZScsIHJlcXVpcmUoJy4vcnVsZXNfYmxvY2svYmxvY2txdW90ZScpLCBbICdwYXJhZ3JhcGgnLCAncmVmZXJlbmNlJywgJ2Jsb2NrcXVvdGUnLCAnbGlzdCcgXSBdLFxuICBbICdocicsICAgICAgICAgcmVxdWlyZSgnLi9ydWxlc19ibG9jay9ocicpLCAgICAgICAgIFsgJ3BhcmFncmFwaCcsICdyZWZlcmVuY2UnLCAnYmxvY2txdW90ZScsICdsaXN0JyBdIF0sXG4gIFsgJ2xpc3QnLCAgICAgICByZXF1aXJlKCcuL3J1bGVzX2Jsb2NrL2xpc3QnKSwgICAgICAgWyAncGFyYWdyYXBoJywgJ3JlZmVyZW5jZScsICdibG9ja3F1b3RlJyBdIF0sXG4gIFsgJ3JlZmVyZW5jZScsICByZXF1aXJlKCcuL3J1bGVzX2Jsb2NrL3JlZmVyZW5jZScpIF0sXG4gIFsgJ2hlYWRpbmcnLCAgICByZXF1aXJlKCcuL3J1bGVzX2Jsb2NrL2hlYWRpbmcnKSwgICAgWyAncGFyYWdyYXBoJywgJ3JlZmVyZW5jZScsICdibG9ja3F1b3RlJyBdIF0sXG4gIFsgJ2xoZWFkaW5nJywgICByZXF1aXJlKCcuL3J1bGVzX2Jsb2NrL2xoZWFkaW5nJykgXSxcbiAgWyAnaHRtbF9ibG9jaycsIHJlcXVpcmUoJy4vcnVsZXNfYmxvY2svaHRtbF9ibG9jaycpLCBbICdwYXJhZ3JhcGgnLCAncmVmZXJlbmNlJywgJ2Jsb2NrcXVvdGUnIF0gXSxcbiAgWyAncGFyYWdyYXBoJywgIHJlcXVpcmUoJy4vcnVsZXNfYmxvY2svcGFyYWdyYXBoJykgXVxuXTtcblxuXG4vKipcbiAqIG5ldyBQYXJzZXJCbG9jaygpXG4gKiovXG5mdW5jdGlvbiBQYXJzZXJCbG9jaygpIHtcbiAgLyoqXG4gICAqIFBhcnNlckJsb2NrI3J1bGVyIC0+IFJ1bGVyXG4gICAqXG4gICAqIFtbUnVsZXJdXSBpbnN0YW5jZS4gS2VlcCBjb25maWd1cmF0aW9uIG9mIGJsb2NrIHJ1bGVzLlxuICAgKiovXG4gIHRoaXMucnVsZXIgPSBuZXcgUnVsZXIoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IF9ydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucnVsZXIucHVzaChfcnVsZXNbaV1bMF0sIF9ydWxlc1tpXVsxXSwgeyBhbHQ6IChfcnVsZXNbaV1bMl0gfHwgW10pLnNsaWNlKCkgfSk7XG4gIH1cbn1cblxuXG4vLyBHZW5lcmF0ZSB0b2tlbnMgZm9yIGlucHV0IHJhbmdlXG4vL1xuUGFyc2VyQmxvY2sucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUpIHtcbiAgdmFyIG9rLCBpLFxuICAgICAgcnVsZXMgPSB0aGlzLnJ1bGVyLmdldFJ1bGVzKCcnKSxcbiAgICAgIGxlbiA9IHJ1bGVzLmxlbmd0aCxcbiAgICAgIGxpbmUgPSBzdGFydExpbmUsXG4gICAgICBoYXNFbXB0eUxpbmVzID0gZmFsc2UsXG4gICAgICBtYXhOZXN0aW5nID0gc3RhdGUubWQub3B0aW9ucy5tYXhOZXN0aW5nO1xuXG4gIHdoaWxlIChsaW5lIDwgZW5kTGluZSkge1xuICAgIHN0YXRlLmxpbmUgPSBsaW5lID0gc3RhdGUuc2tpcEVtcHR5TGluZXMobGluZSk7XG4gICAgaWYgKGxpbmUgPj0gZW5kTGluZSkgeyBicmVhazsgfVxuXG4gICAgLy8gVGVybWluYXRpb24gY29uZGl0aW9uIGZvciBuZXN0ZWQgY2FsbHMuXG4gICAgLy8gTmVzdGVkIGNhbGxzIGN1cnJlbnRseSB1c2VkIGZvciBibG9ja3F1b3RlcyAmIGxpc3RzXG4gICAgaWYgKHN0YXRlLnNDb3VudFtsaW5lXSA8IHN0YXRlLmJsa0luZGVudCkgeyBicmVhazsgfVxuXG4gICAgLy8gSWYgbmVzdGluZyBsZXZlbCBleGNlZWRlZCAtIHNraXAgdGFpbCB0byB0aGUgZW5kLiBUaGF0J3Mgbm90IG9yZGluYXJ5XG4gICAgLy8gc2l0dWF0aW9uIGFuZCB3ZSBzaG91bGQgbm90IGNhcmUgYWJvdXQgY29udGVudC5cbiAgICBpZiAoc3RhdGUubGV2ZWwgPj0gbWF4TmVzdGluZykge1xuICAgICAgc3RhdGUubGluZSA9IGVuZExpbmU7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBUcnkgYWxsIHBvc3NpYmxlIHJ1bGVzLlxuICAgIC8vIE9uIHN1Y2Nlc3MsIHJ1bGUgc2hvdWxkOlxuICAgIC8vXG4gICAgLy8gLSB1cGRhdGUgYHN0YXRlLmxpbmVgXG4gICAgLy8gLSB1cGRhdGUgYHN0YXRlLnRva2Vuc2BcbiAgICAvLyAtIHJldHVybiB0cnVlXG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG9rID0gcnVsZXNbaV0oc3RhdGUsIGxpbmUsIGVuZExpbmUsIGZhbHNlKTtcbiAgICAgIGlmIChvaykgeyBicmVhazsgfVxuICAgIH1cblxuICAgIC8vIHNldCBzdGF0ZS50aWdodCBpZiB3ZSBoYWQgYW4gZW1wdHkgbGluZSBiZWZvcmUgY3VycmVudCB0YWdcbiAgICAvLyBpLmUuIGxhdGVzdCBlbXB0eSBsaW5lIHNob3VsZCBub3QgY291bnRcbiAgICBzdGF0ZS50aWdodCA9ICFoYXNFbXB0eUxpbmVzO1xuXG4gICAgLy8gcGFyYWdyYXBoIG1pZ2h0IFwiZWF0XCIgb25lIG5ld2xpbmUgYWZ0ZXIgaXQgaW4gbmVzdGVkIGxpc3RzXG4gICAgaWYgKHN0YXRlLmlzRW1wdHkoc3RhdGUubGluZSAtIDEpKSB7XG4gICAgICBoYXNFbXB0eUxpbmVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsaW5lID0gc3RhdGUubGluZTtcblxuICAgIGlmIChsaW5lIDwgZW5kTGluZSAmJiBzdGF0ZS5pc0VtcHR5KGxpbmUpKSB7XG4gICAgICBoYXNFbXB0eUxpbmVzID0gdHJ1ZTtcbiAgICAgIGxpbmUrKztcbiAgICAgIHN0YXRlLmxpbmUgPSBsaW5lO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIFBhcnNlckJsb2NrLnBhcnNlKHN0ciwgbWQsIGVudiwgb3V0VG9rZW5zKVxuICpcbiAqIFByb2Nlc3MgaW5wdXQgc3RyaW5nIGFuZCBwdXNoIGJsb2NrIHRva2VucyBpbnRvIGBvdXRUb2tlbnNgXG4gKiovXG5QYXJzZXJCbG9jay5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoc3JjLCBtZCwgZW52LCBvdXRUb2tlbnMpIHtcbiAgdmFyIHN0YXRlO1xuXG4gIGlmICghc3JjKSB7IHJldHVybjsgfVxuXG4gIHN0YXRlID0gbmV3IHRoaXMuU3RhdGUoc3JjLCBtZCwgZW52LCBvdXRUb2tlbnMpO1xuXG4gIHRoaXMudG9rZW5pemUoc3RhdGUsIHN0YXRlLmxpbmUsIHN0YXRlLmxpbmVNYXgpO1xufTtcblxuXG5QYXJzZXJCbG9jay5wcm90b3R5cGUuU3RhdGUgPSByZXF1aXJlKCcuL3J1bGVzX2Jsb2NrL3N0YXRlX2Jsb2NrJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXJCbG9jaztcbiIsIi8vIEdGTSB0YWJsZSwgbm9uLXN0YW5kYXJkXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzU3BhY2UgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS5pc1NwYWNlO1xuXG5cbmZ1bmN0aW9uIGdldExpbmUoc3RhdGUsIGxpbmUpIHtcbiAgdmFyIHBvcyA9IHN0YXRlLmJNYXJrc1tsaW5lXSArIHN0YXRlLmJsa0luZGVudCxcbiAgICAgIG1heCA9IHN0YXRlLmVNYXJrc1tsaW5lXTtcblxuICByZXR1cm4gc3RhdGUuc3JjLnN1YnN0cihwb3MsIG1heCAtIHBvcyk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWRTcGxpdChzdHIpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgcG9zID0gMCxcbiAgICAgIG1heCA9IHN0ci5sZW5ndGgsXG4gICAgICBjaCxcbiAgICAgIGVzY2FwZXMgPSAwLFxuICAgICAgbGFzdFBvcyA9IDAsXG4gICAgICBiYWNrVGlja2VkID0gZmFsc2UsXG4gICAgICBsYXN0QmFja1RpY2sgPSAwO1xuXG4gIGNoICA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgIGlmIChjaCA9PT0gMHg2MC8qIGAgKi8pIHtcbiAgICAgIGlmIChiYWNrVGlja2VkKSB7XG4gICAgICAgIC8vIG1ha2UgXFxgIGNsb3NlIGNvZGUgc2VxdWVuY2UsIGJ1dCBub3Qgb3BlbiBpdDtcbiAgICAgICAgLy8gdGhlIHJlYXNvbiBpczogYFxcYCBpcyBjb3JyZWN0IGNvZGUgYmxvY2tcbiAgICAgICAgYmFja1RpY2tlZCA9IGZhbHNlO1xuICAgICAgICBsYXN0QmFja1RpY2sgPSBwb3M7XG4gICAgICB9IGVsc2UgaWYgKGVzY2FwZXMgJSAyID09PSAwKSB7XG4gICAgICAgIGJhY2tUaWNrZWQgPSB0cnVlO1xuICAgICAgICBsYXN0QmFja1RpY2sgPSBwb3M7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHg3Yy8qIHwgKi8gJiYgKGVzY2FwZXMgJSAyID09PSAwKSAmJiAhYmFja1RpY2tlZCkge1xuICAgICAgcmVzdWx0LnB1c2goc3RyLnN1YnN0cmluZyhsYXN0UG9zLCBwb3MpKTtcbiAgICAgIGxhc3RQb3MgPSBwb3MgKyAxO1xuICAgIH1cblxuICAgIGlmIChjaCA9PT0gMHg1Yy8qIFxcICovKSB7XG4gICAgICBlc2NhcGVzKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVzY2FwZXMgPSAwO1xuICAgIH1cblxuICAgIHBvcysrO1xuXG4gICAgLy8gSWYgdGhlcmUgd2FzIGFuIHVuLWNsb3NlZCBiYWNrdGljaywgZ28gYmFjayB0byBqdXN0IGFmdGVyXG4gICAgLy8gdGhlIGxhc3QgYmFja3RpY2ssIGJ1dCBhcyBpZiBpdCB3YXMgYSBub3JtYWwgY2hhcmFjdGVyXG4gICAgaWYgKHBvcyA9PT0gbWF4ICYmIGJhY2tUaWNrZWQpIHtcbiAgICAgIGJhY2tUaWNrZWQgPSBmYWxzZTtcbiAgICAgIHBvcyA9IGxhc3RCYWNrVGljayArIDE7XG4gICAgfVxuXG4gICAgY2ggPSBzdHIuY2hhckNvZGVBdChwb3MpO1xuICB9XG5cbiAgcmVzdWx0LnB1c2goc3RyLnN1YnN0cmluZyhsYXN0UG9zKSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRhYmxlKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHNpbGVudCkge1xuICB2YXIgY2gsIGxpbmVUZXh0LCBwb3MsIGksIG5leHRMaW5lLCBjb2x1bW5zLCBjb2x1bW5Db3VudCwgdG9rZW4sXG4gICAgICBhbGlnbnMsIHQsIHRhYmxlTGluZXMsIHRib2R5TGluZXM7XG5cbiAgLy8gc2hvdWxkIGhhdmUgYXQgbGVhc3QgdHdvIGxpbmVzXG4gIGlmIChzdGFydExpbmUgKyAyID4gZW5kTGluZSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBuZXh0TGluZSA9IHN0YXJ0TGluZSArIDE7XG5cbiAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPCBzdGF0ZS5ibGtJbmRlbnQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPj0gNCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHNlY29uZCBsaW5lIHNob3VsZCBiZSAnfCcsICctJywgJzonLFxuICAvLyBhbmQgbm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgYWxsb3dlZCBidXQgc3BhY2VzO1xuICAvLyBiYXNpY2FsbHksIHRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgb2YgL15bLTp8XVstOnxcXHNdKiQvIHJlZ2V4cFxuXG4gIHBvcyA9IHN0YXRlLmJNYXJrc1tuZXh0TGluZV0gKyBzdGF0ZS50U2hpZnRbbmV4dExpbmVdO1xuICBpZiAocG9zID49IHN0YXRlLmVNYXJrc1tuZXh0TGluZV0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MrKyk7XG4gIGlmIChjaCAhPT0gMHg3Qy8qIHwgKi8gJiYgY2ggIT09IDB4MkQvKiAtICovICYmIGNoICE9PSAweDNBLyogOiAqLykgeyByZXR1cm4gZmFsc2U7IH1cblxuICB3aGlsZSAocG9zIDwgc3RhdGUuZU1hcmtzW25leHRMaW5lXSkge1xuICAgIGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcblxuICAgIGlmIChjaCAhPT0gMHg3Qy8qIHwgKi8gJiYgY2ggIT09IDB4MkQvKiAtICovICYmIGNoICE9PSAweDNBLyogOiAqLyAmJiAhaXNTcGFjZShjaCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICBwb3MrKztcbiAgfVxuXG4gIGxpbmVUZXh0ID0gZ2V0TGluZShzdGF0ZSwgc3RhcnRMaW5lICsgMSk7XG5cbiAgY29sdW1ucyA9IGxpbmVUZXh0LnNwbGl0KCd8Jyk7XG4gIGFsaWducyA9IFtdO1xuICBmb3IgKGkgPSAwOyBpIDwgY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgIHQgPSBjb2x1bW5zW2ldLnRyaW0oKTtcbiAgICBpZiAoIXQpIHtcbiAgICAgIC8vIGFsbG93IGVtcHR5IGNvbHVtbnMgYmVmb3JlIGFuZCBhZnRlciB0YWJsZSwgYnV0IG5vdCBpbiBiZXR3ZWVuIGNvbHVtbnM7XG4gICAgICAvLyBlLmcuIGFsbG93IGAgfC0tLXwgYCwgZGlzYWxsb3cgYCAtLS18fC0tLSBgXG4gICAgICBpZiAoaSA9PT0gMCB8fCBpID09PSBjb2x1bW5zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEvXjo/LSs6PyQvLnRlc3QodCkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaWYgKHQuY2hhckNvZGVBdCh0Lmxlbmd0aCAtIDEpID09PSAweDNBLyogOiAqLykge1xuICAgICAgYWxpZ25zLnB1c2godC5jaGFyQ29kZUF0KDApID09PSAweDNBLyogOiAqLyA/ICdjZW50ZXInIDogJ3JpZ2h0Jyk7XG4gICAgfSBlbHNlIGlmICh0LmNoYXJDb2RlQXQoMCkgPT09IDB4M0EvKiA6ICovKSB7XG4gICAgICBhbGlnbnMucHVzaCgnbGVmdCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbGlnbnMucHVzaCgnJyk7XG4gICAgfVxuICB9XG5cbiAgbGluZVRleHQgPSBnZXRMaW5lKHN0YXRlLCBzdGFydExpbmUpLnRyaW0oKTtcbiAgaWYgKGxpbmVUZXh0LmluZGV4T2YoJ3wnKSA9PT0gLTEpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmIChzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IHJldHVybiBmYWxzZTsgfVxuICBjb2x1bW5zID0gZXNjYXBlZFNwbGl0KGxpbmVUZXh0LnJlcGxhY2UoL15cXHx8XFx8JC9nLCAnJykpO1xuXG4gIC8vIGhlYWRlciByb3cgd2lsbCBkZWZpbmUgYW4gYW1vdW50IG9mIGNvbHVtbnMgaW4gdGhlIGVudGlyZSB0YWJsZSxcbiAgLy8gYW5kIGFsaWduIHJvdyBzaG91bGRuJ3QgYmUgc21hbGxlciB0aGFuIHRoYXQgKHRoZSByZXN0IG9mIHRoZSByb3dzIGNhbilcbiAgY29sdW1uQ291bnQgPSBjb2x1bW5zLmxlbmd0aDtcbiAgaWYgKGNvbHVtbkNvdW50ID4gYWxpZ25zLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAoc2lsZW50KSB7IHJldHVybiB0cnVlOyB9XG5cbiAgdG9rZW4gICAgID0gc3RhdGUucHVzaCgndGFibGVfb3BlbicsICd0YWJsZScsIDEpO1xuICB0b2tlbi5tYXAgPSB0YWJsZUxpbmVzID0gWyBzdGFydExpbmUsIDAgXTtcblxuICB0b2tlbiAgICAgPSBzdGF0ZS5wdXNoKCd0aGVhZF9vcGVuJywgJ3RoZWFkJywgMSk7XG4gIHRva2VuLm1hcCA9IFsgc3RhcnRMaW5lLCBzdGFydExpbmUgKyAxIF07XG5cbiAgdG9rZW4gICAgID0gc3RhdGUucHVzaCgndHJfb3BlbicsICd0cicsIDEpO1xuICB0b2tlbi5tYXAgPSBbIHN0YXJ0TGluZSwgc3RhcnRMaW5lICsgMSBdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBjb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdG9rZW4gICAgICAgICAgPSBzdGF0ZS5wdXNoKCd0aF9vcGVuJywgJ3RoJywgMSk7XG4gICAgdG9rZW4ubWFwICAgICAgPSBbIHN0YXJ0TGluZSwgc3RhcnRMaW5lICsgMSBdO1xuICAgIGlmIChhbGlnbnNbaV0pIHtcbiAgICAgIHRva2VuLmF0dHJzICA9IFsgWyAnc3R5bGUnLCAndGV4dC1hbGlnbjonICsgYWxpZ25zW2ldIF0gXTtcbiAgICB9XG5cbiAgICB0b2tlbiAgICAgICAgICA9IHN0YXRlLnB1c2goJ2lubGluZScsICcnLCAwKTtcbiAgICB0b2tlbi5jb250ZW50ICA9IGNvbHVtbnNbaV0udHJpbSgpO1xuICAgIHRva2VuLm1hcCAgICAgID0gWyBzdGFydExpbmUsIHN0YXJ0TGluZSArIDEgXTtcbiAgICB0b2tlbi5jaGlsZHJlbiA9IFtdO1xuXG4gICAgdG9rZW4gICAgICAgICAgPSBzdGF0ZS5wdXNoKCd0aF9jbG9zZScsICd0aCcsIC0xKTtcbiAgfVxuXG4gIHRva2VuICAgICA9IHN0YXRlLnB1c2goJ3RyX2Nsb3NlJywgJ3RyJywgLTEpO1xuICB0b2tlbiAgICAgPSBzdGF0ZS5wdXNoKCd0aGVhZF9jbG9zZScsICd0aGVhZCcsIC0xKTtcblxuICB0b2tlbiAgICAgPSBzdGF0ZS5wdXNoKCd0Ym9keV9vcGVuJywgJ3Rib2R5JywgMSk7XG4gIHRva2VuLm1hcCA9IHRib2R5TGluZXMgPSBbIHN0YXJ0TGluZSArIDIsIDAgXTtcblxuICBmb3IgKG5leHRMaW5lID0gc3RhcnRMaW5lICsgMjsgbmV4dExpbmUgPCBlbmRMaW5lOyBuZXh0TGluZSsrKSB7XG4gICAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPCBzdGF0ZS5ibGtJbmRlbnQpIHsgYnJlYWs7IH1cblxuICAgIGxpbmVUZXh0ID0gZ2V0TGluZShzdGF0ZSwgbmV4dExpbmUpLnRyaW0oKTtcbiAgICBpZiAobGluZVRleHQuaW5kZXhPZignfCcpID09PSAtMSkgeyBicmVhazsgfVxuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgYnJlYWs7IH1cbiAgICBjb2x1bW5zID0gZXNjYXBlZFNwbGl0KGxpbmVUZXh0LnJlcGxhY2UoL15cXHx8XFx8JC9nLCAnJykpO1xuXG4gICAgdG9rZW4gPSBzdGF0ZS5wdXNoKCd0cl9vcGVuJywgJ3RyJywgMSk7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvbHVtbkNvdW50OyBpKyspIHtcbiAgICAgIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgndGRfb3BlbicsICd0ZCcsIDEpO1xuICAgICAgaWYgKGFsaWduc1tpXSkge1xuICAgICAgICB0b2tlbi5hdHRycyAgPSBbIFsgJ3N0eWxlJywgJ3RleHQtYWxpZ246JyArIGFsaWduc1tpXSBdIF07XG4gICAgICB9XG5cbiAgICAgIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgnaW5saW5lJywgJycsIDApO1xuICAgICAgdG9rZW4uY29udGVudCAgPSBjb2x1bW5zW2ldID8gY29sdW1uc1tpXS50cmltKCkgOiAnJztcbiAgICAgIHRva2VuLmNoaWxkcmVuID0gW107XG5cbiAgICAgIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgndGRfY2xvc2UnLCAndGQnLCAtMSk7XG4gICAgfVxuICAgIHRva2VuID0gc3RhdGUucHVzaCgndHJfY2xvc2UnLCAndHInLCAtMSk7XG4gIH1cbiAgdG9rZW4gPSBzdGF0ZS5wdXNoKCd0Ym9keV9jbG9zZScsICd0Ym9keScsIC0xKTtcbiAgdG9rZW4gPSBzdGF0ZS5wdXNoKCd0YWJsZV9jbG9zZScsICd0YWJsZScsIC0xKTtcblxuICB0YWJsZUxpbmVzWzFdID0gdGJvZHlMaW5lc1sxXSA9IG5leHRMaW5lO1xuICBzdGF0ZS5saW5lID0gbmV4dExpbmU7XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIENvZGUgYmxvY2sgKDQgc3BhY2VzIHBhZGRlZClcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29kZShzdGF0ZSwgc3RhcnRMaW5lLCBlbmRMaW5lLyosIHNpbGVudCovKSB7XG4gIHZhciBuZXh0TGluZSwgbGFzdCwgdG9rZW47XG5cbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50IDwgNCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBsYXN0ID0gbmV4dExpbmUgPSBzdGFydExpbmUgKyAxO1xuXG4gIHdoaWxlIChuZXh0TGluZSA8IGVuZExpbmUpIHtcbiAgICBpZiAoc3RhdGUuaXNFbXB0eShuZXh0TGluZSkpIHtcbiAgICAgIG5leHRMaW5lKys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7XG4gICAgICBuZXh0TGluZSsrO1xuICAgICAgbGFzdCA9IG5leHRMaW5lO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGJyZWFrO1xuICB9XG5cbiAgc3RhdGUubGluZSA9IGxhc3Q7XG5cbiAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2NvZGVfYmxvY2snLCAnY29kZScsIDApO1xuICB0b2tlbi5jb250ZW50ID0gc3RhdGUuZ2V0TGluZXMoc3RhcnRMaW5lLCBsYXN0LCA0ICsgc3RhdGUuYmxrSW5kZW50LCB0cnVlKTtcbiAgdG9rZW4ubWFwICAgICA9IFsgc3RhcnRMaW5lLCBzdGF0ZS5saW5lIF07XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gZmVuY2VzIChgYGAgbGFuZywgfn5+IGxhbmcpXG5cbid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZlbmNlKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHNpbGVudCkge1xuICB2YXIgbWFya2VyLCBsZW4sIHBhcmFtcywgbmV4dExpbmUsIG1lbSwgdG9rZW4sIG1hcmt1cCxcbiAgICAgIGhhdmVFbmRNYXJrZXIgPSBmYWxzZSxcbiAgICAgIHBvcyA9IHN0YXRlLmJNYXJrc1tzdGFydExpbmVdICsgc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV0sXG4gICAgICBtYXggPSBzdGF0ZS5lTWFya3Nbc3RhcnRMaW5lXTtcblxuICAvLyBpZiBpdCdzIGluZGVudGVkIG1vcmUgdGhhbiAzIHNwYWNlcywgaXQgc2hvdWxkIGJlIGEgY29kZSBibG9ja1xuICBpZiAoc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPj0gNCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAocG9zICsgMyA+IG1heCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpO1xuXG4gIGlmIChtYXJrZXIgIT09IDB4N0UvKiB+ICovICYmIG1hcmtlciAhPT0gMHg2MCAvKiBgICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gc2NhbiBtYXJrZXIgbGVuZ3RoXG4gIG1lbSA9IHBvcztcbiAgcG9zID0gc3RhdGUuc2tpcENoYXJzKHBvcywgbWFya2VyKTtcblxuICBsZW4gPSBwb3MgLSBtZW07XG5cbiAgaWYgKGxlbiA8IDMpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgbWFya3VwID0gc3RhdGUuc3JjLnNsaWNlKG1lbSwgcG9zKTtcbiAgcGFyYW1zID0gc3RhdGUuc3JjLnNsaWNlKHBvcywgbWF4KTtcblxuICBpZiAobWFya2VyID09PSAweDYwIC8qIGAgKi8pIHtcbiAgICBpZiAocGFyYW1zLmluZGV4T2YoU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXIpKSA+PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gU2luY2Ugc3RhcnQgaXMgZm91bmQsIHdlIGNhbiByZXBvcnQgc3VjY2VzcyBoZXJlIGluIHZhbGlkYXRpb24gbW9kZVxuICBpZiAoc2lsZW50KSB7IHJldHVybiB0cnVlOyB9XG5cbiAgLy8gc2VhcmNoIGVuZCBvZiBibG9ja1xuICBuZXh0TGluZSA9IHN0YXJ0TGluZTtcblxuICBmb3IgKDs7KSB7XG4gICAgbmV4dExpbmUrKztcbiAgICBpZiAobmV4dExpbmUgPj0gZW5kTGluZSkge1xuICAgICAgLy8gdW5jbG9zZWQgYmxvY2sgc2hvdWxkIGJlIGF1dG9jbG9zZWQgYnkgZW5kIG9mIGRvY3VtZW50LlxuICAgICAgLy8gYWxzbyBibG9jayBzZWVtcyB0byBiZSBhdXRvY2xvc2VkIGJ5IGVuZCBvZiBwYXJlbnRcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHBvcyA9IG1lbSA9IHN0YXRlLmJNYXJrc1tuZXh0TGluZV0gKyBzdGF0ZS50U2hpZnRbbmV4dExpbmVdO1xuICAgIG1heCA9IHN0YXRlLmVNYXJrc1tuZXh0TGluZV07XG5cbiAgICBpZiAocG9zIDwgbWF4ICYmIHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPCBzdGF0ZS5ibGtJbmRlbnQpIHtcbiAgICAgIC8vIG5vbi1lbXB0eSBsaW5lIHdpdGggbmVnYXRpdmUgaW5kZW50IHNob3VsZCBzdG9wIHRoZSBsaXN0OlxuICAgICAgLy8gLSBgYGBcbiAgICAgIC8vICB0ZXN0XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gbWFya2VyKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7XG4gICAgICAvLyBjbG9zaW5nIGZlbmNlIHNob3VsZCBiZSBpbmRlbnRlZCBsZXNzIHRoYW4gNCBzcGFjZXNcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHBvcyA9IHN0YXRlLnNraXBDaGFycyhwb3MsIG1hcmtlcik7XG5cbiAgICAvLyBjbG9zaW5nIGNvZGUgZmVuY2UgbXVzdCBiZSBhdCBsZWFzdCBhcyBsb25nIGFzIHRoZSBvcGVuaW5nIG9uZVxuICAgIGlmIChwb3MgLSBtZW0gPCBsZW4pIHsgY29udGludWU7IH1cblxuICAgIC8vIG1ha2Ugc3VyZSB0YWlsIGhhcyBzcGFjZXMgb25seVxuICAgIHBvcyA9IHN0YXRlLnNraXBTcGFjZXMocG9zKTtcblxuICAgIGlmIChwb3MgPCBtYXgpIHsgY29udGludWU7IH1cblxuICAgIGhhdmVFbmRNYXJrZXIgPSB0cnVlO1xuICAgIC8vIGZvdW5kIVxuICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gSWYgYSBmZW5jZSBoYXMgaGVhZGluZyBzcGFjZXMsIHRoZXkgc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSBpdHMgaW5uZXIgYmxvY2tcbiAgbGVuID0gc3RhdGUuc0NvdW50W3N0YXJ0TGluZV07XG5cbiAgc3RhdGUubGluZSA9IG5leHRMaW5lICsgKGhhdmVFbmRNYXJrZXIgPyAxIDogMCk7XG5cbiAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2ZlbmNlJywgJ2NvZGUnLCAwKTtcbiAgdG9rZW4uaW5mbyAgICA9IHBhcmFtcztcbiAgdG9rZW4uY29udGVudCA9IHN0YXRlLmdldExpbmVzKHN0YXJ0TGluZSArIDEsIG5leHRMaW5lLCBsZW4sIHRydWUpO1xuICB0b2tlbi5tYXJrdXAgID0gbWFya3VwO1xuICB0b2tlbi5tYXAgICAgID0gWyBzdGFydExpbmUsIHN0YXRlLmxpbmUgXTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBCbG9jayBxdW90ZXNcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNTcGFjZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmlzU3BhY2U7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBibG9ja3F1b3RlKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHNpbGVudCkge1xuICB2YXIgYWRqdXN0VGFiLFxuICAgICAgY2gsXG4gICAgICBpLFxuICAgICAgaW5pdGlhbCxcbiAgICAgIGwsXG4gICAgICBsYXN0TGluZUVtcHR5LFxuICAgICAgbGluZXMsXG4gICAgICBuZXh0TGluZSxcbiAgICAgIG9mZnNldCxcbiAgICAgIG9sZEJNYXJrcyxcbiAgICAgIG9sZEJTQ291bnQsXG4gICAgICBvbGRJbmRlbnQsXG4gICAgICBvbGRQYXJlbnRUeXBlLFxuICAgICAgb2xkU0NvdW50LFxuICAgICAgb2xkVFNoaWZ0LFxuICAgICAgc3BhY2VBZnRlck1hcmtlcixcbiAgICAgIHRlcm1pbmF0ZSxcbiAgICAgIHRlcm1pbmF0b3JSdWxlcyxcbiAgICAgIHRva2VuLFxuICAgICAgd2FzT3V0ZGVudGVkLFxuICAgICAgb2xkTGluZU1heCA9IHN0YXRlLmxpbmVNYXgsXG4gICAgICBwb3MgPSBzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXSArIHN0YXRlLnRTaGlmdFtzdGFydExpbmVdLFxuICAgICAgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV07XG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gY2hlY2sgdGhlIGJsb2NrIHF1b3RlIG1hcmtlclxuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKyspICE9PSAweDNFLyogPiAqLykgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyB3ZSBrbm93IHRoYXQgaXQncyBnb2luZyB0byBiZSBhIHZhbGlkIGJsb2NrcXVvdGUsXG4gIC8vIHNvIG5vIHBvaW50IHRyeWluZyB0byBmaW5kIHRoZSBlbmQgb2YgaXQgaW4gc2lsZW50IG1vZGVcbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gIC8vIHNraXAgc3BhY2VzIGFmdGVyIFwiPlwiIGFuZCByZS1jYWxjdWxhdGUgb2Zmc2V0XG4gIGluaXRpYWwgPSBvZmZzZXQgPSBzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSArIHBvcyAtIChzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXSArIHN0YXRlLnRTaGlmdFtzdGFydExpbmVdKTtcblxuICAvLyBza2lwIG9uZSBvcHRpb25hbCBzcGFjZSBhZnRlciAnPidcbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgPT09IDB4MjAgLyogc3BhY2UgKi8pIHtcbiAgICAvLyAnID4gICB0ZXN0ICdcbiAgICAvLyAgICAgXiAtLSBwb3NpdGlvbiBzdGFydCBvZiBsaW5lIGhlcmU6XG4gICAgcG9zKys7XG4gICAgaW5pdGlhbCsrO1xuICAgIG9mZnNldCsrO1xuICAgIGFkanVzdFRhYiA9IGZhbHNlO1xuICAgIHNwYWNlQWZ0ZXJNYXJrZXIgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgPT09IDB4MDkgLyogdGFiICovKSB7XG4gICAgc3BhY2VBZnRlck1hcmtlciA9IHRydWU7XG5cbiAgICBpZiAoKHN0YXRlLmJzQ291bnRbc3RhcnRMaW5lXSArIG9mZnNldCkgJSA0ID09PSAzKSB7XG4gICAgICAvLyAnICA+XFx0ICB0ZXN0ICdcbiAgICAgIC8vICAgICAgIF4gLS0gcG9zaXRpb24gc3RhcnQgb2YgbGluZSBoZXJlICh0YWIgaGFzIHdpZHRoPT09MSlcbiAgICAgIHBvcysrO1xuICAgICAgaW5pdGlhbCsrO1xuICAgICAgb2Zmc2V0Kys7XG4gICAgICBhZGp1c3RUYWIgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gJyA+XFx0ICB0ZXN0ICdcbiAgICAgIC8vICAgIF4gLS0gcG9zaXRpb24gc3RhcnQgb2YgbGluZSBoZXJlICsgc2hpZnQgYnNDb3VudCBzbGlnaHRseVxuICAgICAgLy8gICAgICAgICB0byBtYWtlIGV4dHJhIHNwYWNlIGFwcGVhclxuICAgICAgYWRqdXN0VGFiID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3BhY2VBZnRlck1hcmtlciA9IGZhbHNlO1xuICB9XG5cbiAgb2xkQk1hcmtzID0gWyBzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXSBdO1xuICBzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXSA9IHBvcztcblxuICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgaWYgKGlzU3BhY2UoY2gpKSB7XG4gICAgICBpZiAoY2ggPT09IDB4MDkpIHtcbiAgICAgICAgb2Zmc2V0ICs9IDQgLSAob2Zmc2V0ICsgc3RhdGUuYnNDb3VudFtzdGFydExpbmVdICsgKGFkanVzdFRhYiA/IDEgOiAwKSkgJSA0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0Kys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHBvcysrO1xuICB9XG5cbiAgb2xkQlNDb3VudCA9IFsgc3RhdGUuYnNDb3VudFtzdGFydExpbmVdIF07XG4gIHN0YXRlLmJzQ291bnRbc3RhcnRMaW5lXSA9IHN0YXRlLnNDb3VudFtzdGFydExpbmVdICsgMSArIChzcGFjZUFmdGVyTWFya2VyID8gMSA6IDApO1xuXG4gIGxhc3RMaW5lRW1wdHkgPSBwb3MgPj0gbWF4O1xuXG4gIG9sZFNDb3VudCA9IFsgc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gXTtcbiAgc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gPSBvZmZzZXQgLSBpbml0aWFsO1xuXG4gIG9sZFRTaGlmdCA9IFsgc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV0gXTtcbiAgc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV0gPSBwb3MgLSBzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXTtcblxuICB0ZXJtaW5hdG9yUnVsZXMgPSBzdGF0ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcygnYmxvY2txdW90ZScpO1xuXG4gIG9sZFBhcmVudFR5cGUgPSBzdGF0ZS5wYXJlbnRUeXBlO1xuICBzdGF0ZS5wYXJlbnRUeXBlID0gJ2Jsb2NrcXVvdGUnO1xuICB3YXNPdXRkZW50ZWQgPSBmYWxzZTtcblxuICAvLyBTZWFyY2ggdGhlIGVuZCBvZiB0aGUgYmxvY2tcbiAgLy9cbiAgLy8gQmxvY2sgZW5kcyB3aXRoIGVpdGhlcjpcbiAgLy8gIDEuIGFuIGVtcHR5IGxpbmUgb3V0c2lkZTpcbiAgLy8gICAgIGBgYFxuICAvLyAgICAgPiB0ZXN0XG4gIC8vXG4gIC8vICAgICBgYGBcbiAgLy8gIDIuIGFuIGVtcHR5IGxpbmUgaW5zaWRlOlxuICAvLyAgICAgYGBgXG4gIC8vICAgICA+XG4gIC8vICAgICB0ZXN0XG4gIC8vICAgICBgYGBcbiAgLy8gIDMuIGFub3RoZXIgdGFnOlxuICAvLyAgICAgYGBgXG4gIC8vICAgICA+IHRlc3RcbiAgLy8gICAgICAtIC0gLVxuICAvLyAgICAgYGBgXG4gIGZvciAobmV4dExpbmUgPSBzdGFydExpbmUgKyAxOyBuZXh0TGluZSA8IGVuZExpbmU7IG5leHRMaW5lKyspIHtcbiAgICAvLyBjaGVjayBpZiBpdCdzIG91dGRlbnRlZCwgaS5lLiBpdCdzIGluc2lkZSBsaXN0IGl0ZW0gYW5kIGluZGVudGVkXG4gICAgLy8gbGVzcyB0aGFuIHNhaWQgbGlzdCBpdGVtOlxuICAgIC8vXG4gICAgLy8gYGBgXG4gICAgLy8gMS4gYW55dGhpbmdcbiAgICAvLyAgICA+IGN1cnJlbnQgYmxvY2txdW90ZVxuICAgIC8vIDIuIGNoZWNraW5nIHRoaXMgbGluZVxuICAgIC8vIGBgYFxuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIDwgc3RhdGUuYmxrSW5kZW50KSB3YXNPdXRkZW50ZWQgPSB0cnVlO1xuXG4gICAgcG9zID0gc3RhdGUuYk1hcmtzW25leHRMaW5lXSArIHN0YXRlLnRTaGlmdFtuZXh0TGluZV07XG4gICAgbWF4ID0gc3RhdGUuZU1hcmtzW25leHRMaW5lXTtcblxuICAgIGlmIChwb3MgPj0gbWF4KSB7XG4gICAgICAvLyBDYXNlIDE6IGxpbmUgaXMgbm90IGluc2lkZSB0aGUgYmxvY2txdW90ZSwgYW5kIHRoaXMgbGluZSBpcyBlbXB0eS5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MrKykgPT09IDB4M0UvKiA+ICovICYmICF3YXNPdXRkZW50ZWQpIHtcbiAgICAgIC8vIFRoaXMgbGluZSBpcyBpbnNpZGUgdGhlIGJsb2NrcXVvdGUuXG5cbiAgICAgIC8vIHNraXAgc3BhY2VzIGFmdGVyIFwiPlwiIGFuZCByZS1jYWxjdWxhdGUgb2Zmc2V0XG4gICAgICBpbml0aWFsID0gb2Zmc2V0ID0gc3RhdGUuc0NvdW50W25leHRMaW5lXSArIHBvcyAtIChzdGF0ZS5iTWFya3NbbmV4dExpbmVdICsgc3RhdGUudFNoaWZ0W25leHRMaW5lXSk7XG5cbiAgICAgIC8vIHNraXAgb25lIG9wdGlvbmFsIHNwYWNlIGFmdGVyICc+J1xuICAgICAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgPT09IDB4MjAgLyogc3BhY2UgKi8pIHtcbiAgICAgICAgLy8gJyA+ICAgdGVzdCAnXG4gICAgICAgIC8vICAgICBeIC0tIHBvc2l0aW9uIHN0YXJ0IG9mIGxpbmUgaGVyZTpcbiAgICAgICAgcG9zKys7XG4gICAgICAgIGluaXRpYWwrKztcbiAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIGFkanVzdFRhYiA9IGZhbHNlO1xuICAgICAgICBzcGFjZUFmdGVyTWFya2VyID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHgwOSAvKiB0YWIgKi8pIHtcbiAgICAgICAgc3BhY2VBZnRlck1hcmtlciA9IHRydWU7XG5cbiAgICAgICAgaWYgKChzdGF0ZS5ic0NvdW50W25leHRMaW5lXSArIG9mZnNldCkgJSA0ID09PSAzKSB7XG4gICAgICAgICAgLy8gJyAgPlxcdCAgdGVzdCAnXG4gICAgICAgICAgLy8gICAgICAgXiAtLSBwb3NpdGlvbiBzdGFydCBvZiBsaW5lIGhlcmUgKHRhYiBoYXMgd2lkdGg9PT0xKVxuICAgICAgICAgIHBvcysrO1xuICAgICAgICAgIGluaXRpYWwrKztcbiAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICBhZGp1c3RUYWIgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyAnID5cXHQgIHRlc3QgJ1xuICAgICAgICAgIC8vICAgIF4gLS0gcG9zaXRpb24gc3RhcnQgb2YgbGluZSBoZXJlICsgc2hpZnQgYnNDb3VudCBzbGlnaHRseVxuICAgICAgICAgIC8vICAgICAgICAgdG8gbWFrZSBleHRyYSBzcGFjZSBhcHBlYXJcbiAgICAgICAgICBhZGp1c3RUYWIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGFjZUFmdGVyTWFya2VyID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIG9sZEJNYXJrcy5wdXNoKHN0YXRlLmJNYXJrc1tuZXh0TGluZV0pO1xuICAgICAgc3RhdGUuYk1hcmtzW25leHRMaW5lXSA9IHBvcztcblxuICAgICAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgICAgICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgICAgaWYgKGlzU3BhY2UoY2gpKSB7XG4gICAgICAgICAgaWYgKGNoID09PSAweDA5KSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gNCAtIChvZmZzZXQgKyBzdGF0ZS5ic0NvdW50W25leHRMaW5lXSArIChhZGp1c3RUYWIgPyAxIDogMCkpICUgNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zKys7XG4gICAgICB9XG5cbiAgICAgIGxhc3RMaW5lRW1wdHkgPSBwb3MgPj0gbWF4O1xuXG4gICAgICBvbGRCU0NvdW50LnB1c2goc3RhdGUuYnNDb3VudFtuZXh0TGluZV0pO1xuICAgICAgc3RhdGUuYnNDb3VudFtuZXh0TGluZV0gPSBzdGF0ZS5zQ291bnRbbmV4dExpbmVdICsgMSArIChzcGFjZUFmdGVyTWFya2VyID8gMSA6IDApO1xuXG4gICAgICBvbGRTQ291bnQucHVzaChzdGF0ZS5zQ291bnRbbmV4dExpbmVdKTtcbiAgICAgIHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPSBvZmZzZXQgLSBpbml0aWFsO1xuXG4gICAgICBvbGRUU2hpZnQucHVzaChzdGF0ZS50U2hpZnRbbmV4dExpbmVdKTtcbiAgICAgIHN0YXRlLnRTaGlmdFtuZXh0TGluZV0gPSBwb3MgLSBzdGF0ZS5iTWFya3NbbmV4dExpbmVdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gQ2FzZSAyOiBsaW5lIGlzIG5vdCBpbnNpZGUgdGhlIGJsb2NrcXVvdGUsIGFuZCB0aGUgbGFzdCBsaW5lIHdhcyBlbXB0eS5cbiAgICBpZiAobGFzdExpbmVFbXB0eSkgeyBicmVhazsgfVxuXG4gICAgLy8gQ2FzZSAzOiBhbm90aGVyIHRhZyBmb3VuZC5cbiAgICB0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdGVybWluYXRvclJ1bGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHRlcm1pbmF0b3JSdWxlc1tpXShzdGF0ZSwgbmV4dExpbmUsIGVuZExpbmUsIHRydWUpKSB7XG4gICAgICAgIHRlcm1pbmF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0ZXJtaW5hdGUpIHtcbiAgICAgIC8vIFF1aXJrIHRvIGVuZm9yY2UgXCJoYXJkIHRlcm1pbmF0aW9uIG1vZGVcIiBmb3IgcGFyYWdyYXBocztcbiAgICAgIC8vIG5vcm1hbGx5IGlmIHlvdSBjYWxsIGB0b2tlbml6ZShzdGF0ZSwgc3RhcnRMaW5lLCBuZXh0TGluZSlgLFxuICAgICAgLy8gcGFyYWdyYXBocyB3aWxsIGxvb2sgYmVsb3cgbmV4dExpbmUgZm9yIHBhcmFncmFwaCBjb250aW51YXRpb24sXG4gICAgICAvLyBidXQgaWYgYmxvY2txdW90ZSBpcyB0ZXJtaW5hdGVkIGJ5IGFub3RoZXIgdGFnLCB0aGV5IHNob3VsZG4ndFxuICAgICAgc3RhdGUubGluZU1heCA9IG5leHRMaW5lO1xuXG4gICAgICBpZiAoc3RhdGUuYmxrSW5kZW50ICE9PSAwKSB7XG4gICAgICAgIC8vIHN0YXRlLmJsa0luZGVudCB3YXMgbm9uLXplcm8sIHdlIG5vdyBzZXQgaXQgdG8gemVybyxcbiAgICAgICAgLy8gc28gd2UgbmVlZCB0byByZS1jYWxjdWxhdGUgYWxsIG9mZnNldHMgdG8gYXBwZWFyIGFzXG4gICAgICAgIC8vIGlmIGluZGVudCB3YXNuJ3QgY2hhbmdlZFxuICAgICAgICBvbGRCTWFya3MucHVzaChzdGF0ZS5iTWFya3NbbmV4dExpbmVdKTtcbiAgICAgICAgb2xkQlNDb3VudC5wdXNoKHN0YXRlLmJzQ291bnRbbmV4dExpbmVdKTtcbiAgICAgICAgb2xkVFNoaWZ0LnB1c2goc3RhdGUudFNoaWZ0W25leHRMaW5lXSk7XG4gICAgICAgIG9sZFNDb3VudC5wdXNoKHN0YXRlLnNDb3VudFtuZXh0TGluZV0pO1xuICAgICAgICBzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC09IHN0YXRlLmJsa0luZGVudDtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgb2xkQk1hcmtzLnB1c2goc3RhdGUuYk1hcmtzW25leHRMaW5lXSk7XG4gICAgb2xkQlNDb3VudC5wdXNoKHN0YXRlLmJzQ291bnRbbmV4dExpbmVdKTtcbiAgICBvbGRUU2hpZnQucHVzaChzdGF0ZS50U2hpZnRbbmV4dExpbmVdKTtcbiAgICBvbGRTQ291bnQucHVzaChzdGF0ZS5zQ291bnRbbmV4dExpbmVdKTtcblxuICAgIC8vIEEgbmVnYXRpdmUgaW5kZW50YXRpb24gbWVhbnMgdGhhdCB0aGlzIGlzIGEgcGFyYWdyYXBoIGNvbnRpbnVhdGlvblxuICAgIC8vXG4gICAgc3RhdGUuc0NvdW50W25leHRMaW5lXSA9IC0xO1xuICB9XG5cbiAgb2xkSW5kZW50ID0gc3RhdGUuYmxrSW5kZW50O1xuICBzdGF0ZS5ibGtJbmRlbnQgPSAwO1xuXG4gIHRva2VuICAgICAgICA9IHN0YXRlLnB1c2goJ2Jsb2NrcXVvdGVfb3BlbicsICdibG9ja3F1b3RlJywgMSk7XG4gIHRva2VuLm1hcmt1cCA9ICc+JztcbiAgdG9rZW4ubWFwICAgID0gbGluZXMgPSBbIHN0YXJ0TGluZSwgMCBdO1xuXG4gIHN0YXRlLm1kLmJsb2NrLnRva2VuaXplKHN0YXRlLCBzdGFydExpbmUsIG5leHRMaW5lKTtcblxuICB0b2tlbiAgICAgICAgPSBzdGF0ZS5wdXNoKCdibG9ja3F1b3RlX2Nsb3NlJywgJ2Jsb2NrcXVvdGUnLCAtMSk7XG4gIHRva2VuLm1hcmt1cCA9ICc+JztcblxuICBzdGF0ZS5saW5lTWF4ID0gb2xkTGluZU1heDtcbiAgc3RhdGUucGFyZW50VHlwZSA9IG9sZFBhcmVudFR5cGU7XG4gIGxpbmVzWzFdID0gc3RhdGUubGluZTtcblxuICAvLyBSZXN0b3JlIG9yaWdpbmFsIHRTaGlmdDsgdGhpcyBtaWdodCBub3QgYmUgbmVjZXNzYXJ5IHNpbmNlIHRoZSBwYXJzZXJcbiAgLy8gaGFzIGFscmVhZHkgYmVlbiBoZXJlLCBidXQganVzdCB0byBtYWtlIHN1cmUgd2UgY2FuIGRvIHRoYXQuXG4gIGZvciAoaSA9IDA7IGkgPCBvbGRUU2hpZnQubGVuZ3RoOyBpKyspIHtcbiAgICBzdGF0ZS5iTWFya3NbaSArIHN0YXJ0TGluZV0gPSBvbGRCTWFya3NbaV07XG4gICAgc3RhdGUudFNoaWZ0W2kgKyBzdGFydExpbmVdID0gb2xkVFNoaWZ0W2ldO1xuICAgIHN0YXRlLnNDb3VudFtpICsgc3RhcnRMaW5lXSA9IG9sZFNDb3VudFtpXTtcbiAgICBzdGF0ZS5ic0NvdW50W2kgKyBzdGFydExpbmVdID0gb2xkQlNDb3VudFtpXTtcbiAgfVxuICBzdGF0ZS5ibGtJbmRlbnQgPSBvbGRJbmRlbnQ7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gSG9yaXpvbnRhbCBydWxlXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzU3BhY2UgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS5pc1NwYWNlO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaHIoc3RhdGUsIHN0YXJ0TGluZSwgZW5kTGluZSwgc2lsZW50KSB7XG4gIHZhciBtYXJrZXIsIGNudCwgY2gsIHRva2VuLFxuICAgICAgcG9zID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXSxcbiAgICAgIG1heCA9IHN0YXRlLmVNYXJrc1tzdGFydExpbmVdO1xuXG4gIC8vIGlmIGl0J3MgaW5kZW50ZWQgbW9yZSB0aGFuIDMgc3BhY2VzLCBpdCBzaG91bGQgYmUgYSBjb2RlIGJsb2NrXG4gIGlmIChzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIG1hcmtlciA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcysrKTtcblxuICAvLyBDaGVjayBociBtYXJrZXJcbiAgaWYgKG1hcmtlciAhPT0gMHgyQS8qICogKi8gJiZcbiAgICAgIG1hcmtlciAhPT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIG1hcmtlciAhPT0gMHg1Ri8qIF8gKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBtYXJrZXJzIGNhbiBiZSBtaXhlZCB3aXRoIHNwYWNlcywgYnV0IHRoZXJlIHNob3VsZCBiZSBhdCBsZWFzdCAzIG9mIHRoZW1cblxuICBjbnQgPSAxO1xuICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MrKyk7XG4gICAgaWYgKGNoICE9PSBtYXJrZXIgJiYgIWlzU3BhY2UoY2gpKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmIChjaCA9PT0gbWFya2VyKSB7IGNudCsrOyB9XG4gIH1cblxuICBpZiAoY250IDwgMykgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAoc2lsZW50KSB7IHJldHVybiB0cnVlOyB9XG5cbiAgc3RhdGUubGluZSA9IHN0YXJ0TGluZSArIDE7XG5cbiAgdG9rZW4gICAgICAgID0gc3RhdGUucHVzaCgnaHInLCAnaHInLCAwKTtcbiAgdG9rZW4ubWFwICAgID0gWyBzdGFydExpbmUsIHN0YXRlLmxpbmUgXTtcbiAgdG9rZW4ubWFya3VwID0gQXJyYXkoY250ICsgMSkuam9pbihTdHJpbmcuZnJvbUNoYXJDb2RlKG1hcmtlcikpO1xuXG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIExpc3RzXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzU3BhY2UgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS5pc1NwYWNlO1xuXG5cbi8vIFNlYXJjaCBgWy0rKl1bXFxuIF1gLCByZXR1cm5zIG5leHQgcG9zIGFmdGVyIG1hcmtlciBvbiBzdWNjZXNzXG4vLyBvciAtMSBvbiBmYWlsLlxuZnVuY3Rpb24gc2tpcEJ1bGxldExpc3RNYXJrZXIoc3RhdGUsIHN0YXJ0TGluZSkge1xuICB2YXIgbWFya2VyLCBwb3MsIG1heCwgY2g7XG5cbiAgcG9zID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXTtcbiAgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV07XG5cbiAgbWFya2VyID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKyspO1xuICAvLyBDaGVjayBidWxsZXRcbiAgaWYgKG1hcmtlciAhPT0gMHgyQS8qICogKi8gJiZcbiAgICAgIG1hcmtlciAhPT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIG1hcmtlciAhPT0gMHgyQi8qICsgKi8pIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBpZiAocG9zIDwgbWF4KSB7XG4gICAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgaWYgKCFpc1NwYWNlKGNoKSkge1xuICAgICAgLy8gXCIgLXRlc3QgXCIgLSBpcyBub3QgYSBsaXN0IGl0ZW1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9zO1xufVxuXG4vLyBTZWFyY2ggYFxcZCtbLildW1xcbiBdYCwgcmV0dXJucyBuZXh0IHBvcyBhZnRlciBtYXJrZXIgb24gc3VjY2Vzc1xuLy8gb3IgLTEgb24gZmFpbC5cbmZ1bmN0aW9uIHNraXBPcmRlcmVkTGlzdE1hcmtlcihzdGF0ZSwgc3RhcnRMaW5lKSB7XG4gIHZhciBjaCxcbiAgICAgIHN0YXJ0ID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXSxcbiAgICAgIHBvcyA9IHN0YXJ0LFxuICAgICAgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV07XG5cbiAgLy8gTGlzdCBtYXJrZXIgc2hvdWxkIGhhdmUgYXQgbGVhc3QgMiBjaGFycyAoZGlnaXQgKyBkb3QpXG4gIGlmIChwb3MgKyAxID49IG1heCkgeyByZXR1cm4gLTE7IH1cblxuICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcysrKTtcblxuICBpZiAoY2ggPCAweDMwLyogMCAqLyB8fCBjaCA+IDB4MzkvKiA5ICovKSB7IHJldHVybiAtMTsgfVxuXG4gIGZvciAoOzspIHtcbiAgICAvLyBFT0wgLT4gZmFpbFxuICAgIGlmIChwb3MgPj0gbWF4KSB7IHJldHVybiAtMTsgfVxuXG4gICAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MrKyk7XG5cbiAgICBpZiAoY2ggPj0gMHgzMC8qIDAgKi8gJiYgY2ggPD0gMHgzOS8qIDkgKi8pIHtcblxuICAgICAgLy8gTGlzdCBtYXJrZXIgc2hvdWxkIGhhdmUgbm8gbW9yZSB0aGFuIDkgZGlnaXRzXG4gICAgICAvLyAocHJldmVudHMgaW50ZWdlciBvdmVyZmxvdyBpbiBicm93c2VycylcbiAgICAgIGlmIChwb3MgLSBzdGFydCA+PSAxMCkgeyByZXR1cm4gLTE7IH1cblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZm91bmQgdmFsaWQgbWFya2VyXG4gICAgaWYgKGNoID09PSAweDI5LyogKSAqLyB8fCBjaCA9PT0gMHgyZS8qIC4gKi8pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG5cbiAgaWYgKHBvcyA8IG1heCkge1xuICAgIGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcblxuICAgIGlmICghaXNTcGFjZShjaCkpIHtcbiAgICAgIC8vIFwiIDEudGVzdCBcIiAtIGlzIG5vdCBhIGxpc3QgaXRlbVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcG9zO1xufVxuXG5mdW5jdGlvbiBtYXJrVGlnaHRQYXJhZ3JhcGhzKHN0YXRlLCBpZHgpIHtcbiAgdmFyIGksIGwsXG4gICAgICBsZXZlbCA9IHN0YXRlLmxldmVsICsgMjtcblxuICBmb3IgKGkgPSBpZHggKyAyLCBsID0gc3RhdGUudG9rZW5zLmxlbmd0aCAtIDI7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoc3RhdGUudG9rZW5zW2ldLmxldmVsID09PSBsZXZlbCAmJiBzdGF0ZS50b2tlbnNbaV0udHlwZSA9PT0gJ3BhcmFncmFwaF9vcGVuJykge1xuICAgICAgc3RhdGUudG9rZW5zW2kgKyAyXS5oaWRkZW4gPSB0cnVlO1xuICAgICAgc3RhdGUudG9rZW5zW2ldLmhpZGRlbiA9IHRydWU7XG4gICAgICBpICs9IDI7XG4gICAgfVxuICB9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsaXN0KHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHNpbGVudCkge1xuICB2YXIgY2gsXG4gICAgICBjb250ZW50U3RhcnQsXG4gICAgICBpLFxuICAgICAgaW5kZW50LFxuICAgICAgaW5kZW50QWZ0ZXJNYXJrZXIsXG4gICAgICBpbml0aWFsLFxuICAgICAgaXNPcmRlcmVkLFxuICAgICAgaXRlbUxpbmVzLFxuICAgICAgbCxcbiAgICAgIGxpc3RMaW5lcyxcbiAgICAgIGxpc3RUb2tJZHgsXG4gICAgICBtYXJrZXJDaGFyQ29kZSxcbiAgICAgIG1hcmtlclZhbHVlLFxuICAgICAgbWF4LFxuICAgICAgbmV4dExpbmUsXG4gICAgICBvZmZzZXQsXG4gICAgICBvbGRMaXN0SW5kZW50LFxuICAgICAgb2xkUGFyZW50VHlwZSxcbiAgICAgIG9sZFNDb3VudCxcbiAgICAgIG9sZFRTaGlmdCxcbiAgICAgIG9sZFRpZ2h0LFxuICAgICAgcG9zLFxuICAgICAgcG9zQWZ0ZXJNYXJrZXIsXG4gICAgICBwcmV2RW1wdHlFbmQsXG4gICAgICBzdGFydCxcbiAgICAgIHRlcm1pbmF0ZSxcbiAgICAgIHRlcm1pbmF0b3JSdWxlcyxcbiAgICAgIHRva2VuLFxuICAgICAgaXNUZXJtaW5hdGluZ1BhcmFncmFwaCA9IGZhbHNlLFxuICAgICAgdGlnaHQgPSB0cnVlO1xuXG4gIC8vIGlmIGl0J3MgaW5kZW50ZWQgbW9yZSB0aGFuIDMgc3BhY2VzLCBpdCBzaG91bGQgYmUgYSBjb2RlIGJsb2NrXG4gIGlmIChzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIFNwZWNpYWwgY2FzZTpcbiAgLy8gIC0gaXRlbSAxXG4gIC8vICAgLSBpdGVtIDJcbiAgLy8gICAgLSBpdGVtIDNcbiAgLy8gICAgIC0gaXRlbSA0XG4gIC8vICAgICAgLSB0aGlzIG9uZSBpcyBhIHBhcmFncmFwaCBjb250aW51YXRpb25cbiAgaWYgKHN0YXRlLmxpc3RJbmRlbnQgPj0gMCAmJlxuICAgICAgc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gLSBzdGF0ZS5saXN0SW5kZW50ID49IDQgJiZcbiAgICAgIHN0YXRlLnNDb3VudFtzdGFydExpbmVdIDwgc3RhdGUuYmxrSW5kZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gbGltaXQgY29uZGl0aW9ucyB3aGVuIGxpc3QgY2FuIGludGVycnVwdFxuICAvLyBhIHBhcmFncmFwaCAodmFsaWRhdGlvbiBtb2RlIG9ubHkpXG4gIGlmIChzaWxlbnQgJiYgc3RhdGUucGFyZW50VHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAvLyBOZXh0IGxpc3QgaXRlbSBzaG91bGQgc3RpbGwgdGVybWluYXRlIHByZXZpb3VzIGxpc3QgaXRlbTtcbiAgICAvL1xuICAgIC8vIFRoaXMgY29kZSBjYW4gZmFpbCBpZiBwbHVnaW5zIHVzZSBibGtJbmRlbnQgYXMgd2VsbCBhcyBsaXN0cyxcbiAgICAvLyBidXQgSSBob3BlIHRoZSBzcGVjIGdldHMgZml4ZWQgbG9uZyBiZWZvcmUgdGhhdCBoYXBwZW5zLlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLnRTaGlmdFtzdGFydExpbmVdID49IHN0YXRlLmJsa0luZGVudCkge1xuICAgICAgaXNUZXJtaW5hdGluZ1BhcmFncmFwaCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gRGV0ZWN0IGxpc3QgdHlwZSBhbmQgcG9zaXRpb24gYWZ0ZXIgbWFya2VyXG4gIGlmICgocG9zQWZ0ZXJNYXJrZXIgPSBza2lwT3JkZXJlZExpc3RNYXJrZXIoc3RhdGUsIHN0YXJ0TGluZSkpID49IDApIHtcbiAgICBpc09yZGVyZWQgPSB0cnVlO1xuICAgIHN0YXJ0ID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXTtcbiAgICBtYXJrZXJWYWx1ZSA9IE51bWJlcihzdGF0ZS5zcmMuc3Vic3RyKHN0YXJ0LCBwb3NBZnRlck1hcmtlciAtIHN0YXJ0IC0gMSkpO1xuXG4gICAgLy8gSWYgd2UncmUgc3RhcnRpbmcgYSBuZXcgb3JkZXJlZCBsaXN0IHJpZ2h0IGFmdGVyXG4gICAgLy8gYSBwYXJhZ3JhcGgsIGl0IHNob3VsZCBzdGFydCB3aXRoIDEuXG4gICAgaWYgKGlzVGVybWluYXRpbmdQYXJhZ3JhcGggJiYgbWFya2VyVmFsdWUgIT09IDEpIHJldHVybiBmYWxzZTtcblxuICB9IGVsc2UgaWYgKChwb3NBZnRlck1hcmtlciA9IHNraXBCdWxsZXRMaXN0TWFya2VyKHN0YXRlLCBzdGFydExpbmUpKSA+PSAwKSB7XG4gICAgaXNPcmRlcmVkID0gZmFsc2U7XG5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBzdGFydGluZyBhIG5ldyB1bm9yZGVyZWQgbGlzdCByaWdodCBhZnRlclxuICAvLyBhIHBhcmFncmFwaCwgZmlyc3QgbGluZSBzaG91bGQgbm90IGJlIGVtcHR5LlxuICBpZiAoaXNUZXJtaW5hdGluZ1BhcmFncmFwaCkge1xuICAgIGlmIChzdGF0ZS5za2lwU3BhY2VzKHBvc0FmdGVyTWFya2VyKSA+PSBzdGF0ZS5lTWFya3Nbc3RhcnRMaW5lXSkgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gV2Ugc2hvdWxkIHRlcm1pbmF0ZSBsaXN0IG9uIHN0eWxlIGNoYW5nZS4gUmVtZW1iZXIgZmlyc3Qgb25lIHRvIGNvbXBhcmUuXG4gIG1hcmtlckNoYXJDb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zQWZ0ZXJNYXJrZXIgLSAxKTtcblxuICAvLyBGb3IgdmFsaWRhdGlvbiBtb2RlIHdlIGNhbiB0ZXJtaW5hdGUgaW1tZWRpYXRlbHlcbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gIC8vIFN0YXJ0IGxpc3RcbiAgbGlzdFRva0lkeCA9IHN0YXRlLnRva2Vucy5sZW5ndGg7XG5cbiAgaWYgKGlzT3JkZXJlZCkge1xuICAgIHRva2VuICAgICAgID0gc3RhdGUucHVzaCgnb3JkZXJlZF9saXN0X29wZW4nLCAnb2wnLCAxKTtcbiAgICBpZiAobWFya2VyVmFsdWUgIT09IDEpIHtcbiAgICAgIHRva2VuLmF0dHJzID0gWyBbICdzdGFydCcsIG1hcmtlclZhbHVlIF0gXTtcbiAgICB9XG5cbiAgfSBlbHNlIHtcbiAgICB0b2tlbiAgICAgICA9IHN0YXRlLnB1c2goJ2J1bGxldF9saXN0X29wZW4nLCAndWwnLCAxKTtcbiAgfVxuXG4gIHRva2VuLm1hcCAgICA9IGxpc3RMaW5lcyA9IFsgc3RhcnRMaW5lLCAwIF07XG4gIHRva2VuLm1hcmt1cCA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyQ2hhckNvZGUpO1xuXG4gIC8vXG4gIC8vIEl0ZXJhdGUgbGlzdCBpdGVtc1xuICAvL1xuXG4gIG5leHRMaW5lID0gc3RhcnRMaW5lO1xuICBwcmV2RW1wdHlFbmQgPSBmYWxzZTtcbiAgdGVybWluYXRvclJ1bGVzID0gc3RhdGUubWQuYmxvY2sucnVsZXIuZ2V0UnVsZXMoJ2xpc3QnKTtcblxuICBvbGRQYXJlbnRUeXBlID0gc3RhdGUucGFyZW50VHlwZTtcbiAgc3RhdGUucGFyZW50VHlwZSA9ICdsaXN0JztcblxuICB3aGlsZSAobmV4dExpbmUgPCBlbmRMaW5lKSB7XG4gICAgcG9zID0gcG9zQWZ0ZXJNYXJrZXI7XG4gICAgbWF4ID0gc3RhdGUuZU1hcmtzW25leHRMaW5lXTtcblxuICAgIGluaXRpYWwgPSBvZmZzZXQgPSBzdGF0ZS5zQ291bnRbbmV4dExpbmVdICsgcG9zQWZ0ZXJNYXJrZXIgLSAoc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXSk7XG5cbiAgICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgwOSkge1xuICAgICAgICBvZmZzZXQgKz0gNCAtIChvZmZzZXQgKyBzdGF0ZS5ic0NvdW50W25leHRMaW5lXSkgJSA0O1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gMHgyMCkge1xuICAgICAgICBvZmZzZXQrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBwb3MrKztcbiAgICB9XG5cbiAgICBjb250ZW50U3RhcnQgPSBwb3M7XG5cbiAgICBpZiAoY29udGVudFN0YXJ0ID49IG1heCkge1xuICAgICAgLy8gdHJpbW1pbmcgc3BhY2UgaW4gXCItICAgIFxcbiAgM1wiIGNhc2UsIGluZGVudCBpcyAxIGhlcmVcbiAgICAgIGluZGVudEFmdGVyTWFya2VyID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZW50QWZ0ZXJNYXJrZXIgPSBvZmZzZXQgLSBpbml0aWFsO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgbW9yZSB0aGFuIDQgc3BhY2VzLCB0aGUgaW5kZW50IGlzIDFcbiAgICAvLyAodGhlIHJlc3QgaXMganVzdCBpbmRlbnRlZCBjb2RlIGJsb2NrKVxuICAgIGlmIChpbmRlbnRBZnRlck1hcmtlciA+IDQpIHsgaW5kZW50QWZ0ZXJNYXJrZXIgPSAxOyB9XG5cbiAgICAvLyBcIiAgLSAgdGVzdFwiXG4gICAgLy8gIF5eXl5eIC0gY2FsY3VsYXRpbmcgdG90YWwgbGVuZ3RoIG9mIHRoaXMgdGhpbmdcbiAgICBpbmRlbnQgPSBpbml0aWFsICsgaW5kZW50QWZ0ZXJNYXJrZXI7XG5cbiAgICAvLyBSdW4gc3VicGFyc2VyICYgd3JpdGUgdG9rZW5zXG4gICAgdG9rZW4gICAgICAgID0gc3RhdGUucHVzaCgnbGlzdF9pdGVtX29wZW4nLCAnbGknLCAxKTtcbiAgICB0b2tlbi5tYXJrdXAgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG1hcmtlckNoYXJDb2RlKTtcbiAgICB0b2tlbi5tYXAgICAgPSBpdGVtTGluZXMgPSBbIHN0YXJ0TGluZSwgMCBdO1xuXG4gICAgLy8gY2hhbmdlIGN1cnJlbnQgc3RhdGUsIHRoZW4gcmVzdG9yZSBpdCBhZnRlciBwYXJzZXIgc3ViY2FsbFxuICAgIG9sZFRpZ2h0ID0gc3RhdGUudGlnaHQ7XG4gICAgb2xkVFNoaWZ0ID0gc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV07XG4gICAgb2xkU0NvdW50ID0gc3RhdGUuc0NvdW50W3N0YXJ0TGluZV07XG5cbiAgICAvLyAgLSBleGFtcGxlIGxpc3RcbiAgICAvLyBeIGxpc3RJbmRlbnQgcG9zaXRpb24gd2lsbCBiZSBoZXJlXG4gICAgLy8gICBeIGJsa0luZGVudCBwb3NpdGlvbiB3aWxsIGJlIGhlcmVcbiAgICAvL1xuICAgIG9sZExpc3RJbmRlbnQgPSBzdGF0ZS5saXN0SW5kZW50O1xuICAgIHN0YXRlLmxpc3RJbmRlbnQgPSBzdGF0ZS5ibGtJbmRlbnQ7XG4gICAgc3RhdGUuYmxrSW5kZW50ID0gaW5kZW50O1xuXG4gICAgc3RhdGUudGlnaHQgPSB0cnVlO1xuICAgIHN0YXRlLnRTaGlmdFtzdGFydExpbmVdID0gY29udGVudFN0YXJ0IC0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV07XG4gICAgc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gPSBvZmZzZXQ7XG5cbiAgICBpZiAoY29udGVudFN0YXJ0ID49IG1heCAmJiBzdGF0ZS5pc0VtcHR5KHN0YXJ0TGluZSArIDEpKSB7XG4gICAgICAvLyB3b3JrYXJvdW5kIGZvciB0aGlzIGNhc2VcbiAgICAgIC8vIChsaXN0IGl0ZW0gaXMgZW1wdHksIGxpc3QgdGVybWluYXRlcyBiZWZvcmUgXCJmb29cIik6XG4gICAgICAvLyB+fn5+fn5+flxuICAgICAgLy8gICAtXG4gICAgICAvL1xuICAgICAgLy8gICAgIGZvb1xuICAgICAgLy8gfn5+fn5+fn5cbiAgICAgIHN0YXRlLmxpbmUgPSBNYXRoLm1pbihzdGF0ZS5saW5lICsgMiwgZW5kTGluZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLm1kLmJsb2NrLnRva2VuaXplKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIElmIGFueSBvZiBsaXN0IGl0ZW0gaXMgdGlnaHQsIG1hcmsgbGlzdCBhcyB0aWdodFxuICAgIGlmICghc3RhdGUudGlnaHQgfHwgcHJldkVtcHR5RW5kKSB7XG4gICAgICB0aWdodCA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBJdGVtIGJlY29tZSBsb29zZSBpZiBmaW5pc2ggd2l0aCBlbXB0eSBsaW5lLFxuICAgIC8vIGJ1dCB3ZSBzaG91bGQgZmlsdGVyIGxhc3QgZWxlbWVudCwgYmVjYXVzZSBpdCBtZWFucyBsaXN0IGZpbmlzaFxuICAgIHByZXZFbXB0eUVuZCA9IChzdGF0ZS5saW5lIC0gc3RhcnRMaW5lKSA+IDEgJiYgc3RhdGUuaXNFbXB0eShzdGF0ZS5saW5lIC0gMSk7XG5cbiAgICBzdGF0ZS5ibGtJbmRlbnQgPSBzdGF0ZS5saXN0SW5kZW50O1xuICAgIHN0YXRlLmxpc3RJbmRlbnQgPSBvbGRMaXN0SW5kZW50O1xuICAgIHN0YXRlLnRTaGlmdFtzdGFydExpbmVdID0gb2xkVFNoaWZ0O1xuICAgIHN0YXRlLnNDb3VudFtzdGFydExpbmVdID0gb2xkU0NvdW50O1xuICAgIHN0YXRlLnRpZ2h0ID0gb2xkVGlnaHQ7XG5cbiAgICB0b2tlbiAgICAgICAgPSBzdGF0ZS5wdXNoKCdsaXN0X2l0ZW1fY2xvc2UnLCAnbGknLCAtMSk7XG4gICAgdG9rZW4ubWFya3VwID0gU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXJDaGFyQ29kZSk7XG5cbiAgICBuZXh0TGluZSA9IHN0YXJ0TGluZSA9IHN0YXRlLmxpbmU7XG4gICAgaXRlbUxpbmVzWzFdID0gbmV4dExpbmU7XG4gICAgY29udGVudFN0YXJ0ID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV07XG5cbiAgICBpZiAobmV4dExpbmUgPj0gZW5kTGluZSkgeyBicmVhazsgfVxuXG4gICAgLy9cbiAgICAvLyBUcnkgdG8gY2hlY2sgaWYgbGlzdCBpcyB0ZXJtaW5hdGVkIG9yIGNvbnRpbnVlZC5cbiAgICAvL1xuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIDwgc3RhdGUuYmxrSW5kZW50KSB7IGJyZWFrOyB9XG5cbiAgICAvLyBpZiBpdCdzIGluZGVudGVkIG1vcmUgdGhhbiAzIHNwYWNlcywgaXQgc2hvdWxkIGJlIGEgY29kZSBibG9ja1xuICAgIGlmIChzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IGJyZWFrOyB9XG5cbiAgICAvLyBmYWlsIGlmIHRlcm1pbmF0aW5nIGJsb2NrIGZvdW5kXG4gICAgdGVybWluYXRlID0gZmFsc2U7XG4gICAgZm9yIChpID0gMCwgbCA9IHRlcm1pbmF0b3JSdWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0ZXJtaW5hdG9yUnVsZXNbaV0oc3RhdGUsIG5leHRMaW5lLCBlbmRMaW5lLCB0cnVlKSkge1xuICAgICAgICB0ZXJtaW5hdGUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRlcm1pbmF0ZSkgeyBicmVhazsgfVxuXG4gICAgLy8gZmFpbCBpZiBsaXN0IGhhcyBhbm90aGVyIHR5cGVcbiAgICBpZiAoaXNPcmRlcmVkKSB7XG4gICAgICBwb3NBZnRlck1hcmtlciA9IHNraXBPcmRlcmVkTGlzdE1hcmtlcihzdGF0ZSwgbmV4dExpbmUpO1xuICAgICAgaWYgKHBvc0FmdGVyTWFya2VyIDwgMCkgeyBicmVhazsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwb3NBZnRlck1hcmtlciA9IHNraXBCdWxsZXRMaXN0TWFya2VyKHN0YXRlLCBuZXh0TGluZSk7XG4gICAgICBpZiAocG9zQWZ0ZXJNYXJrZXIgPCAwKSB7IGJyZWFrOyB9XG4gICAgfVxuXG4gICAgaWYgKG1hcmtlckNoYXJDb2RlICE9PSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3NBZnRlck1hcmtlciAtIDEpKSB7IGJyZWFrOyB9XG4gIH1cblxuICAvLyBGaW5hbGl6ZSBsaXN0XG4gIGlmIChpc09yZGVyZWQpIHtcbiAgICB0b2tlbiA9IHN0YXRlLnB1c2goJ29yZGVyZWRfbGlzdF9jbG9zZScsICdvbCcsIC0xKTtcbiAgfSBlbHNlIHtcbiAgICB0b2tlbiA9IHN0YXRlLnB1c2goJ2J1bGxldF9saXN0X2Nsb3NlJywgJ3VsJywgLTEpO1xuICB9XG4gIHRva2VuLm1hcmt1cCA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyQ2hhckNvZGUpO1xuXG4gIGxpc3RMaW5lc1sxXSA9IG5leHRMaW5lO1xuICBzdGF0ZS5saW5lID0gbmV4dExpbmU7XG5cbiAgc3RhdGUucGFyZW50VHlwZSA9IG9sZFBhcmVudFR5cGU7XG5cbiAgLy8gbWFyayBwYXJhZ3JhcGhzIHRpZ2h0IGlmIG5lZWRlZFxuICBpZiAodGlnaHQpIHtcbiAgICBtYXJrVGlnaHRQYXJhZ3JhcGhzKHN0YXRlLCBsaXN0VG9rSWR4KTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgbm9ybWFsaXplUmVmZXJlbmNlICAgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS5ub3JtYWxpemVSZWZlcmVuY2U7XG52YXIgaXNTcGFjZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS5pc1NwYWNlO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVmZXJlbmNlKHN0YXRlLCBzdGFydExpbmUsIF9lbmRMaW5lLCBzaWxlbnQpIHtcbiAgdmFyIGNoLFxuICAgICAgZGVzdEVuZFBvcyxcbiAgICAgIGRlc3RFbmRMaW5lTm8sXG4gICAgICBlbmRMaW5lLFxuICAgICAgaHJlZixcbiAgICAgIGksXG4gICAgICBsLFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbEVuZCxcbiAgICAgIG9sZFBhcmVudFR5cGUsXG4gICAgICByZXMsXG4gICAgICBzdGFydCxcbiAgICAgIHN0cixcbiAgICAgIHRlcm1pbmF0ZSxcbiAgICAgIHRlcm1pbmF0b3JSdWxlcyxcbiAgICAgIHRpdGxlLFxuICAgICAgbGluZXMgPSAwLFxuICAgICAgcG9zID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXSxcbiAgICAgIG1heCA9IHN0YXRlLmVNYXJrc1tzdGFydExpbmVdLFxuICAgICAgbmV4dExpbmUgPSBzdGFydExpbmUgKyAxO1xuXG4gIC8vIGlmIGl0J3MgaW5kZW50ZWQgbW9yZSB0aGFuIDMgc3BhY2VzLCBpdCBzaG91bGQgYmUgYSBjb2RlIGJsb2NrXG4gIGlmIChzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDVCLyogWyAqLykgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBTaW1wbGUgY2hlY2sgdG8gcXVpY2tseSBpbnRlcnJ1cHQgc2NhbiBvbiBbbGlua10odXJsKSBhdCB0aGUgc3RhcnQgb2YgbGluZS5cbiAgLy8gQ2FuIGJlIHVzZWZ1bCBvbiBwcmFjdGljZTogaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0L2lzc3Vlcy81NFxuICB3aGlsZSAoKytwb3MgPCBtYXgpIHtcbiAgICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHg1RCAvKiBdICovICYmXG4gICAgICAgIHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyAtIDEpICE9PSAweDVDLyogXFwgKi8pIHtcbiAgICAgIGlmIChwb3MgKyAxID09PSBtYXgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zICsgMSkgIT09IDB4M0EvKiA6ICovKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZW5kTGluZSA9IHN0YXRlLmxpbmVNYXg7XG5cbiAgLy8ganVtcCBsaW5lLWJ5LWxpbmUgdW50aWwgZW1wdHkgb25lIG9yIEVPRlxuICB0ZXJtaW5hdG9yUnVsZXMgPSBzdGF0ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcygncmVmZXJlbmNlJyk7XG5cbiAgb2xkUGFyZW50VHlwZSA9IHN0YXRlLnBhcmVudFR5cGU7XG4gIHN0YXRlLnBhcmVudFR5cGUgPSAncmVmZXJlbmNlJztcblxuICBmb3IgKDsgbmV4dExpbmUgPCBlbmRMaW5lICYmICFzdGF0ZS5pc0VtcHR5KG5leHRMaW5lKTsgbmV4dExpbmUrKykge1xuICAgIC8vIHRoaXMgd291bGQgYmUgYSBjb2RlIGJsb2NrIG5vcm1hbGx5LCBidXQgYWZ0ZXIgcGFyYWdyYXBoXG4gICAgLy8gaXQncyBjb25zaWRlcmVkIGEgbGF6eSBjb250aW51YXRpb24gcmVnYXJkbGVzcyBvZiB3aGF0J3MgdGhlcmVcbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+IDMpIHsgY29udGludWU7IH1cblxuICAgIC8vIHF1aXJrIGZvciBibG9ja3F1b3RlcywgdGhpcyBsaW5lIHNob3VsZCBhbHJlYWR5IGJlIGNoZWNrZWQgYnkgdGhhdCBydWxlXG4gICAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPCAwKSB7IGNvbnRpbnVlOyB9XG5cbiAgICAvLyBTb21lIHRhZ3MgY2FuIHRlcm1pbmF0ZSBwYXJhZ3JhcGggd2l0aG91dCBlbXB0eSBsaW5lLlxuICAgIHRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgIGZvciAoaSA9IDAsIGwgPSB0ZXJtaW5hdG9yUnVsZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAodGVybWluYXRvclJ1bGVzW2ldKHN0YXRlLCBuZXh0TGluZSwgZW5kTGluZSwgdHJ1ZSkpIHtcbiAgICAgICAgdGVybWluYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0ZXJtaW5hdGUpIHsgYnJlYWs7IH1cbiAgfVxuXG4gIHN0ciA9IHN0YXRlLmdldExpbmVzKHN0YXJ0TGluZSwgbmV4dExpbmUsIHN0YXRlLmJsa0luZGVudCwgZmFsc2UpLnRyaW0oKTtcbiAgbWF4ID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKHBvcyA9IDE7IHBvcyA8IG1heDsgcG9zKyspIHtcbiAgICBjaCA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG4gICAgaWYgKGNoID09PSAweDVCIC8qIFsgKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDVEIC8qIF0gKi8pIHtcbiAgICAgIGxhYmVsRW5kID0gcG9zO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHgwQSAvKiBcXG4gKi8pIHtcbiAgICAgIGxpbmVzKys7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHg1QyAvKiBcXCAqLykge1xuICAgICAgcG9zKys7XG4gICAgICBpZiAocG9zIDwgbWF4ICYmIHN0ci5jaGFyQ29kZUF0KHBvcykgPT09IDB4MEEpIHtcbiAgICAgICAgbGluZXMrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobGFiZWxFbmQgPCAwIHx8IHN0ci5jaGFyQ29kZUF0KGxhYmVsRW5kICsgMSkgIT09IDB4M0EvKiA6ICovKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIFtsYWJlbF06ICAgZGVzdGluYXRpb24gICAndGl0bGUnXG4gIC8vICAgICAgICAgXl5eIHNraXAgb3B0aW9uYWwgd2hpdGVzcGFjZSBoZXJlXG4gIGZvciAocG9zID0gbGFiZWxFbmQgKyAyOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgY2ggPSBzdHIuY2hhckNvZGVBdChwb3MpO1xuICAgIGlmIChjaCA9PT0gMHgwQSkge1xuICAgICAgbGluZXMrKztcbiAgICB9IGVsc2UgaWYgKGlzU3BhY2UoY2gpKSB7XG4gICAgICAvKmVzbGludCBuby1lbXB0eTowKi9cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gW2xhYmVsXTogICBkZXN0aW5hdGlvbiAgICd0aXRsZSdcbiAgLy8gICAgICAgICAgICBeXl5eXl5eXl5eXiBwYXJzZSB0aGlzXG4gIHJlcyA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rRGVzdGluYXRpb24oc3RyLCBwb3MsIG1heCk7XG4gIGlmICghcmVzLm9rKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGhyZWYgPSBzdGF0ZS5tZC5ub3JtYWxpemVMaW5rKHJlcy5zdHIpO1xuICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhocmVmKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBwb3MgPSByZXMucG9zO1xuICBsaW5lcyArPSByZXMubGluZXM7XG5cbiAgLy8gc2F2ZSBjdXJzb3Igc3RhdGUsIHdlIGNvdWxkIHJlcXVpcmUgdG8gcm9sbGJhY2sgbGF0ZXJcbiAgZGVzdEVuZFBvcyA9IHBvcztcbiAgZGVzdEVuZExpbmVObyA9IGxpbmVzO1xuXG4gIC8vIFtsYWJlbF06ICAgZGVzdGluYXRpb24gICAndGl0bGUnXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICBeXl4gc2tpcHBpbmcgdGhvc2Ugc3BhY2VzXG4gIHN0YXJ0ID0gcG9zO1xuICBmb3IgKDsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgIGNoID0gc3RyLmNoYXJDb2RlQXQocG9zKTtcbiAgICBpZiAoY2ggPT09IDB4MEEpIHtcbiAgICAgIGxpbmVzKys7XG4gICAgfSBlbHNlIGlmIChpc1NwYWNlKGNoKSkge1xuICAgICAgLyplc2xpbnQgbm8tZW1wdHk6MCovXG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFtsYWJlbF06ICAgZGVzdGluYXRpb24gICAndGl0bGUnXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eIHBhcnNlIHRoaXNcbiAgcmVzID0gc3RhdGUubWQuaGVscGVycy5wYXJzZUxpbmtUaXRsZShzdHIsIHBvcywgbWF4KTtcbiAgaWYgKHBvcyA8IG1heCAmJiBzdGFydCAhPT0gcG9zICYmIHJlcy5vaykge1xuICAgIHRpdGxlID0gcmVzLnN0cjtcbiAgICBwb3MgPSByZXMucG9zO1xuICAgIGxpbmVzICs9IHJlcy5saW5lcztcbiAgfSBlbHNlIHtcbiAgICB0aXRsZSA9ICcnO1xuICAgIHBvcyA9IGRlc3RFbmRQb3M7XG4gICAgbGluZXMgPSBkZXN0RW5kTGluZU5vO1xuICB9XG5cbiAgLy8gc2tpcCB0cmFpbGluZyBzcGFjZXMgdW50aWwgdGhlIHJlc3Qgb2YgdGhlIGxpbmVcbiAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgIGNoID0gc3RyLmNoYXJDb2RlQXQocG9zKTtcbiAgICBpZiAoIWlzU3BhY2UoY2gpKSB7IGJyZWFrOyB9XG4gICAgcG9zKys7XG4gIH1cblxuICBpZiAocG9zIDwgbWF4ICYmIHN0ci5jaGFyQ29kZUF0KHBvcykgIT09IDB4MEEpIHtcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIC8vIGdhcmJhZ2UgYXQgdGhlIGVuZCBvZiB0aGUgbGluZSBhZnRlciB0aXRsZSxcbiAgICAgIC8vIGJ1dCBpdCBjb3VsZCBzdGlsbCBiZSBhIHZhbGlkIHJlZmVyZW5jZSBpZiB3ZSByb2xsIGJhY2tcbiAgICAgIHRpdGxlID0gJyc7XG4gICAgICBwb3MgPSBkZXN0RW5kUG9zO1xuICAgICAgbGluZXMgPSBkZXN0RW5kTGluZU5vO1xuICAgICAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgICAgICBjaCA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgIGlmICghaXNTcGFjZShjaCkpIHsgYnJlYWs7IH1cbiAgICAgICAgcG9zKys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHBvcyA8IG1heCAmJiBzdHIuY2hhckNvZGVBdChwb3MpICE9PSAweDBBKSB7XG4gICAgLy8gZ2FyYmFnZSBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGFiZWwgPSBub3JtYWxpemVSZWZlcmVuY2Uoc3RyLnNsaWNlKDEsIGxhYmVsRW5kKSk7XG4gIGlmICghbGFiZWwpIHtcbiAgICAvLyBDb21tb25NYXJrIDAuMjAgZGlzYWxsb3dzIGVtcHR5IGxhYmVsc1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFJlZmVyZW5jZSBjYW4gbm90IHRlcm1pbmF0ZSBhbnl0aGluZy4gVGhpcyBjaGVjayBpcyBmb3Igc2FmZXR5IG9ubHkuXG4gIC8qaXN0YW5idWwgaWdub3JlIGlmKi9cbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gIGlmICh0eXBlb2Ygc3RhdGUuZW52LnJlZmVyZW5jZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3RhdGUuZW52LnJlZmVyZW5jZXMgPSB7fTtcbiAgfVxuICBpZiAodHlwZW9mIHN0YXRlLmVudi5yZWZlcmVuY2VzW2xhYmVsXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzdGF0ZS5lbnYucmVmZXJlbmNlc1tsYWJlbF0gPSB7IHRpdGxlOiB0aXRsZSwgaHJlZjogaHJlZiB9O1xuICB9XG5cbiAgc3RhdGUucGFyZW50VHlwZSA9IG9sZFBhcmVudFR5cGU7XG5cbiAgc3RhdGUubGluZSA9IHN0YXJ0TGluZSArIGxpbmVzICsgMTtcbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gaGVhZGluZyAoIywgIyMsIC4uLilcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNTcGFjZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmlzU3BhY2U7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoZWFkaW5nKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHNpbGVudCkge1xuICB2YXIgY2gsIGxldmVsLCB0bXAsIHRva2VuLFxuICAgICAgcG9zID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXSxcbiAgICAgIG1heCA9IHN0YXRlLmVNYXJrc1tzdGFydExpbmVdO1xuXG4gIC8vIGlmIGl0J3MgaW5kZW50ZWQgbW9yZSB0aGFuIDMgc3BhY2VzLCBpdCBzaG91bGQgYmUgYSBjb2RlIGJsb2NrXG4gIGlmIChzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGNoICA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgaWYgKGNoICE9PSAweDIzLyogIyAqLyB8fCBwb3MgPj0gbWF4KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIGNvdW50IGhlYWRpbmcgbGV2ZWxcbiAgbGV2ZWwgPSAxO1xuICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KCsrcG9zKTtcbiAgd2hpbGUgKGNoID09PSAweDIzLyogIyAqLyAmJiBwb3MgPCBtYXggJiYgbGV2ZWwgPD0gNikge1xuICAgIGxldmVsKys7XG4gICAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdCgrK3Bvcyk7XG4gIH1cblxuICBpZiAobGV2ZWwgPiA2IHx8IChwb3MgPCBtYXggJiYgIWlzU3BhY2UoY2gpKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAoc2lsZW50KSB7IHJldHVybiB0cnVlOyB9XG5cbiAgLy8gTGV0J3MgY3V0IHRhaWxzIGxpa2UgJyAgICAjIyMgICcgZnJvbSB0aGUgZW5kIG9mIHN0cmluZ1xuXG4gIG1heCA9IHN0YXRlLnNraXBTcGFjZXNCYWNrKG1heCwgcG9zKTtcbiAgdG1wID0gc3RhdGUuc2tpcENoYXJzQmFjayhtYXgsIDB4MjMsIHBvcyk7IC8vICNcbiAgaWYgKHRtcCA+IHBvcyAmJiBpc1NwYWNlKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHRtcCAtIDEpKSkge1xuICAgIG1heCA9IHRtcDtcbiAgfVxuXG4gIHN0YXRlLmxpbmUgPSBzdGFydExpbmUgKyAxO1xuXG4gIHRva2VuICAgICAgICA9IHN0YXRlLnB1c2goJ2hlYWRpbmdfb3BlbicsICdoJyArIFN0cmluZyhsZXZlbCksIDEpO1xuICB0b2tlbi5tYXJrdXAgPSAnIyMjIyMjIyMnLnNsaWNlKDAsIGxldmVsKTtcbiAgdG9rZW4ubWFwICAgID0gWyBzdGFydExpbmUsIHN0YXRlLmxpbmUgXTtcblxuICB0b2tlbiAgICAgICAgICA9IHN0YXRlLnB1c2goJ2lubGluZScsICcnLCAwKTtcbiAgdG9rZW4uY29udGVudCAgPSBzdGF0ZS5zcmMuc2xpY2UocG9zLCBtYXgpLnRyaW0oKTtcbiAgdG9rZW4ubWFwICAgICAgPSBbIHN0YXJ0TGluZSwgc3RhdGUubGluZSBdO1xuICB0b2tlbi5jaGlsZHJlbiA9IFtdO1xuXG4gIHRva2VuICAgICAgICA9IHN0YXRlLnB1c2goJ2hlYWRpbmdfY2xvc2UnLCAnaCcgKyBTdHJpbmcobGV2ZWwpLCAtMSk7XG4gIHRva2VuLm1hcmt1cCA9ICcjIyMjIyMjIycuc2xpY2UoMCwgbGV2ZWwpO1xuXG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIGxoZWFkaW5nICgtLS0sID09PSlcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbGhlYWRpbmcoc3RhdGUsIHN0YXJ0TGluZSwgZW5kTGluZS8qLCBzaWxlbnQqLykge1xuICB2YXIgY29udGVudCwgdGVybWluYXRlLCBpLCBsLCB0b2tlbiwgcG9zLCBtYXgsIGxldmVsLCBtYXJrZXIsXG4gICAgICBuZXh0TGluZSA9IHN0YXJ0TGluZSArIDEsIG9sZFBhcmVudFR5cGUsXG4gICAgICB0ZXJtaW5hdG9yUnVsZXMgPSBzdGF0ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcygncGFyYWdyYXBoJyk7XG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgb2xkUGFyZW50VHlwZSA9IHN0YXRlLnBhcmVudFR5cGU7XG4gIHN0YXRlLnBhcmVudFR5cGUgPSAncGFyYWdyYXBoJzsgLy8gdXNlIHBhcmFncmFwaCB0byBtYXRjaCB0ZXJtaW5hdG9yUnVsZXNcblxuICAvLyBqdW1wIGxpbmUtYnktbGluZSB1bnRpbCBlbXB0eSBvbmUgb3IgRU9GXG4gIGZvciAoOyBuZXh0TGluZSA8IGVuZExpbmUgJiYgIXN0YXRlLmlzRW1wdHkobmV4dExpbmUpOyBuZXh0TGluZSsrKSB7XG4gICAgLy8gdGhpcyB3b3VsZCBiZSBhIGNvZGUgYmxvY2sgbm9ybWFsbHksIGJ1dCBhZnRlciBwYXJhZ3JhcGhcbiAgICAvLyBpdCdzIGNvbnNpZGVyZWQgYSBsYXp5IGNvbnRpbnVhdGlvbiByZWdhcmRsZXNzIG9mIHdoYXQncyB0aGVyZVxuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID4gMykgeyBjb250aW51ZTsgfVxuXG4gICAgLy9cbiAgICAvLyBDaGVjayBmb3IgdW5kZXJsaW5lIGluIHNldGV4dCBoZWFkZXJcbiAgICAvL1xuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdID49IHN0YXRlLmJsa0luZGVudCkge1xuICAgICAgcG9zID0gc3RhdGUuYk1hcmtzW25leHRMaW5lXSArIHN0YXRlLnRTaGlmdFtuZXh0TGluZV07XG4gICAgICBtYXggPSBzdGF0ZS5lTWFya3NbbmV4dExpbmVdO1xuXG4gICAgICBpZiAocG9zIDwgbWF4KSB7XG4gICAgICAgIG1hcmtlciA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgICAgaWYgKG1hcmtlciA9PT0gMHgyRC8qIC0gKi8gfHwgbWFya2VyID09PSAweDNELyogPSAqLykge1xuICAgICAgICAgIHBvcyA9IHN0YXRlLnNraXBDaGFycyhwb3MsIG1hcmtlcik7XG4gICAgICAgICAgcG9zID0gc3RhdGUuc2tpcFNwYWNlcyhwb3MpO1xuXG4gICAgICAgICAgaWYgKHBvcyA+PSBtYXgpIHtcbiAgICAgICAgICAgIGxldmVsID0gKG1hcmtlciA9PT0gMHgzRC8qID0gKi8gPyAxIDogMik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBxdWlyayBmb3IgYmxvY2txdW90ZXMsIHRoaXMgbGluZSBzaG91bGQgYWxyZWFkeSBiZSBjaGVja2VkIGJ5IHRoYXQgcnVsZVxuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIDwgMCkgeyBjb250aW51ZTsgfVxuXG4gICAgLy8gU29tZSB0YWdzIGNhbiB0ZXJtaW5hdGUgcGFyYWdyYXBoIHdpdGhvdXQgZW1wdHkgbGluZS5cbiAgICB0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdGVybWluYXRvclJ1bGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHRlcm1pbmF0b3JSdWxlc1tpXShzdGF0ZSwgbmV4dExpbmUsIGVuZExpbmUsIHRydWUpKSB7XG4gICAgICAgIHRlcm1pbmF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGVybWluYXRlKSB7IGJyZWFrOyB9XG4gIH1cblxuICBpZiAoIWxldmVsKSB7XG4gICAgLy8gRGlkbid0IGZpbmQgdmFsaWQgdW5kZXJsaW5lXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29udGVudCA9IHN0YXRlLmdldExpbmVzKHN0YXJ0TGluZSwgbmV4dExpbmUsIHN0YXRlLmJsa0luZGVudCwgZmFsc2UpLnRyaW0oKTtcblxuICBzdGF0ZS5saW5lID0gbmV4dExpbmUgKyAxO1xuXG4gIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgnaGVhZGluZ19vcGVuJywgJ2gnICsgU3RyaW5nKGxldmVsKSwgMSk7XG4gIHRva2VuLm1hcmt1cCAgID0gU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXIpO1xuICB0b2tlbi5tYXAgICAgICA9IFsgc3RhcnRMaW5lLCBzdGF0ZS5saW5lIF07XG5cbiAgdG9rZW4gICAgICAgICAgPSBzdGF0ZS5wdXNoKCdpbmxpbmUnLCAnJywgMCk7XG4gIHRva2VuLmNvbnRlbnQgID0gY29udGVudDtcbiAgdG9rZW4ubWFwICAgICAgPSBbIHN0YXJ0TGluZSwgc3RhdGUubGluZSAtIDEgXTtcbiAgdG9rZW4uY2hpbGRyZW4gPSBbXTtcblxuICB0b2tlbiAgICAgICAgICA9IHN0YXRlLnB1c2goJ2hlYWRpbmdfY2xvc2UnLCAnaCcgKyBTdHJpbmcobGV2ZWwpLCAtMSk7XG4gIHRva2VuLm1hcmt1cCAgID0gU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXIpO1xuXG4gIHN0YXRlLnBhcmVudFR5cGUgPSBvbGRQYXJlbnRUeXBlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIEhUTUwgYmxvY2tcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBibG9ja19uYW1lcyA9IHJlcXVpcmUoJy4uL2NvbW1vbi9odG1sX2Jsb2NrcycpO1xudmFyIEhUTUxfT1BFTl9DTE9TRV9UQUdfUkUgPSByZXF1aXJlKCcuLi9jb21tb24vaHRtbF9yZScpLkhUTUxfT1BFTl9DTE9TRV9UQUdfUkU7XG5cbi8vIEFuIGFycmF5IG9mIG9wZW5pbmcgYW5kIGNvcnJlc3BvbmRpbmcgY2xvc2luZyBzZXF1ZW5jZXMgZm9yIGh0bWwgdGFncyxcbi8vIGxhc3QgYXJndW1lbnQgZGVmaW5lcyB3aGV0aGVyIGl0IGNhbiB0ZXJtaW5hdGUgYSBwYXJhZ3JhcGggb3Igbm90XG4vL1xudmFyIEhUTUxfU0VRVUVOQ0VTID0gW1xuICBbIC9ePChzY3JpcHR8cHJlfHN0eWxlKSg/PShcXHN8PnwkKSkvaSwgLzxcXC8oc2NyaXB0fHByZXxzdHlsZSk+L2ksIHRydWUgXSxcbiAgWyAvXjwhLS0vLCAgICAgICAgLy0tPi8sICAgdHJ1ZSBdLFxuICBbIC9ePFxcPy8sICAgICAgICAgL1xcPz4vLCAgIHRydWUgXSxcbiAgWyAvXjwhW0EtWl0vLCAgICAgLz4vLCAgICAgdHJ1ZSBdLFxuICBbIC9ePCFcXFtDREFUQVxcWy8sIC9cXF1cXF0+LywgdHJ1ZSBdLFxuICBbIG5ldyBSZWdFeHAoJ148Lz8oJyArIGJsb2NrX25hbWVzLmpvaW4oJ3wnKSArICcpKD89KFxcXFxzfC8/PnwkKSknLCAnaScpLCAvXiQvLCB0cnVlIF0sXG4gIFsgbmV3IFJlZ0V4cChIVE1MX09QRU5fQ0xPU0VfVEFHX1JFLnNvdXJjZSArICdcXFxccyokJyksICAvXiQvLCBmYWxzZSBdXG5dO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaHRtbF9ibG9jayhzdGF0ZSwgc3RhcnRMaW5lLCBlbmRMaW5lLCBzaWxlbnQpIHtcbiAgdmFyIGksIG5leHRMaW5lLCB0b2tlbiwgbGluZVRleHQsXG4gICAgICBwb3MgPSBzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXSArIHN0YXRlLnRTaGlmdFtzdGFydExpbmVdLFxuICAgICAgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV07XG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKCFzdGF0ZS5tZC5vcHRpb25zLmh0bWwpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4M0MvKiA8ICovKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxpbmVUZXh0ID0gc3RhdGUuc3JjLnNsaWNlKHBvcywgbWF4KTtcblxuICBmb3IgKGkgPSAwOyBpIDwgSFRNTF9TRVFVRU5DRVMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoSFRNTF9TRVFVRU5DRVNbaV1bMF0udGVzdChsaW5lVGV4dCkpIHsgYnJlYWs7IH1cbiAgfVxuXG4gIGlmIChpID09PSBIVE1MX1NFUVVFTkNFUy5sZW5ndGgpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIC8vIHRydWUgaWYgdGhpcyBzZXF1ZW5jZSBjYW4gYmUgYSB0ZXJtaW5hdG9yLCBmYWxzZSBvdGhlcndpc2VcbiAgICByZXR1cm4gSFRNTF9TRVFVRU5DRVNbaV1bMl07XG4gIH1cblxuICBuZXh0TGluZSA9IHN0YXJ0TGluZSArIDE7XG5cbiAgLy8gSWYgd2UgYXJlIGhlcmUgLSB3ZSBkZXRlY3RlZCBIVE1MIGJsb2NrLlxuICAvLyBMZXQncyByb2xsIGRvd24gdGlsbCBibG9jayBlbmQuXG4gIGlmICghSFRNTF9TRVFVRU5DRVNbaV1bMV0udGVzdChsaW5lVGV4dCkpIHtcbiAgICBmb3IgKDsgbmV4dExpbmUgPCBlbmRMaW5lOyBuZXh0TGluZSsrKSB7XG4gICAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IHN0YXRlLmJsa0luZGVudCkgeyBicmVhazsgfVxuXG4gICAgICBwb3MgPSBzdGF0ZS5iTWFya3NbbmV4dExpbmVdICsgc3RhdGUudFNoaWZ0W25leHRMaW5lXTtcbiAgICAgIG1heCA9IHN0YXRlLmVNYXJrc1tuZXh0TGluZV07XG4gICAgICBsaW5lVGV4dCA9IHN0YXRlLnNyYy5zbGljZShwb3MsIG1heCk7XG5cbiAgICAgIGlmIChIVE1MX1NFUVVFTkNFU1tpXVsxXS50ZXN0KGxpbmVUZXh0KSkge1xuICAgICAgICBpZiAobGluZVRleHQubGVuZ3RoICE9PSAwKSB7IG5leHRMaW5lKys7IH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGUubGluZSA9IG5leHRMaW5lO1xuXG4gIHRva2VuICAgICAgICAgPSBzdGF0ZS5wdXNoKCdodG1sX2Jsb2NrJywgJycsIDApO1xuICB0b2tlbi5tYXAgICAgID0gWyBzdGFydExpbmUsIG5leHRMaW5lIF07XG4gIHRva2VuLmNvbnRlbnQgPSBzdGF0ZS5nZXRMaW5lcyhzdGFydExpbmUsIG5leHRMaW5lLCBzdGF0ZS5ibGtJbmRlbnQsIHRydWUpO1xuXG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIExpc3Qgb2YgdmFsaWQgaHRtbCBibG9ja3MgbmFtZXMsIGFjY29ydGluZyB0byBjb21tb25tYXJrIHNwZWNcbi8vIGh0dHA6Ly9qZ20uZ2l0aHViLmlvL0NvbW1vbk1hcmsvc3BlYy5odG1sI2h0bWwtYmxvY2tzXG5cbid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2FkZHJlc3MnLFxuICAnYXJ0aWNsZScsXG4gICdhc2lkZScsXG4gICdiYXNlJyxcbiAgJ2Jhc2Vmb250JyxcbiAgJ2Jsb2NrcXVvdGUnLFxuICAnYm9keScsXG4gICdjYXB0aW9uJyxcbiAgJ2NlbnRlcicsXG4gICdjb2wnLFxuICAnY29sZ3JvdXAnLFxuICAnZGQnLFxuICAnZGV0YWlscycsXG4gICdkaWFsb2cnLFxuICAnZGlyJyxcbiAgJ2RpdicsXG4gICdkbCcsXG4gICdkdCcsXG4gICdmaWVsZHNldCcsXG4gICdmaWdjYXB0aW9uJyxcbiAgJ2ZpZ3VyZScsXG4gICdmb290ZXInLFxuICAnZm9ybScsXG4gICdmcmFtZScsXG4gICdmcmFtZXNldCcsXG4gICdoMScsXG4gICdoMicsXG4gICdoMycsXG4gICdoNCcsXG4gICdoNScsXG4gICdoNicsXG4gICdoZWFkJyxcbiAgJ2hlYWRlcicsXG4gICdocicsXG4gICdodG1sJyxcbiAgJ2lmcmFtZScsXG4gICdsZWdlbmQnLFxuICAnbGknLFxuICAnbGluaycsXG4gICdtYWluJyxcbiAgJ21lbnUnLFxuICAnbWVudWl0ZW0nLFxuICAnbWV0YScsXG4gICduYXYnLFxuICAnbm9mcmFtZXMnLFxuICAnb2wnLFxuICAnb3B0Z3JvdXAnLFxuICAnb3B0aW9uJyxcbiAgJ3AnLFxuICAncGFyYW0nLFxuICAnc2VjdGlvbicsXG4gICdzb3VyY2UnLFxuICAnc3VtbWFyeScsXG4gICd0YWJsZScsXG4gICd0Ym9keScsXG4gICd0ZCcsXG4gICd0Zm9vdCcsXG4gICd0aCcsXG4gICd0aGVhZCcsXG4gICd0aXRsZScsXG4gICd0cicsXG4gICd0cmFjaycsXG4gICd1bCdcbl07XG4iLCIvLyBQYXJhZ3JhcGhcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyYWdyYXBoKHN0YXRlLCBzdGFydExpbmUvKiwgZW5kTGluZSovKSB7XG4gIHZhciBjb250ZW50LCB0ZXJtaW5hdGUsIGksIGwsIHRva2VuLCBvbGRQYXJlbnRUeXBlLFxuICAgICAgbmV4dExpbmUgPSBzdGFydExpbmUgKyAxLFxuICAgICAgdGVybWluYXRvclJ1bGVzID0gc3RhdGUubWQuYmxvY2sucnVsZXIuZ2V0UnVsZXMoJ3BhcmFncmFwaCcpLFxuICAgICAgZW5kTGluZSA9IHN0YXRlLmxpbmVNYXg7XG5cbiAgb2xkUGFyZW50VHlwZSA9IHN0YXRlLnBhcmVudFR5cGU7XG4gIHN0YXRlLnBhcmVudFR5cGUgPSAncGFyYWdyYXBoJztcblxuICAvLyBqdW1wIGxpbmUtYnktbGluZSB1bnRpbCBlbXB0eSBvbmUgb3IgRU9GXG4gIGZvciAoOyBuZXh0TGluZSA8IGVuZExpbmUgJiYgIXN0YXRlLmlzRW1wdHkobmV4dExpbmUpOyBuZXh0TGluZSsrKSB7XG4gICAgLy8gdGhpcyB3b3VsZCBiZSBhIGNvZGUgYmxvY2sgbm9ybWFsbHksIGJ1dCBhZnRlciBwYXJhZ3JhcGhcbiAgICAvLyBpdCdzIGNvbnNpZGVyZWQgYSBsYXp5IGNvbnRpbnVhdGlvbiByZWdhcmRsZXNzIG9mIHdoYXQncyB0aGVyZVxuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID4gMykgeyBjb250aW51ZTsgfVxuXG4gICAgLy8gcXVpcmsgZm9yIGJsb2NrcXVvdGVzLCB0aGlzIGxpbmUgc2hvdWxkIGFscmVhZHkgYmUgY2hlY2tlZCBieSB0aGF0IHJ1bGVcbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IDApIHsgY29udGludWU7IH1cblxuICAgIC8vIFNvbWUgdGFncyBjYW4gdGVybWluYXRlIHBhcmFncmFwaCB3aXRob3V0IGVtcHR5IGxpbmUuXG4gICAgdGVybWluYXRlID0gZmFsc2U7XG4gICAgZm9yIChpID0gMCwgbCA9IHRlcm1pbmF0b3JSdWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0ZXJtaW5hdG9yUnVsZXNbaV0oc3RhdGUsIG5leHRMaW5lLCBlbmRMaW5lLCB0cnVlKSkge1xuICAgICAgICB0ZXJtaW5hdGUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRlcm1pbmF0ZSkgeyBicmVhazsgfVxuICB9XG5cbiAgY29udGVudCA9IHN0YXRlLmdldExpbmVzKHN0YXJ0TGluZSwgbmV4dExpbmUsIHN0YXRlLmJsa0luZGVudCwgZmFsc2UpLnRyaW0oKTtcblxuICBzdGF0ZS5saW5lID0gbmV4dExpbmU7XG5cbiAgdG9rZW4gICAgICAgICAgPSBzdGF0ZS5wdXNoKCdwYXJhZ3JhcGhfb3BlbicsICdwJywgMSk7XG4gIHRva2VuLm1hcCAgICAgID0gWyBzdGFydExpbmUsIHN0YXRlLmxpbmUgXTtcblxuICB0b2tlbiAgICAgICAgICA9IHN0YXRlLnB1c2goJ2lubGluZScsICcnLCAwKTtcbiAgdG9rZW4uY29udGVudCAgPSBjb250ZW50O1xuICB0b2tlbi5tYXAgICAgICA9IFsgc3RhcnRMaW5lLCBzdGF0ZS5saW5lIF07XG4gIHRva2VuLmNoaWxkcmVuID0gW107XG5cbiAgdG9rZW4gICAgICAgICAgPSBzdGF0ZS5wdXNoKCdwYXJhZ3JhcGhfY2xvc2UnLCAncCcsIC0xKTtcblxuICBzdGF0ZS5wYXJlbnRUeXBlID0gb2xkUGFyZW50VHlwZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBQYXJzZXIgc3RhdGUgY2xhc3NcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9rZW4gPSByZXF1aXJlKCcuLi90b2tlbicpO1xudmFyIGlzU3BhY2UgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS5pc1NwYWNlO1xuXG5cbmZ1bmN0aW9uIFN0YXRlQmxvY2soc3JjLCBtZCwgZW52LCB0b2tlbnMpIHtcbiAgdmFyIGNoLCBzLCBzdGFydCwgcG9zLCBsZW4sIGluZGVudCwgb2Zmc2V0LCBpbmRlbnRfZm91bmQ7XG5cbiAgdGhpcy5zcmMgPSBzcmM7XG5cbiAgLy8gbGluayB0byBwYXJzZXIgaW5zdGFuY2VcbiAgdGhpcy5tZCAgICAgPSBtZDtcblxuICB0aGlzLmVudiA9IGVudjtcblxuICAvL1xuICAvLyBJbnRlcm5hbCBzdGF0ZSB2YXJ0aWFibGVzXG4gIC8vXG5cbiAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG5cbiAgdGhpcy5iTWFya3MgPSBbXTsgIC8vIGxpbmUgYmVnaW4gb2Zmc2V0cyBmb3IgZmFzdCBqdW1wc1xuICB0aGlzLmVNYXJrcyA9IFtdOyAgLy8gbGluZSBlbmQgb2Zmc2V0cyBmb3IgZmFzdCBqdW1wc1xuICB0aGlzLnRTaGlmdCA9IFtdOyAgLy8gb2Zmc2V0cyBvZiB0aGUgZmlyc3Qgbm9uLXNwYWNlIGNoYXJhY3RlcnMgKHRhYnMgbm90IGV4cGFuZGVkKVxuICB0aGlzLnNDb3VudCA9IFtdOyAgLy8gaW5kZW50cyBmb3IgZWFjaCBsaW5lICh0YWJzIGV4cGFuZGVkKVxuXG4gIC8vIEFuIGFtb3VudCBvZiB2aXJ0dWFsIHNwYWNlcyAodGFicyBleHBhbmRlZCkgYmV0d2VlbiBiZWdpbm5pbmdcbiAgLy8gb2YgZWFjaCBsaW5lIChiTWFya3MpIGFuZCByZWFsIGJlZ2lubmluZyBvZiB0aGF0IGxpbmUuXG4gIC8vXG4gIC8vIEl0IGV4aXN0cyBvbmx5IGFzIGEgaGFjayBiZWNhdXNlIGJsb2NrcXVvdGVzIG92ZXJyaWRlIGJNYXJrc1xuICAvLyBsb3NpbmcgaW5mb3JtYXRpb24gaW4gdGhlIHByb2Nlc3MuXG4gIC8vXG4gIC8vIEl0J3MgdXNlZCBvbmx5IHdoZW4gZXhwYW5kaW5nIHRhYnMsIHlvdSBjYW4gdGhpbmsgYWJvdXQgaXQgYXNcbiAgLy8gYW4gaW5pdGlhbCB0YWIgbGVuZ3RoLCBlLmcuIGJzQ291bnQ9MjEgYXBwbGllZCB0byBzdHJpbmcgYFxcdDEyM2BcbiAgLy8gbWVhbnMgZmlyc3QgdGFiIHNob3VsZCBiZSBleHBhbmRlZCB0byA0LTIxJTQgPT09IDMgc3BhY2VzLlxuICAvL1xuICB0aGlzLmJzQ291bnQgPSBbXTtcblxuICAvLyBibG9jayBwYXJzZXIgdmFyaWFibGVzXG4gIHRoaXMuYmxrSW5kZW50ICA9IDA7IC8vIHJlcXVpcmVkIGJsb2NrIGNvbnRlbnQgaW5kZW50IChmb3IgZXhhbXBsZSwgaWYgd2UgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGluc2lkZSBhIGxpc3QsIGl0IHdvdWxkIGJlIHBvc2l0aW9uZWQgYWZ0ZXIgbGlzdCBtYXJrZXIpXG4gIHRoaXMubGluZSAgICAgICA9IDA7IC8vIGxpbmUgaW5kZXggaW4gc3JjXG4gIHRoaXMubGluZU1heCAgICA9IDA7IC8vIGxpbmVzIGNvdW50XG4gIHRoaXMudGlnaHQgICAgICA9IGZhbHNlOyAgLy8gbG9vc2UvdGlnaHQgbW9kZSBmb3IgbGlzdHNcbiAgdGhpcy5kZEluZGVudCAgID0gLTE7IC8vIGluZGVudCBvZiB0aGUgY3VycmVudCBkZCBibG9jayAoLTEgaWYgdGhlcmUgaXNuJ3QgYW55KVxuICB0aGlzLmxpc3RJbmRlbnQgPSAtMTsgLy8gaW5kZW50IG9mIHRoZSBjdXJyZW50IGxpc3QgYmxvY2sgKC0xIGlmIHRoZXJlIGlzbid0IGFueSlcblxuICAvLyBjYW4gYmUgJ2Jsb2NrcXVvdGUnLCAnbGlzdCcsICdyb290JywgJ3BhcmFncmFwaCcgb3IgJ3JlZmVyZW5jZSdcbiAgLy8gdXNlZCBpbiBsaXN0cyB0byBkZXRlcm1pbmUgaWYgdGhleSBpbnRlcnJ1cHQgYSBwYXJhZ3JhcGhcbiAgdGhpcy5wYXJlbnRUeXBlID0gJ3Jvb3QnO1xuXG4gIHRoaXMubGV2ZWwgPSAwO1xuXG4gIC8vIHJlbmRlcmVyXG4gIHRoaXMucmVzdWx0ID0gJyc7XG5cbiAgLy8gQ3JlYXRlIGNhY2hlc1xuICAvLyBHZW5lcmF0ZSBtYXJrZXJzLlxuICBzID0gdGhpcy5zcmM7XG4gIGluZGVudF9mb3VuZCA9IGZhbHNlO1xuXG4gIGZvciAoc3RhcnQgPSBwb3MgPSBpbmRlbnQgPSBvZmZzZXQgPSAwLCBsZW4gPSBzLmxlbmd0aDsgcG9zIDwgbGVuOyBwb3MrKykge1xuICAgIGNoID0gcy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICBpZiAoIWluZGVudF9mb3VuZCkge1xuICAgICAgaWYgKGlzU3BhY2UoY2gpKSB7XG4gICAgICAgIGluZGVudCsrO1xuXG4gICAgICAgIGlmIChjaCA9PT0gMHgwOSkge1xuICAgICAgICAgIG9mZnNldCArPSA0IC0gb2Zmc2V0ICUgNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGVudF9mb3VuZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoID09PSAweDBBIHx8IHBvcyA9PT0gbGVuIC0gMSkge1xuICAgICAgaWYgKGNoICE9PSAweDBBKSB7IHBvcysrOyB9XG4gICAgICB0aGlzLmJNYXJrcy5wdXNoKHN0YXJ0KTtcbiAgICAgIHRoaXMuZU1hcmtzLnB1c2gocG9zKTtcbiAgICAgIHRoaXMudFNoaWZ0LnB1c2goaW5kZW50KTtcbiAgICAgIHRoaXMuc0NvdW50LnB1c2gob2Zmc2V0KTtcbiAgICAgIHRoaXMuYnNDb3VudC5wdXNoKDApO1xuXG4gICAgICBpbmRlbnRfZm91bmQgPSBmYWxzZTtcbiAgICAgIGluZGVudCA9IDA7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgICAgc3RhcnQgPSBwb3MgKyAxO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1c2ggZmFrZSBlbnRyeSB0byBzaW1wbGlmeSBjYWNoZSBib3VuZHMgY2hlY2tzXG4gIHRoaXMuYk1hcmtzLnB1c2gocy5sZW5ndGgpO1xuICB0aGlzLmVNYXJrcy5wdXNoKHMubGVuZ3RoKTtcbiAgdGhpcy50U2hpZnQucHVzaCgwKTtcbiAgdGhpcy5zQ291bnQucHVzaCgwKTtcbiAgdGhpcy5ic0NvdW50LnB1c2goMCk7XG5cbiAgdGhpcy5saW5lTWF4ID0gdGhpcy5iTWFya3MubGVuZ3RoIC0gMTsgLy8gZG9uJ3QgY291bnQgbGFzdCBmYWtlIGxpbmVcbn1cblxuLy8gUHVzaCBuZXcgdG9rZW4gdG8gXCJzdHJlYW1cIi5cbi8vXG5TdGF0ZUJsb2NrLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHR5cGUsIHRhZywgbmVzdGluZykge1xuICB2YXIgdG9rZW4gPSBuZXcgVG9rZW4odHlwZSwgdGFnLCBuZXN0aW5nKTtcbiAgdG9rZW4uYmxvY2sgPSB0cnVlO1xuXG4gIGlmIChuZXN0aW5nIDwgMCkgdGhpcy5sZXZlbC0tOyAvLyBjbG9zaW5nIHRhZ1xuICB0b2tlbi5sZXZlbCA9IHRoaXMubGV2ZWw7XG4gIGlmIChuZXN0aW5nID4gMCkgdGhpcy5sZXZlbCsrOyAvLyBvcGVuaW5nIHRhZ1xuXG4gIHRoaXMudG9rZW5zLnB1c2godG9rZW4pO1xuICByZXR1cm4gdG9rZW47XG59O1xuXG5TdGF0ZUJsb2NrLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eShsaW5lKSB7XG4gIHJldHVybiB0aGlzLmJNYXJrc1tsaW5lXSArIHRoaXMudFNoaWZ0W2xpbmVdID49IHRoaXMuZU1hcmtzW2xpbmVdO1xufTtcblxuU3RhdGVCbG9jay5wcm90b3R5cGUuc2tpcEVtcHR5TGluZXMgPSBmdW5jdGlvbiBza2lwRW1wdHlMaW5lcyhmcm9tKSB7XG4gIGZvciAodmFyIG1heCA9IHRoaXMubGluZU1heDsgZnJvbSA8IG1heDsgZnJvbSsrKSB7XG4gICAgaWYgKHRoaXMuYk1hcmtzW2Zyb21dICsgdGhpcy50U2hpZnRbZnJvbV0gPCB0aGlzLmVNYXJrc1tmcm9tXSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmcm9tO1xufTtcblxuLy8gU2tpcCBzcGFjZXMgZnJvbSBnaXZlbiBwb3NpdGlvbi5cblN0YXRlQmxvY2sucHJvdG90eXBlLnNraXBTcGFjZXMgPSBmdW5jdGlvbiBza2lwU3BhY2VzKHBvcykge1xuICB2YXIgY2g7XG5cbiAgZm9yICh2YXIgbWF4ID0gdGhpcy5zcmMubGVuZ3RoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgY2ggPSB0aGlzLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG4gICAgaWYgKCFpc1NwYWNlKGNoKSkgeyBicmVhazsgfVxuICB9XG4gIHJldHVybiBwb3M7XG59O1xuXG4vLyBTa2lwIHNwYWNlcyBmcm9tIGdpdmVuIHBvc2l0aW9uIGluIHJldmVyc2UuXG5TdGF0ZUJsb2NrLnByb3RvdHlwZS5za2lwU3BhY2VzQmFjayA9IGZ1bmN0aW9uIHNraXBTcGFjZXNCYWNrKHBvcywgbWluKSB7XG4gIGlmIChwb3MgPD0gbWluKSB7IHJldHVybiBwb3M7IH1cblxuICB3aGlsZSAocG9zID4gbWluKSB7XG4gICAgaWYgKCFpc1NwYWNlKHRoaXMuc3JjLmNoYXJDb2RlQXQoLS1wb3MpKSkgeyByZXR1cm4gcG9zICsgMTsgfVxuICB9XG4gIHJldHVybiBwb3M7XG59O1xuXG4vLyBTa2lwIGNoYXIgY29kZXMgZnJvbSBnaXZlbiBwb3NpdGlvblxuU3RhdGVCbG9jay5wcm90b3R5cGUuc2tpcENoYXJzID0gZnVuY3Rpb24gc2tpcENoYXJzKHBvcywgY29kZSkge1xuICBmb3IgKHZhciBtYXggPSB0aGlzLnNyYy5sZW5ndGg7IHBvcyA8IG1heDsgcG9zKyspIHtcbiAgICBpZiAodGhpcy5zcmMuY2hhckNvZGVBdChwb3MpICE9PSBjb2RlKSB7IGJyZWFrOyB9XG4gIH1cbiAgcmV0dXJuIHBvcztcbn07XG5cbi8vIFNraXAgY2hhciBjb2RlcyByZXZlcnNlIGZyb20gZ2l2ZW4gcG9zaXRpb24gLSAxXG5TdGF0ZUJsb2NrLnByb3RvdHlwZS5za2lwQ2hhcnNCYWNrID0gZnVuY3Rpb24gc2tpcENoYXJzQmFjayhwb3MsIGNvZGUsIG1pbikge1xuICBpZiAocG9zIDw9IG1pbikgeyByZXR1cm4gcG9zOyB9XG5cbiAgd2hpbGUgKHBvcyA+IG1pbikge1xuICAgIGlmIChjb2RlICE9PSB0aGlzLnNyYy5jaGFyQ29kZUF0KC0tcG9zKSkgeyByZXR1cm4gcG9zICsgMTsgfVxuICB9XG4gIHJldHVybiBwb3M7XG59O1xuXG4vLyBjdXQgbGluZXMgcmFuZ2UgZnJvbSBzb3VyY2UuXG5TdGF0ZUJsb2NrLnByb3RvdHlwZS5nZXRMaW5lcyA9IGZ1bmN0aW9uIGdldExpbmVzKGJlZ2luLCBlbmQsIGluZGVudCwga2VlcExhc3RMRikge1xuICB2YXIgaSwgbGluZUluZGVudCwgY2gsIGZpcnN0LCBsYXN0LCBxdWV1ZSwgbGluZVN0YXJ0LFxuICAgICAgbGluZSA9IGJlZ2luO1xuXG4gIGlmIChiZWdpbiA+PSBlbmQpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBxdWV1ZSA9IG5ldyBBcnJheShlbmQgLSBiZWdpbik7XG5cbiAgZm9yIChpID0gMDsgbGluZSA8IGVuZDsgbGluZSsrLCBpKyspIHtcbiAgICBsaW5lSW5kZW50ID0gMDtcbiAgICBsaW5lU3RhcnQgPSBmaXJzdCA9IHRoaXMuYk1hcmtzW2xpbmVdO1xuXG4gICAgaWYgKGxpbmUgKyAxIDwgZW5kIHx8IGtlZXBMYXN0TEYpIHtcbiAgICAgIC8vIE5vIG5lZWQgZm9yIGJvdW5kcyBjaGVjayBiZWNhdXNlIHdlIGhhdmUgZmFrZSBlbnRyeSBvbiB0YWlsLlxuICAgICAgbGFzdCA9IHRoaXMuZU1hcmtzW2xpbmVdICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IHRoaXMuZU1hcmtzW2xpbmVdO1xuICAgIH1cblxuICAgIHdoaWxlIChmaXJzdCA8IGxhc3QgJiYgbGluZUluZGVudCA8IGluZGVudCkge1xuICAgICAgY2ggPSB0aGlzLnNyYy5jaGFyQ29kZUF0KGZpcnN0KTtcblxuICAgICAgaWYgKGlzU3BhY2UoY2gpKSB7XG4gICAgICAgIGlmIChjaCA9PT0gMHgwOSkge1xuICAgICAgICAgIGxpbmVJbmRlbnQgKz0gNCAtIChsaW5lSW5kZW50ICsgdGhpcy5ic0NvdW50W2xpbmVdKSAlIDQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGluZUluZGVudCsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpcnN0IC0gbGluZVN0YXJ0IDwgdGhpcy50U2hpZnRbbGluZV0pIHtcbiAgICAgICAgLy8gcGF0Y2hlZCB0U2hpZnQgbWFza2VkIGNoYXJhY3RlcnMgdG8gbG9vayBsaWtlIHNwYWNlcyAoYmxvY2txdW90ZXMsIGxpc3QgbWFya2VycylcbiAgICAgICAgbGluZUluZGVudCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGZpcnN0Kys7XG4gICAgfVxuXG4gICAgaWYgKGxpbmVJbmRlbnQgPiBpbmRlbnQpIHtcbiAgICAgIC8vIHBhcnRpYWxseSBleHBhbmRpbmcgdGFicyBpbiBjb2RlIGJsb2NrcywgZS5nICdcXHRcXHRmb29iYXInXG4gICAgICAvLyB3aXRoIGluZGVudD0yIGJlY29tZXMgJyAgXFx0Zm9vYmFyJ1xuICAgICAgcXVldWVbaV0gPSBuZXcgQXJyYXkobGluZUluZGVudCAtIGluZGVudCArIDEpLmpvaW4oJyAnKSArIHRoaXMuc3JjLnNsaWNlKGZpcnN0LCBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVldWVbaV0gPSB0aGlzLnNyYy5zbGljZShmaXJzdCwgbGFzdCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHF1ZXVlLmpvaW4oJycpO1xufTtcblxuLy8gcmUtZXhwb3J0IFRva2VuIGNsYXNzIHRvIHVzZSBpbiBibG9jayBydWxlc1xuU3RhdGVCbG9jay5wcm90b3R5cGUuVG9rZW4gPSBUb2tlbjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlQmxvY2s7XG4iLCIvKiogaW50ZXJuYWxcbiAqIGNsYXNzIFBhcnNlcklubGluZVxuICpcbiAqIFRva2VuaXplcyBwYXJhZ3JhcGggY29udGVudC5cbiAqKi9cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgUnVsZXIgICAgICAgICAgID0gcmVxdWlyZSgnLi9ydWxlcicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBQYXJzZXIgcnVsZXNcblxudmFyIF9ydWxlcyA9IFtcbiAgWyAndGV4dCcsICAgICAgICAgICAgcmVxdWlyZSgnLi9ydWxlc19pbmxpbmUvdGV4dCcpIF0sXG4gIFsgJ25ld2xpbmUnLCAgICAgICAgIHJlcXVpcmUoJy4vcnVsZXNfaW5saW5lL25ld2xpbmUnKSBdLFxuICBbICdlc2NhcGUnLCAgICAgICAgICByZXF1aXJlKCcuL3J1bGVzX2lubGluZS9lc2NhcGUnKSBdLFxuICBbICdiYWNrdGlja3MnLCAgICAgICByZXF1aXJlKCcuL3J1bGVzX2lubGluZS9iYWNrdGlja3MnKSBdLFxuICBbICdzdHJpa2V0aHJvdWdoJywgICByZXF1aXJlKCcuL3J1bGVzX2lubGluZS9zdHJpa2V0aHJvdWdoJykudG9rZW5pemUgXSxcbiAgWyAnZW1waGFzaXMnLCAgICAgICAgcmVxdWlyZSgnLi9ydWxlc19pbmxpbmUvZW1waGFzaXMnKS50b2tlbml6ZSBdLFxuICBbICdsaW5rJywgICAgICAgICAgICByZXF1aXJlKCcuL3J1bGVzX2lubGluZS9saW5rJykgXSxcbiAgWyAnaW1hZ2UnLCAgICAgICAgICAgcmVxdWlyZSgnLi9ydWxlc19pbmxpbmUvaW1hZ2UnKSBdLFxuICBbICdhdXRvbGluaycsICAgICAgICByZXF1aXJlKCcuL3J1bGVzX2lubGluZS9hdXRvbGluaycpIF0sXG4gIFsgJ2h0bWxfaW5saW5lJywgICAgIHJlcXVpcmUoJy4vcnVsZXNfaW5saW5lL2h0bWxfaW5saW5lJykgXSxcbiAgWyAnZW50aXR5JywgICAgICAgICAgcmVxdWlyZSgnLi9ydWxlc19pbmxpbmUvZW50aXR5JykgXVxuXTtcblxudmFyIF9ydWxlczIgPSBbXG4gIFsgJ2JhbGFuY2VfcGFpcnMnLCAgIHJlcXVpcmUoJy4vcnVsZXNfaW5saW5lL2JhbGFuY2VfcGFpcnMnKSBdLFxuICBbICdzdHJpa2V0aHJvdWdoJywgICByZXF1aXJlKCcuL3J1bGVzX2lubGluZS9zdHJpa2V0aHJvdWdoJykucG9zdFByb2Nlc3MgXSxcbiAgWyAnZW1waGFzaXMnLCAgICAgICAgcmVxdWlyZSgnLi9ydWxlc19pbmxpbmUvZW1waGFzaXMnKS5wb3N0UHJvY2VzcyBdLFxuICBbICd0ZXh0X2NvbGxhcHNlJywgICByZXF1aXJlKCcuL3J1bGVzX2lubGluZS90ZXh0X2NvbGxhcHNlJykgXVxuXTtcblxuXG4vKipcbiAqIG5ldyBQYXJzZXJJbmxpbmUoKVxuICoqL1xuZnVuY3Rpb24gUGFyc2VySW5saW5lKCkge1xuICB2YXIgaTtcblxuICAvKipcbiAgICogUGFyc2VySW5saW5lI3J1bGVyIC0+IFJ1bGVyXG4gICAqXG4gICAqIFtbUnVsZXJdXSBpbnN0YW5jZS4gS2VlcCBjb25maWd1cmF0aW9uIG9mIGlubGluZSBydWxlcy5cbiAgICoqL1xuICB0aGlzLnJ1bGVyID0gbmV3IFJ1bGVyKCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IF9ydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucnVsZXIucHVzaChfcnVsZXNbaV1bMF0sIF9ydWxlc1tpXVsxXSk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VySW5saW5lI3J1bGVyMiAtPiBSdWxlclxuICAgKlxuICAgKiBbW1J1bGVyXV0gaW5zdGFuY2UuIFNlY29uZCBydWxlciB1c2VkIGZvciBwb3N0LXByb2Nlc3NpbmdcbiAgICogKGUuZy4gaW4gZW1waGFzaXMtbGlrZSBydWxlcykuXG4gICAqKi9cbiAgdGhpcy5ydWxlcjIgPSBuZXcgUnVsZXIoKTtcblxuICBmb3IgKGkgPSAwOyBpIDwgX3J1bGVzMi5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucnVsZXIyLnB1c2goX3J1bGVzMltpXVswXSwgX3J1bGVzMltpXVsxXSk7XG4gIH1cbn1cblxuXG4vLyBTa2lwIHNpbmdsZSB0b2tlbiBieSBydW5uaW5nIGFsbCBydWxlcyBpbiB2YWxpZGF0aW9uIG1vZGU7XG4vLyByZXR1cm5zIGB0cnVlYCBpZiBhbnkgcnVsZSByZXBvcnRlZCBzdWNjZXNzXG4vL1xuUGFyc2VySW5saW5lLnByb3RvdHlwZS5za2lwVG9rZW4gPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgdmFyIG9rLCBpLCBwb3MgPSBzdGF0ZS5wb3MsXG4gICAgICBydWxlcyA9IHRoaXMucnVsZXIuZ2V0UnVsZXMoJycpLFxuICAgICAgbGVuID0gcnVsZXMubGVuZ3RoLFxuICAgICAgbWF4TmVzdGluZyA9IHN0YXRlLm1kLm9wdGlvbnMubWF4TmVzdGluZyxcbiAgICAgIGNhY2hlID0gc3RhdGUuY2FjaGU7XG5cblxuICBpZiAodHlwZW9mIGNhY2hlW3Bvc10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3RhdGUucG9zID0gY2FjaGVbcG9zXTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc3RhdGUubGV2ZWwgPCBtYXhOZXN0aW5nKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvLyBJbmNyZW1lbnQgc3RhdGUubGV2ZWwgYW5kIGRlY3JlbWVudCBpdCBsYXRlciB0byBsaW1pdCByZWN1cnNpb24uXG4gICAgICAvLyBJdCdzIGhhcm1sZXNzIHRvIGRvIGhlcmUsIGJlY2F1c2Ugbm8gdG9rZW5zIGFyZSBjcmVhdGVkLiBCdXQgaWRlYWxseSxcbiAgICAgIC8vIHdlJ2QgbmVlZCBhIHNlcGFyYXRlIHByaXZhdGUgc3RhdGUgdmFyaWFibGUgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgIC8vXG4gICAgICBzdGF0ZS5sZXZlbCsrO1xuICAgICAgb2sgPSBydWxlc1tpXShzdGF0ZSwgdHJ1ZSk7XG4gICAgICBzdGF0ZS5sZXZlbC0tO1xuXG4gICAgICBpZiAob2spIHsgYnJlYWs7IH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVG9vIG11Y2ggbmVzdGluZywganVzdCBza2lwIHVudGlsIHRoZSBlbmQgb2YgdGhlIHBhcmFncmFwaC5cbiAgICAvL1xuICAgIC8vIE5PVEU6IHRoaXMgd2lsbCBjYXVzZSBsaW5rcyB0byBiZWhhdmUgaW5jb3JyZWN0bHkgaW4gdGhlIGZvbGxvd2luZyBjYXNlLFxuICAgIC8vICAgICAgIHdoZW4gYW4gYW1vdW50IG9mIGBbYCBpcyBleGFjdGx5IGVxdWFsIHRvIGBtYXhOZXN0aW5nICsgMWA6XG4gICAgLy9cbiAgICAvLyAgICAgICBbW1tbW1tbW1tbW1tbW1tbW1tbW1tmb29dKClcbiAgICAvL1xuICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIHdvcmthcm91bmQgd2hlbiBDTSBzdGFuZGFyZCB3aWxsIGFsbG93IG5lc3RlZCBsaW5rc1xuICAgIC8vICAgICAgICh3ZSBjYW4gcmVwbGFjZSBpdCBieSBwcmV2ZW50aW5nIGxpbmtzIGZyb20gYmVpbmcgcGFyc2VkIGluXG4gICAgLy8gICAgICAgdmFsaWRhdGlvbiBtb2RlKVxuICAgIC8vXG4gICAgc3RhdGUucG9zID0gc3RhdGUucG9zTWF4O1xuICB9XG5cbiAgaWYgKCFvaykgeyBzdGF0ZS5wb3MrKzsgfVxuICBjYWNoZVtwb3NdID0gc3RhdGUucG9zO1xufTtcblxuXG4vLyBHZW5lcmF0ZSB0b2tlbnMgZm9yIGlucHV0IHJhbmdlXG4vL1xuUGFyc2VySW5saW5lLnByb3RvdHlwZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB2YXIgb2ssIGksXG4gICAgICBydWxlcyA9IHRoaXMucnVsZXIuZ2V0UnVsZXMoJycpLFxuICAgICAgbGVuID0gcnVsZXMubGVuZ3RoLFxuICAgICAgZW5kID0gc3RhdGUucG9zTWF4LFxuICAgICAgbWF4TmVzdGluZyA9IHN0YXRlLm1kLm9wdGlvbnMubWF4TmVzdGluZztcblxuICB3aGlsZSAoc3RhdGUucG9zIDwgZW5kKSB7XG4gICAgLy8gVHJ5IGFsbCBwb3NzaWJsZSBydWxlcy5cbiAgICAvLyBPbiBzdWNjZXNzLCBydWxlIHNob3VsZDpcbiAgICAvL1xuICAgIC8vIC0gdXBkYXRlIGBzdGF0ZS5wb3NgXG4gICAgLy8gLSB1cGRhdGUgYHN0YXRlLnRva2Vuc2BcbiAgICAvLyAtIHJldHVybiB0cnVlXG5cbiAgICBpZiAoc3RhdGUubGV2ZWwgPCBtYXhOZXN0aW5nKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgb2sgPSBydWxlc1tpXShzdGF0ZSwgZmFsc2UpO1xuICAgICAgICBpZiAob2spIHsgYnJlYWs7IH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2spIHtcbiAgICAgIGlmIChzdGF0ZS5wb3MgPj0gZW5kKSB7IGJyZWFrOyB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBzdGF0ZS5wZW5kaW5nICs9IHN0YXRlLnNyY1tzdGF0ZS5wb3MrK107XG4gIH1cblxuICBpZiAoc3RhdGUucGVuZGluZykge1xuICAgIHN0YXRlLnB1c2hQZW5kaW5nKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBQYXJzZXJJbmxpbmUucGFyc2Uoc3RyLCBtZCwgZW52LCBvdXRUb2tlbnMpXG4gKlxuICogUHJvY2VzcyBpbnB1dCBzdHJpbmcgYW5kIHB1c2ggaW5saW5lIHRva2VucyBpbnRvIGBvdXRUb2tlbnNgXG4gKiovXG5QYXJzZXJJbmxpbmUucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHN0ciwgbWQsIGVudiwgb3V0VG9rZW5zKSB7XG4gIHZhciBpLCBydWxlcywgbGVuO1xuICB2YXIgc3RhdGUgPSBuZXcgdGhpcy5TdGF0ZShzdHIsIG1kLCBlbnYsIG91dFRva2Vucyk7XG5cbiAgdGhpcy50b2tlbml6ZShzdGF0ZSk7XG5cbiAgcnVsZXMgPSB0aGlzLnJ1bGVyMi5nZXRSdWxlcygnJyk7XG4gIGxlbiA9IHJ1bGVzLmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBydWxlc1tpXShzdGF0ZSk7XG4gIH1cbn07XG5cblxuUGFyc2VySW5saW5lLnByb3RvdHlwZS5TdGF0ZSA9IHJlcXVpcmUoJy4vcnVsZXNfaW5saW5lL3N0YXRlX2lubGluZScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VySW5saW5lO1xuIiwiLy8gU2tpcCB0ZXh0IGNoYXJhY3RlcnMgZm9yIHRleHQgdG9rZW4sIHBsYWNlIHRob3NlIHRvIHBlbmRpbmcgYnVmZmVyXG4vLyBhbmQgaW5jcmVtZW50IGN1cnJlbnQgcG9zXG5cbid1c2Ugc3RyaWN0JztcblxuXG4vLyBSdWxlIHRvIHNraXAgcHVyZSB0ZXh0XG4vLyAne30kJUB+Kz06JyByZXNlcnZlZCBmb3IgZXh0ZW50aW9uc1xuXG4vLyAhLCBcIiwgIywgJCwgJSwgJiwgJywgKCwgKSwgKiwgKywgLCwgLSwgLiwgLywgOiwgOywgPCwgPSwgPiwgPywgQCwgWywgXFwsIF0sIF4sIF8sIGAsIHssIHwsIH0sIG9yIH5cblxuLy8gISEhISBEb24ndCBjb25mdXNlIHdpdGggXCJNYXJrZG93biBBU0NJSSBQdW5jdHVhdGlvblwiIGNoYXJzXG4vLyBodHRwOi8vc3BlYy5jb21tb25tYXJrLm9yZy8wLjE1LyNhc2NpaS1wdW5jdHVhdGlvbi1jaGFyYWN0ZXJcbmZ1bmN0aW9uIGlzVGVybWluYXRvckNoYXIoY2gpIHtcbiAgc3dpdGNoIChjaCkge1xuICAgIGNhc2UgMHgwQS8qIFxcbiAqLzpcbiAgICBjYXNlIDB4MjEvKiAhICovOlxuICAgIGNhc2UgMHgyMy8qICMgKi86XG4gICAgY2FzZSAweDI0LyogJCAqLzpcbiAgICBjYXNlIDB4MjUvKiAlICovOlxuICAgIGNhc2UgMHgyNi8qICYgKi86XG4gICAgY2FzZSAweDJBLyogKiAqLzpcbiAgICBjYXNlIDB4MkIvKiArICovOlxuICAgIGNhc2UgMHgyRC8qIC0gKi86XG4gICAgY2FzZSAweDNBLyogOiAqLzpcbiAgICBjYXNlIDB4M0MvKiA8ICovOlxuICAgIGNhc2UgMHgzRC8qID0gKi86XG4gICAgY2FzZSAweDNFLyogPiAqLzpcbiAgICBjYXNlIDB4NDAvKiBAICovOlxuICAgIGNhc2UgMHg1Qi8qIFsgKi86XG4gICAgY2FzZSAweDVDLyogXFwgKi86XG4gICAgY2FzZSAweDVELyogXSAqLzpcbiAgICBjYXNlIDB4NUUvKiBeICovOlxuICAgIGNhc2UgMHg1Ri8qIF8gKi86XG4gICAgY2FzZSAweDYwLyogYCAqLzpcbiAgICBjYXNlIDB4N0IvKiB7ICovOlxuICAgIGNhc2UgMHg3RC8qIH0gKi86XG4gICAgY2FzZSAweDdFLyogfiAqLzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0ZXh0KHN0YXRlLCBzaWxlbnQpIHtcbiAgdmFyIHBvcyA9IHN0YXRlLnBvcztcblxuICB3aGlsZSAocG9zIDwgc3RhdGUucG9zTWF4ICYmICFpc1Rlcm1pbmF0b3JDaGFyKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykpKSB7XG4gICAgcG9zKys7XG4gIH1cblxuICBpZiAocG9zID09PSBzdGF0ZS5wb3MpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKCFzaWxlbnQpIHsgc3RhdGUucGVuZGluZyArPSBzdGF0ZS5zcmMuc2xpY2Uoc3RhdGUucG9zLCBwb3MpOyB9XG5cbiAgc3RhdGUucG9zID0gcG9zO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLy8gQWx0ZXJuYXRpdmUgaW1wbGVtZW50YXRpb24sIGZvciBtZW1vcnkuXG4vL1xuLy8gSXQgY29zdHMgMTAlIG9mIHBlcmZvcm1hbmNlLCBidXQgYWxsb3dzIGV4dGVuZCB0ZXJtaW5hdG9ycyBsaXN0LCBpZiBwbGFjZSBpdFxuLy8gdG8gYFBhcmNlcklubGluZWAgcHJvcGVydHkuIFByb2JhYmx5LCB3aWxsIHN3aXRjaCB0byBpdCBzb21ldGltZSwgc3VjaFxuLy8gZmxleGliaWxpdHkgcmVxdWlyZWQuXG5cbi8qXG52YXIgVEVSTUlOQVRPUl9SRSA9IC9bXFxuISMkJSYqK1xcLTo8PT5AW1xcXFxcXF1eX2B7fX5dLztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0ZXh0KHN0YXRlLCBzaWxlbnQpIHtcbiAgdmFyIHBvcyA9IHN0YXRlLnBvcyxcbiAgICAgIGlkeCA9IHN0YXRlLnNyYy5zbGljZShwb3MpLnNlYXJjaChURVJNSU5BVE9SX1JFKTtcblxuICAvLyBmaXJzdCBjaGFyIGlzIHRlcm1pbmF0b3IgLT4gZW1wdHkgdGV4dFxuICBpZiAoaWR4ID09PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIG5vIHRlcm1pbmF0b3IgLT4gdGV4dCB0aWxsIGVuZCBvZiBzdHJpbmdcbiAgaWYgKGlkeCA8IDApIHtcbiAgICBpZiAoIXNpbGVudCkgeyBzdGF0ZS5wZW5kaW5nICs9IHN0YXRlLnNyYy5zbGljZShwb3MpOyB9XG4gICAgc3RhdGUucG9zID0gc3RhdGUuc3JjLmxlbmd0aDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghc2lsZW50KSB7IHN0YXRlLnBlbmRpbmcgKz0gc3RhdGUuc3JjLnNsaWNlKHBvcywgcG9zICsgaWR4KTsgfVxuXG4gIHN0YXRlLnBvcyArPSBpZHg7XG5cbiAgcmV0dXJuIHRydWU7XG59OyovXG4iLCIvLyBQcm9jZWVzcyAnXFxuJ1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc1NwYWNlID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNTcGFjZTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5ld2xpbmUoc3RhdGUsIHNpbGVudCkge1xuICB2YXIgcG1heCwgbWF4LCBwb3MgPSBzdGF0ZS5wb3M7XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4MEEvKiBcXG4gKi8pIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgcG1heCA9IHN0YXRlLnBlbmRpbmcubGVuZ3RoIC0gMTtcbiAgbWF4ID0gc3RhdGUucG9zTWF4O1xuXG4gIC8vICcgIFxcbicgLT4gaGFyZGJyZWFrXG4gIC8vIExvb2t1cCBpbiBwZW5kaW5nIGNoYXJzIGlzIGJhZCBwcmFjdGljZSEgRG9uJ3QgY29weSB0byBvdGhlciBydWxlcyFcbiAgLy8gUGVuZGluZyBzdHJpbmcgaXMgc3RvcmVkIGluIGNvbmNhdCBtb2RlLCBpbmRleGVkIGxvb2t1cHMgd2lsbCBjYXVzZVxuICAvLyBjb252ZXJ0aW9uIHRvIGZsYXQgbW9kZS5cbiAgaWYgKCFzaWxlbnQpIHtcbiAgICBpZiAocG1heCA+PSAwICYmIHN0YXRlLnBlbmRpbmcuY2hhckNvZGVBdChwbWF4KSA9PT0gMHgyMCkge1xuICAgICAgaWYgKHBtYXggPj0gMSAmJiBzdGF0ZS5wZW5kaW5nLmNoYXJDb2RlQXQocG1heCAtIDEpID09PSAweDIwKSB7XG4gICAgICAgIHN0YXRlLnBlbmRpbmcgPSBzdGF0ZS5wZW5kaW5nLnJlcGxhY2UoLyArJC8sICcnKTtcbiAgICAgICAgc3RhdGUucHVzaCgnaGFyZGJyZWFrJywgJ2JyJywgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5wZW5kaW5nID0gc3RhdGUucGVuZGluZy5zbGljZSgwLCAtMSk7XG4gICAgICAgIHN0YXRlLnB1c2goJ3NvZnRicmVhaycsICdicicsIDApO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnB1c2goJ3NvZnRicmVhaycsICdicicsIDApO1xuICAgIH1cbiAgfVxuXG4gIHBvcysrO1xuXG4gIC8vIHNraXAgaGVhZGluZyBzcGFjZXMgZm9yIG5leHQgbGluZVxuICB3aGlsZSAocG9zIDwgbWF4ICYmIGlzU3BhY2Uoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSkpIHsgcG9zKys7IH1cblxuICBzdGF0ZS5wb3MgPSBwb3M7XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIFByb2Nlc3MgZXNjYXBlZCBjaGFycyBhbmQgaGFyZGJyZWFrc1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc1NwYWNlID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNTcGFjZTtcblxudmFyIEVTQ0FQRUQgPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykgeyBFU0NBUEVELnB1c2goMCk7IH1cblxuJ1xcXFwhXCIjJCUmXFwnKCkqKywuLzo7PD0+P0BbXV5fYHt8fX4tJ1xuICAuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNoKSB7IEVTQ0FQRURbY2guY2hhckNvZGVBdCgwKV0gPSAxOyB9KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVzY2FwZShzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBjaCwgcG9zID0gc3RhdGUucG9zLCBtYXggPSBzdGF0ZS5wb3NNYXg7XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4NUMvKiBcXCAqLykgeyByZXR1cm4gZmFsc2U7IH1cblxuICBwb3MrKztcblxuICBpZiAocG9zIDwgbWF4KSB7XG4gICAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgaWYgKGNoIDwgMjU2ICYmIEVTQ0FQRURbY2hdICE9PSAwKSB7XG4gICAgICBpZiAoIXNpbGVudCkgeyBzdGF0ZS5wZW5kaW5nICs9IHN0YXRlLnNyY1twb3NdOyB9XG4gICAgICBzdGF0ZS5wb3MgKz0gMjtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChjaCA9PT0gMHgwQSkge1xuICAgICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgc3RhdGUucHVzaCgnaGFyZGJyZWFrJywgJ2JyJywgMCk7XG4gICAgICB9XG5cbiAgICAgIHBvcysrO1xuICAgICAgLy8gc2tpcCBsZWFkaW5nIHdoaXRlc3BhY2VzIGZyb20gbmV4dCBsaW5lXG4gICAgICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgICAgIGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgaWYgKCFpc1NwYWNlKGNoKSkgeyBicmVhazsgfVxuICAgICAgICBwb3MrKztcbiAgICAgIH1cblxuICAgICAgc3RhdGUucG9zID0gcG9zO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzaWxlbnQpIHsgc3RhdGUucGVuZGluZyArPSAnXFxcXCc7IH1cbiAgc3RhdGUucG9zKys7XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIFBhcnNlIGJhY2t0aWNrc1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmFja3RpY2soc3RhdGUsIHNpbGVudCkge1xuICB2YXIgc3RhcnQsIG1heCwgbWFya2VyLCBtYXRjaFN0YXJ0LCBtYXRjaEVuZCwgdG9rZW4sXG4gICAgICBwb3MgPSBzdGF0ZS5wb3MsXG4gICAgICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgaWYgKGNoICE9PSAweDYwLyogYCAqLykgeyByZXR1cm4gZmFsc2U7IH1cblxuICBzdGFydCA9IHBvcztcbiAgcG9zKys7XG4gIG1heCA9IHN0YXRlLnBvc01heDtcblxuICB3aGlsZSAocG9zIDwgbWF4ICYmIHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgPT09IDB4NjAvKiBgICovKSB7IHBvcysrOyB9XG5cbiAgbWFya2VyID0gc3RhdGUuc3JjLnNsaWNlKHN0YXJ0LCBwb3MpO1xuXG4gIG1hdGNoU3RhcnQgPSBtYXRjaEVuZCA9IHBvcztcblxuICB3aGlsZSAoKG1hdGNoU3RhcnQgPSBzdGF0ZS5zcmMuaW5kZXhPZignYCcsIG1hdGNoRW5kKSkgIT09IC0xKSB7XG4gICAgbWF0Y2hFbmQgPSBtYXRjaFN0YXJ0ICsgMTtcblxuICAgIHdoaWxlIChtYXRjaEVuZCA8IG1heCAmJiBzdGF0ZS5zcmMuY2hhckNvZGVBdChtYXRjaEVuZCkgPT09IDB4NjAvKiBgICovKSB7IG1hdGNoRW5kKys7IH1cblxuICAgIGlmIChtYXRjaEVuZCAtIG1hdGNoU3RhcnQgPT09IG1hcmtlci5sZW5ndGgpIHtcbiAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgIHRva2VuICAgICAgICAgPSBzdGF0ZS5wdXNoKCdjb2RlX2lubGluZScsICdjb2RlJywgMCk7XG4gICAgICAgIHRva2VuLm1hcmt1cCAgPSBtYXJrZXI7XG4gICAgICAgIHRva2VuLmNvbnRlbnQgPSBzdGF0ZS5zcmMuc2xpY2UocG9zLCBtYXRjaFN0YXJ0KVxuICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgJyAnKVxuICAgICAgICAgIC5yZXBsYWNlKC9eICguKykgJC8sICckMScpO1xuICAgICAgfVxuICAgICAgc3RhdGUucG9zID0gbWF0Y2hFbmQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXNpbGVudCkgeyBzdGF0ZS5wZW5kaW5nICs9IG1hcmtlcjsgfVxuICBzdGF0ZS5wb3MgKz0gbWFya2VyLmxlbmd0aDtcbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gUHJvY2VzcyBbbGlua10oPHRvPiBcInN0dWZmXCIpXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG5vcm1hbGl6ZVJlZmVyZW5jZSAgID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykubm9ybWFsaXplUmVmZXJlbmNlO1xudmFyIGlzU3BhY2UgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNTcGFjZTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxpbmsoc3RhdGUsIHNpbGVudCkge1xuICB2YXIgYXR0cnMsXG4gICAgICBjb2RlLFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbEVuZCxcbiAgICAgIGxhYmVsU3RhcnQsXG4gICAgICBwb3MsXG4gICAgICByZXMsXG4gICAgICByZWYsXG4gICAgICB0aXRsZSxcbiAgICAgIHRva2VuLFxuICAgICAgaHJlZiA9ICcnLFxuICAgICAgb2xkUG9zID0gc3RhdGUucG9zLFxuICAgICAgbWF4ID0gc3RhdGUucG9zTWF4LFxuICAgICAgc3RhcnQgPSBzdGF0ZS5wb3MsXG4gICAgICBwYXJzZVJlZmVyZW5jZSA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHN0YXRlLnBvcykgIT09IDB4NUIvKiBbICovKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxhYmVsU3RhcnQgPSBzdGF0ZS5wb3MgKyAxO1xuICBsYWJlbEVuZCA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rTGFiZWwoc3RhdGUsIHN0YXRlLnBvcywgdHJ1ZSk7XG5cbiAgLy8gcGFyc2VyIGZhaWxlZCB0byBmaW5kICddJywgc28gaXQncyBub3QgYSB2YWxpZCBsaW5rXG4gIGlmIChsYWJlbEVuZCA8IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgcG9zID0gbGFiZWxFbmQgKyAxO1xuICBpZiAocG9zIDwgbWF4ICYmIHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgPT09IDB4MjgvKiAoICovKSB7XG4gICAgLy9cbiAgICAvLyBJbmxpbmUgbGlua1xuICAgIC8vXG5cbiAgICAvLyBtaWdodCBoYXZlIGZvdW5kIGEgdmFsaWQgc2hvcnRjdXQgbGluaywgZGlzYWJsZSByZWZlcmVuY2UgcGFyc2luZ1xuICAgIHBhcnNlUmVmZXJlbmNlID0gZmFsc2U7XG5cbiAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgIC8vICAgICAgICBeXiBza2lwcGluZyB0aGVzZSBzcGFjZXNcbiAgICBwb3MrKztcbiAgICBmb3IgKDsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgICAgY29kZSA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICBpZiAoIWlzU3BhY2UoY29kZSkgJiYgY29kZSAhPT0gMHgwQSkgeyBicmVhazsgfVxuICAgIH1cbiAgICBpZiAocG9zID49IG1heCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIC8vIFtsaW5rXSggIDxocmVmPiAgXCJ0aXRsZVwiICApXG4gICAgLy8gICAgICAgICAgXl5eXl5eIHBhcnNpbmcgbGluayBkZXN0aW5hdGlvblxuICAgIHN0YXJ0ID0gcG9zO1xuICAgIHJlcyA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rRGVzdGluYXRpb24oc3RhdGUuc3JjLCBwb3MsIHN0YXRlLnBvc01heCk7XG4gICAgaWYgKHJlcy5vaykge1xuICAgICAgaHJlZiA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsocmVzLnN0cik7XG4gICAgICBpZiAoc3RhdGUubWQudmFsaWRhdGVMaW5rKGhyZWYpKSB7XG4gICAgICAgIHBvcyA9IHJlcy5wb3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBocmVmID0gJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAvLyAgICAgICAgICAgICAgICBeXiBza2lwcGluZyB0aGVzZSBzcGFjZXNcbiAgICBzdGFydCA9IHBvcztcbiAgICBmb3IgKDsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgICAgY29kZSA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICBpZiAoIWlzU3BhY2UoY29kZSkgJiYgY29kZSAhPT0gMHgwQSkgeyBicmVhazsgfVxuICAgIH1cblxuICAgIC8vIFtsaW5rXSggIDxocmVmPiAgXCJ0aXRsZVwiICApXG4gICAgLy8gICAgICAgICAgICAgICAgICBeXl5eXl5eIHBhcnNpbmcgbGluayB0aXRsZVxuICAgIHJlcyA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rVGl0bGUoc3RhdGUuc3JjLCBwb3MsIHN0YXRlLnBvc01heCk7XG4gICAgaWYgKHBvcyA8IG1heCAmJiBzdGFydCAhPT0gcG9zICYmIHJlcy5vaykge1xuICAgICAgdGl0bGUgPSByZXMuc3RyO1xuICAgICAgcG9zID0gcmVzLnBvcztcblxuICAgICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIF5eIHNraXBwaW5nIHRoZXNlIHNwYWNlc1xuICAgICAgZm9yICg7IHBvcyA8IG1heDsgcG9zKyspIHtcbiAgICAgICAgY29kZSA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgIGlmICghaXNTcGFjZShjb2RlKSAmJiBjb2RlICE9PSAweDBBKSB7IGJyZWFrOyB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHBvcyA+PSBtYXggfHwgc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gMHgyOS8qICkgKi8pIHtcbiAgICAgIC8vIHBhcnNpbmcgYSB2YWxpZCBzaG9ydGN1dCBsaW5rIGZhaWxlZCwgZmFsbGJhY2sgdG8gcmVmZXJlbmNlXG4gICAgICBwYXJzZVJlZmVyZW5jZSA9IHRydWU7XG4gICAgfVxuICAgIHBvcysrO1xuICB9XG5cbiAgaWYgKHBhcnNlUmVmZXJlbmNlKSB7XG4gICAgLy9cbiAgICAvLyBMaW5rIHJlZmVyZW5jZVxuICAgIC8vXG4gICAgaWYgKHR5cGVvZiBzdGF0ZS5lbnYucmVmZXJlbmNlcyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICBpZiAocG9zIDwgbWF4ICYmIHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgPT09IDB4NUIvKiBbICovKSB7XG4gICAgICBzdGFydCA9IHBvcyArIDE7XG4gICAgICBwb3MgPSBzdGF0ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0xhYmVsKHN0YXRlLCBwb3MpO1xuICAgICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAgIGxhYmVsID0gc3RhdGUuc3JjLnNsaWNlKHN0YXJ0LCBwb3MrKyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3MgPSBsYWJlbEVuZCArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvcyA9IGxhYmVsRW5kICsgMTtcbiAgICB9XG5cbiAgICAvLyBjb3ZlcnMgbGFiZWwgPT09ICcnIGFuZCBsYWJlbCA9PT0gdW5kZWZpbmVkXG4gICAgLy8gKGNvbGxhcHNlZCByZWZlcmVuY2UgbGluayBhbmQgc2hvcnRjdXQgcmVmZXJlbmNlIGxpbmsgcmVzcGVjdGl2ZWx5KVxuICAgIGlmICghbGFiZWwpIHsgbGFiZWwgPSBzdGF0ZS5zcmMuc2xpY2UobGFiZWxTdGFydCwgbGFiZWxFbmQpOyB9XG5cbiAgICByZWYgPSBzdGF0ZS5lbnYucmVmZXJlbmNlc1tub3JtYWxpemVSZWZlcmVuY2UobGFiZWwpXTtcbiAgICBpZiAoIXJlZikge1xuICAgICAgc3RhdGUucG9zID0gb2xkUG9zO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBocmVmID0gcmVmLmhyZWY7XG4gICAgdGl0bGUgPSByZWYudGl0bGU7XG4gIH1cblxuICAvL1xuICAvLyBXZSBmb3VuZCB0aGUgZW5kIG9mIHRoZSBsaW5rLCBhbmQga25vdyBmb3IgYSBmYWN0IGl0J3MgYSB2YWxpZCBsaW5rO1xuICAvLyBzbyBhbGwgdGhhdCdzIGxlZnQgdG8gZG8gaXMgdG8gY2FsbCB0b2tlbml6ZXIuXG4gIC8vXG4gIGlmICghc2lsZW50KSB7XG4gICAgc3RhdGUucG9zID0gbGFiZWxTdGFydDtcbiAgICBzdGF0ZS5wb3NNYXggPSBsYWJlbEVuZDtcblxuICAgIHRva2VuICAgICAgICA9IHN0YXRlLnB1c2goJ2xpbmtfb3BlbicsICdhJywgMSk7XG4gICAgdG9rZW4uYXR0cnMgID0gYXR0cnMgPSBbIFsgJ2hyZWYnLCBocmVmIF0gXTtcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIGF0dHJzLnB1c2goWyAndGl0bGUnLCB0aXRsZSBdKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5tZC5pbmxpbmUudG9rZW5pemUoc3RhdGUpO1xuXG4gICAgdG9rZW4gICAgICAgID0gc3RhdGUucHVzaCgnbGlua19jbG9zZScsICdhJywgLTEpO1xuICB9XG5cbiAgc3RhdGUucG9zID0gcG9zO1xuICBzdGF0ZS5wb3NNYXggPSBtYXg7XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIFByb2Nlc3MgIVtpbWFnZV0oPHNyYz4gXCJ0aXRsZVwiKVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBub3JtYWxpemVSZWZlcmVuY2UgICA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLm5vcm1hbGl6ZVJlZmVyZW5jZTtcbnZhciBpc1NwYWNlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmlzU3BhY2U7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbWFnZShzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBhdHRycyxcbiAgICAgIGNvZGUsXG4gICAgICBjb250ZW50LFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbEVuZCxcbiAgICAgIGxhYmVsU3RhcnQsXG4gICAgICBwb3MsXG4gICAgICByZWYsXG4gICAgICByZXMsXG4gICAgICB0aXRsZSxcbiAgICAgIHRva2VuLFxuICAgICAgdG9rZW5zLFxuICAgICAgc3RhcnQsXG4gICAgICBocmVmID0gJycsXG4gICAgICBvbGRQb3MgPSBzdGF0ZS5wb3MsXG4gICAgICBtYXggPSBzdGF0ZS5wb3NNYXg7XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHN0YXRlLnBvcykgIT09IDB4MjEvKiAhICovKSB7IHJldHVybiBmYWxzZTsgfVxuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQoc3RhdGUucG9zICsgMSkgIT09IDB4NUIvKiBbICovKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxhYmVsU3RhcnQgPSBzdGF0ZS5wb3MgKyAyO1xuICBsYWJlbEVuZCA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rTGFiZWwoc3RhdGUsIHN0YXRlLnBvcyArIDEsIGZhbHNlKTtcblxuICAvLyBwYXJzZXIgZmFpbGVkIHRvIGZpbmQgJ10nLCBzbyBpdCdzIG5vdCBhIHZhbGlkIGxpbmtcbiAgaWYgKGxhYmVsRW5kIDwgMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBwb3MgPSBsYWJlbEVuZCArIDE7XG4gIGlmIChwb3MgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHgyOC8qICggKi8pIHtcbiAgICAvL1xuICAgIC8vIElubGluZSBsaW5rXG4gICAgLy9cblxuICAgIC8vIFtsaW5rXSggIDxocmVmPiAgXCJ0aXRsZVwiICApXG4gICAgLy8gICAgICAgIF5eIHNraXBwaW5nIHRoZXNlIHNwYWNlc1xuICAgIHBvcysrO1xuICAgIGZvciAoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgIGlmICghaXNTcGFjZShjb2RlKSAmJiBjb2RlICE9PSAweDBBKSB7IGJyZWFrOyB9XG4gICAgfVxuICAgIGlmIChwb3MgPj0gbWF4KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAvLyAgICAgICAgICBeXl5eXl4gcGFyc2luZyBsaW5rIGRlc3RpbmF0aW9uXG4gICAgc3RhcnQgPSBwb3M7XG4gICAgcmVzID0gc3RhdGUubWQuaGVscGVycy5wYXJzZUxpbmtEZXN0aW5hdGlvbihzdGF0ZS5zcmMsIHBvcywgc3RhdGUucG9zTWF4KTtcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICBocmVmID0gc3RhdGUubWQubm9ybWFsaXplTGluayhyZXMuc3RyKTtcbiAgICAgIGlmIChzdGF0ZS5tZC52YWxpZGF0ZUxpbmsoaHJlZikpIHtcbiAgICAgICAgcG9zID0gcmVzLnBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhyZWYgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgIC8vICAgICAgICAgICAgICAgIF5eIHNraXBwaW5nIHRoZXNlIHNwYWNlc1xuICAgIHN0YXJ0ID0gcG9zO1xuICAgIGZvciAoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgIGlmICghaXNTcGFjZShjb2RlKSAmJiBjb2RlICE9PSAweDBBKSB7IGJyZWFrOyB9XG4gICAgfVxuXG4gICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAvLyAgICAgICAgICAgICAgICAgIF5eXl5eXl4gcGFyc2luZyBsaW5rIHRpdGxlXG4gICAgcmVzID0gc3RhdGUubWQuaGVscGVycy5wYXJzZUxpbmtUaXRsZShzdGF0ZS5zcmMsIHBvcywgc3RhdGUucG9zTWF4KTtcbiAgICBpZiAocG9zIDwgbWF4ICYmIHN0YXJ0ICE9PSBwb3MgJiYgcmVzLm9rKSB7XG4gICAgICB0aXRsZSA9IHJlcy5zdHI7XG4gICAgICBwb3MgPSByZXMucG9zO1xuXG4gICAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgXl4gc2tpcHBpbmcgdGhlc2Ugc3BhY2VzXG4gICAgICBmb3IgKDsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgaWYgKCFpc1NwYWNlKGNvZGUpICYmIGNvZGUgIT09IDB4MEEpIHsgYnJlYWs7IH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSAnJztcbiAgICB9XG5cbiAgICBpZiAocG9zID49IG1heCB8fCBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDI5LyogKSAqLykge1xuICAgICAgc3RhdGUucG9zID0gb2xkUG9zO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwb3MrKztcbiAgfSBlbHNlIHtcbiAgICAvL1xuICAgIC8vIExpbmsgcmVmZXJlbmNlXG4gICAgLy9cbiAgICBpZiAodHlwZW9mIHN0YXRlLmVudi5yZWZlcmVuY2VzID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmIChwb3MgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHg1Qi8qIFsgKi8pIHtcbiAgICAgIHN0YXJ0ID0gcG9zICsgMTtcbiAgICAgIHBvcyA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rTGFiZWwoc3RhdGUsIHBvcyk7XG4gICAgICBpZiAocG9zID49IDApIHtcbiAgICAgICAgbGFiZWwgPSBzdGF0ZS5zcmMuc2xpY2Uoc3RhcnQsIHBvcysrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcyA9IGxhYmVsRW5kICsgMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcG9zID0gbGFiZWxFbmQgKyAxO1xuICAgIH1cblxuICAgIC8vIGNvdmVycyBsYWJlbCA9PT0gJycgYW5kIGxhYmVsID09PSB1bmRlZmluZWRcbiAgICAvLyAoY29sbGFwc2VkIHJlZmVyZW5jZSBsaW5rIGFuZCBzaG9ydGN1dCByZWZlcmVuY2UgbGluayByZXNwZWN0aXZlbHkpXG4gICAgaWYgKCFsYWJlbCkgeyBsYWJlbCA9IHN0YXRlLnNyYy5zbGljZShsYWJlbFN0YXJ0LCBsYWJlbEVuZCk7IH1cblxuICAgIHJlZiA9IHN0YXRlLmVudi5yZWZlcmVuY2VzW25vcm1hbGl6ZVJlZmVyZW5jZShsYWJlbCldO1xuICAgIGlmICghcmVmKSB7XG4gICAgICBzdGF0ZS5wb3MgPSBvbGRQb3M7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGhyZWYgPSByZWYuaHJlZjtcbiAgICB0aXRsZSA9IHJlZi50aXRsZTtcbiAgfVxuXG4gIC8vXG4gIC8vIFdlIGZvdW5kIHRoZSBlbmQgb2YgdGhlIGxpbmssIGFuZCBrbm93IGZvciBhIGZhY3QgaXQncyBhIHZhbGlkIGxpbms7XG4gIC8vIHNvIGFsbCB0aGF0J3MgbGVmdCB0byBkbyBpcyB0byBjYWxsIHRva2VuaXplci5cbiAgLy9cbiAgaWYgKCFzaWxlbnQpIHtcbiAgICBjb250ZW50ID0gc3RhdGUuc3JjLnNsaWNlKGxhYmVsU3RhcnQsIGxhYmVsRW5kKTtcblxuICAgIHN0YXRlLm1kLmlubGluZS5wYXJzZShcbiAgICAgIGNvbnRlbnQsXG4gICAgICBzdGF0ZS5tZCxcbiAgICAgIHN0YXRlLmVudixcbiAgICAgIHRva2VucyA9IFtdXG4gICAgKTtcblxuICAgIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgnaW1hZ2UnLCAnaW1nJywgMCk7XG4gICAgdG9rZW4uYXR0cnMgICAgPSBhdHRycyA9IFsgWyAnc3JjJywgaHJlZiBdLCBbICdhbHQnLCAnJyBdIF07XG4gICAgdG9rZW4uY2hpbGRyZW4gPSB0b2tlbnM7XG4gICAgdG9rZW4uY29udGVudCAgPSBjb250ZW50O1xuXG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBhdHRycy5wdXNoKFsgJ3RpdGxlJywgdGl0bGUgXSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUucG9zID0gcG9zO1xuICBzdGF0ZS5wb3NNYXggPSBtYXg7XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIFByb2Nlc3MgYXV0b2xpbmtzICc8cHJvdG9jb2w6Li4uPidcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbi8qZXNsaW50IG1heC1sZW46MCovXG52YXIgRU1BSUxfUkUgICAgPSAvXjwoW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKik+LztcbnZhciBBVVRPTElOS19SRSA9IC9ePChbYS16QS1aXVthLXpBLVowLTkrLlxcLV17MSwzMX0pOihbXjw+XFx4MDAtXFx4MjBdKik+LztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF1dG9saW5rKHN0YXRlLCBzaWxlbnQpIHtcbiAgdmFyIHRhaWwsIGxpbmtNYXRjaCwgZW1haWxNYXRjaCwgdXJsLCBmdWxsVXJsLCB0b2tlbixcbiAgICAgIHBvcyA9IHN0YXRlLnBvcztcblxuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gMHgzQy8qIDwgKi8pIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgdGFpbCA9IHN0YXRlLnNyYy5zbGljZShwb3MpO1xuXG4gIGlmICh0YWlsLmluZGV4T2YoJz4nKSA8IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKEFVVE9MSU5LX1JFLnRlc3QodGFpbCkpIHtcbiAgICBsaW5rTWF0Y2ggPSB0YWlsLm1hdGNoKEFVVE9MSU5LX1JFKTtcblxuICAgIHVybCA9IGxpbmtNYXRjaFswXS5zbGljZSgxLCAtMSk7XG4gICAgZnVsbFVybCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsodXJsKTtcbiAgICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhmdWxsVXJsKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmICghc2lsZW50KSB7XG4gICAgICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgnbGlua19vcGVuJywgJ2EnLCAxKTtcbiAgICAgIHRva2VuLmF0dHJzICAgPSBbIFsgJ2hyZWYnLCBmdWxsVXJsIF0gXTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnYXV0b2xpbmsnO1xuICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgICB0b2tlbi5jb250ZW50ID0gc3RhdGUubWQubm9ybWFsaXplTGlua1RleHQodXJsKTtcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2xpbmtfY2xvc2UnLCAnYScsIC0xKTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnYXV0b2xpbmsnO1xuICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcbiAgICB9XG5cbiAgICBzdGF0ZS5wb3MgKz0gbGlua01hdGNoWzBdLmxlbmd0aDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChFTUFJTF9SRS50ZXN0KHRhaWwpKSB7XG4gICAgZW1haWxNYXRjaCA9IHRhaWwubWF0Y2goRU1BSUxfUkUpO1xuXG4gICAgdXJsID0gZW1haWxNYXRjaFswXS5zbGljZSgxLCAtMSk7XG4gICAgZnVsbFVybCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsoJ21haWx0bzonICsgdXJsKTtcbiAgICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhmdWxsVXJsKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmICghc2lsZW50KSB7XG4gICAgICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgnbGlua19vcGVuJywgJ2EnLCAxKTtcbiAgICAgIHRva2VuLmF0dHJzICAgPSBbIFsgJ2hyZWYnLCBmdWxsVXJsIF0gXTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnYXV0b2xpbmsnO1xuICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgICB0b2tlbi5jb250ZW50ID0gc3RhdGUubWQubm9ybWFsaXplTGlua1RleHQodXJsKTtcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2xpbmtfY2xvc2UnLCAnYScsIC0xKTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnYXV0b2xpbmsnO1xuICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcbiAgICB9XG5cbiAgICBzdGF0ZS5wb3MgKz0gZW1haWxNYXRjaFswXS5sZW5ndGg7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwiLy8gUHJvY2VzcyBodG1sIHRhZ3NcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBIVE1MX1RBR19SRSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9odG1sX3JlJykuSFRNTF9UQUdfUkU7XG5cblxuZnVuY3Rpb24gaXNMZXR0ZXIoY2gpIHtcbiAgLyplc2xpbnQgbm8tYml0d2lzZTowKi9cbiAgdmFyIGxjID0gY2ggfCAweDIwOyAvLyB0byBsb3dlciBjYXNlXG4gIHJldHVybiAobGMgPj0gMHg2MS8qIGEgKi8pICYmIChsYyA8PSAweDdhLyogeiAqLyk7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBodG1sX2lubGluZShzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBjaCwgbWF0Y2gsIG1heCwgdG9rZW4sXG4gICAgICBwb3MgPSBzdGF0ZS5wb3M7XG5cbiAgaWYgKCFzdGF0ZS5tZC5vcHRpb25zLmh0bWwpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gQ2hlY2sgc3RhcnRcbiAgbWF4ID0gc3RhdGUucG9zTWF4O1xuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gMHgzQy8qIDwgKi8gfHxcbiAgICAgIHBvcyArIDIgPj0gbWF4KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gUXVpY2sgZmFpbCBvbiBzZWNvbmQgY2hhclxuICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyArIDEpO1xuICBpZiAoY2ggIT09IDB4MjEvKiAhICovICYmXG4gICAgICBjaCAhPT0gMHgzRi8qID8gKi8gJiZcbiAgICAgIGNoICE9PSAweDJGLyogLyAqLyAmJlxuICAgICAgIWlzTGV0dGVyKGNoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIG1hdGNoID0gc3RhdGUuc3JjLnNsaWNlKHBvcykubWF0Y2goSFRNTF9UQUdfUkUpO1xuICBpZiAoIW1hdGNoKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmICghc2lsZW50KSB7XG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2h0bWxfaW5saW5lJywgJycsIDApO1xuICAgIHRva2VuLmNvbnRlbnQgPSBzdGF0ZS5zcmMuc2xpY2UocG9zLCBwb3MgKyBtYXRjaFswXS5sZW5ndGgpO1xuICB9XG4gIHN0YXRlLnBvcyArPSBtYXRjaFswXS5sZW5ndGg7XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8vIFByb2Nlc3MgaHRtbCBlbnRpdHkgLSAmIzEyMzssICYjeEFGOywgJnF1b3Q7LCAuLi5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW50aXRpZXMgICAgICAgICAgPSByZXF1aXJlKCcuLi9jb21tb24vZW50aXRpZXMnKTtcbnZhciBoYXMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmhhcztcbnZhciBpc1ZhbGlkRW50aXR5Q29kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmlzVmFsaWRFbnRpdHlDb2RlO1xudmFyIGZyb21Db2RlUG9pbnQgICAgID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuZnJvbUNvZGVQb2ludDtcblxuXG52YXIgRElHSVRBTF9SRSA9IC9eJiMoKD86eFthLWYwLTldezEsNn18WzAtOV17MSw3fSkpOy9pO1xudmFyIE5BTUVEX1JFICAgPSAvXiYoW2Etel1bYS16MC05XXsxLDMxfSk7L2k7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbnRpdHkoc3RhdGUsIHNpbGVudCkge1xuICB2YXIgY2gsIGNvZGUsIG1hdGNoLCBwb3MgPSBzdGF0ZS5wb3MsIG1heCA9IHN0YXRlLnBvc01heDtcblxuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gMHgyNi8qICYgKi8pIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKHBvcyArIDEgPCBtYXgpIHtcbiAgICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyArIDEpO1xuXG4gICAgaWYgKGNoID09PSAweDIzIC8qICMgKi8pIHtcbiAgICAgIG1hdGNoID0gc3RhdGUuc3JjLnNsaWNlKHBvcykubWF0Y2goRElHSVRBTF9SRSk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgICBjb2RlID0gbWF0Y2hbMV1bMF0udG9Mb3dlckNhc2UoKSA9PT0gJ3gnID8gcGFyc2VJbnQobWF0Y2hbMV0uc2xpY2UoMSksIDE2KSA6IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgICAgICAgc3RhdGUucGVuZGluZyArPSBpc1ZhbGlkRW50aXR5Q29kZShjb2RlKSA/IGZyb21Db2RlUG9pbnQoY29kZSkgOiBmcm9tQ29kZVBvaW50KDB4RkZGRCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUucG9zICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdGNoID0gc3RhdGUuc3JjLnNsaWNlKHBvcykubWF0Y2goTkFNRURfUkUpO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGlmIChoYXMoZW50aXRpZXMsIG1hdGNoWzFdKSkge1xuICAgICAgICAgIGlmICghc2lsZW50KSB7IHN0YXRlLnBlbmRpbmcgKz0gZW50aXRpZXNbbWF0Y2hbMV1dOyB9XG4gICAgICAgICAgc3RhdGUucG9zICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghc2lsZW50KSB7IHN0YXRlLnBlbmRpbmcgKz0gJyYnOyB9XG4gIHN0YXRlLnBvcysrO1xuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBGb3IgZWFjaCBvcGVuaW5nIGVtcGhhc2lzLWxpa2UgbWFya2VyIGZpbmQgYSBtYXRjaGluZyBjbG9zaW5nIG9uZVxuLy9cbid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwcm9jZXNzRGVsaW1pdGVycyhzdGF0ZSwgZGVsaW1pdGVycykge1xuICB2YXIgY2xvc2VySWR4LCBvcGVuZXJJZHgsIGNsb3Nlciwgb3BlbmVyLCBtaW5PcGVuZXJJZHgsIG5ld01pbk9wZW5lcklkeCxcbiAgICAgIGlzT2RkTWF0Y2gsIGxhc3RKdW1wLFxuICAgICAgb3BlbmVyc0JvdHRvbSA9IHt9LFxuICAgICAgbWF4ID0gZGVsaW1pdGVycy5sZW5ndGg7XG5cbiAgZm9yIChjbG9zZXJJZHggPSAwOyBjbG9zZXJJZHggPCBtYXg7IGNsb3NlcklkeCsrKSB7XG4gICAgY2xvc2VyID0gZGVsaW1pdGVyc1tjbG9zZXJJZHhdO1xuXG4gICAgLy8gTGVuZ3RoIGlzIG9ubHkgdXNlZCBmb3IgZW1waGFzaXMtc3BlY2lmaWMgXCJydWxlIG9mIDNcIixcbiAgICAvLyBpZiBpdCdzIG5vdCBkZWZpbmVkIChpbiBzdHJpa2V0aHJvdWdoIG9yIDNyZCBwYXJ0eSBwbHVnaW5zKSxcbiAgICAvLyB3ZSBjYW4gZGVmYXVsdCBpdCB0byAwIHRvIGRpc2FibGUgdGhvc2UgY2hlY2tzLlxuICAgIC8vXG4gICAgY2xvc2VyLmxlbmd0aCA9IGNsb3Nlci5sZW5ndGggfHwgMDtcblxuICAgIGlmICghY2xvc2VyLmNsb3NlKSBjb250aW51ZTtcblxuICAgIC8vIFByZXZpb3VzbHkgY2FsY3VsYXRlZCBsb3dlciBib3VuZHMgKHByZXZpb3VzIGZhaWxzKVxuICAgIC8vIGZvciBlYWNoIG1hcmtlciBhbmQgZWFjaCBkZWxpbWl0ZXIgbGVuZ3RoIG1vZHVsbyAzLlxuICAgIGlmICghb3BlbmVyc0JvdHRvbS5oYXNPd25Qcm9wZXJ0eShjbG9zZXIubWFya2VyKSkge1xuICAgICAgb3BlbmVyc0JvdHRvbVtjbG9zZXIubWFya2VyXSA9IFsgLTEsIC0xLCAtMSBdO1xuICAgIH1cblxuICAgIG1pbk9wZW5lcklkeCA9IG9wZW5lcnNCb3R0b21bY2xvc2VyLm1hcmtlcl1bY2xvc2VyLmxlbmd0aCAlIDNdO1xuICAgIG5ld01pbk9wZW5lcklkeCA9IC0xO1xuXG4gICAgb3BlbmVySWR4ID0gY2xvc2VySWR4IC0gY2xvc2VyLmp1bXAgLSAxO1xuXG4gICAgZm9yICg7IG9wZW5lcklkeCA+IG1pbk9wZW5lcklkeDsgb3BlbmVySWR4IC09IG9wZW5lci5qdW1wICsgMSkge1xuICAgICAgb3BlbmVyID0gZGVsaW1pdGVyc1tvcGVuZXJJZHhdO1xuXG4gICAgICBpZiAob3BlbmVyLm1hcmtlciAhPT0gY2xvc2VyLm1hcmtlcikgY29udGludWU7XG5cbiAgICAgIGlmIChuZXdNaW5PcGVuZXJJZHggPT09IC0xKSBuZXdNaW5PcGVuZXJJZHggPSBvcGVuZXJJZHg7XG5cbiAgICAgIGlmIChvcGVuZXIub3BlbiAmJlxuICAgICAgICAgIG9wZW5lci5lbmQgPCAwICYmXG4gICAgICAgICAgb3BlbmVyLmxldmVsID09PSBjbG9zZXIubGV2ZWwpIHtcblxuICAgICAgICBpc09kZE1hdGNoID0gZmFsc2U7XG5cbiAgICAgICAgLy8gZnJvbSBzcGVjOlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBvbmUgb2YgdGhlIGRlbGltaXRlcnMgY2FuIGJvdGggb3BlbiBhbmQgY2xvc2UgZW1waGFzaXMsIHRoZW4gdGhlXG4gICAgICAgIC8vIHN1bSBvZiB0aGUgbGVuZ3RocyBvZiB0aGUgZGVsaW1pdGVyIHJ1bnMgY29udGFpbmluZyB0aGUgb3BlbmluZyBhbmRcbiAgICAgICAgLy8gY2xvc2luZyBkZWxpbWl0ZXJzIG11c3Qgbm90IGJlIGEgbXVsdGlwbGUgb2YgMyB1bmxlc3MgYm90aCBsZW5ndGhzXG4gICAgICAgIC8vIGFyZSBtdWx0aXBsZXMgb2YgMy5cbiAgICAgICAgLy9cbiAgICAgICAgaWYgKG9wZW5lci5jbG9zZSB8fCBjbG9zZXIub3Blbikge1xuICAgICAgICAgIGlmICgob3BlbmVyLmxlbmd0aCArIGNsb3Nlci5sZW5ndGgpICUgMyA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKG9wZW5lci5sZW5ndGggJSAzICE9PSAwIHx8IGNsb3Nlci5sZW5ndGggJSAzICE9PSAwKSB7XG4gICAgICAgICAgICAgIGlzT2RkTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNPZGRNYXRjaCkge1xuICAgICAgICAgIC8vIElmIHByZXZpb3VzIGRlbGltaXRlciBjYW5ub3QgYmUgYW4gb3BlbmVyLCB3ZSBjYW4gc2FmZWx5IHNraXBcbiAgICAgICAgICAvLyB0aGUgZW50aXJlIHNlcXVlbmNlIGluIGZ1dHVyZSBjaGVja3MuIFRoaXMgaXMgcmVxdWlyZWQgdG8gbWFrZVxuICAgICAgICAgIC8vIHN1cmUgYWxnb3JpdGhtIGhhcyBsaW5lYXIgY29tcGxleGl0eSAoc2VlICpfKl8qXypfKl8uLi4gY2FzZSkuXG4gICAgICAgICAgLy9cbiAgICAgICAgICBsYXN0SnVtcCA9IG9wZW5lcklkeCA+IDAgJiYgIWRlbGltaXRlcnNbb3BlbmVySWR4IC0gMV0ub3BlbiA/XG4gICAgICAgICAgICBkZWxpbWl0ZXJzW29wZW5lcklkeCAtIDFdLmp1bXAgKyAxIDpcbiAgICAgICAgICAgIDA7XG5cbiAgICAgICAgICBjbG9zZXIuanVtcCAgPSBjbG9zZXJJZHggLSBvcGVuZXJJZHggKyBsYXN0SnVtcDtcbiAgICAgICAgICBjbG9zZXIub3BlbiAgPSBmYWxzZTtcbiAgICAgICAgICBvcGVuZXIuZW5kICAgPSBjbG9zZXJJZHg7XG4gICAgICAgICAgb3BlbmVyLmp1bXAgID0gbGFzdEp1bXA7XG4gICAgICAgICAgb3BlbmVyLmNsb3NlID0gZmFsc2U7XG4gICAgICAgICAgbmV3TWluT3BlbmVySWR4ID0gLTE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3TWluT3BlbmVySWR4ICE9PSAtMSkge1xuICAgICAgLy8gSWYgbWF0Y2ggZm9yIHRoaXMgZGVsaW1pdGVyIHJ1biBmYWlsZWQsIHdlIHdhbnQgdG8gc2V0IGxvd2VyIGJvdW5kIGZvclxuICAgICAgLy8gZnV0dXJlIGxvb2t1cHMuIFRoaXMgaXMgcmVxdWlyZWQgdG8gbWFrZSBzdXJlIGFsZ29yaXRobSBoYXMgbGluZWFyXG4gICAgICAvLyBjb21wbGV4aXR5LlxuICAgICAgLy9cbiAgICAgIC8vIFNlZSBkZXRhaWxzIGhlcmU6XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY29tbW9ubWFyay9jbWFyay9pc3N1ZXMvMTc4I2lzc3VlY29tbWVudC0yNzA0MTc0NDJcbiAgICAgIC8vXG4gICAgICBvcGVuZXJzQm90dG9tW2Nsb3Nlci5tYXJrZXJdWyhjbG9zZXIubGVuZ3RoIHx8IDApICUgM10gPSBuZXdNaW5PcGVuZXJJZHg7XG4gICAgfVxuICB9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsaW5rX3BhaXJzKHN0YXRlKSB7XG4gIHZhciBjdXJyLFxuICAgICAgdG9rZW5zX21ldGEgPSBzdGF0ZS50b2tlbnNfbWV0YSxcbiAgICAgIG1heCA9IHN0YXRlLnRva2Vuc19tZXRhLmxlbmd0aDtcblxuICBwcm9jZXNzRGVsaW1pdGVycyhzdGF0ZSwgc3RhdGUuZGVsaW1pdGVycyk7XG5cbiAgZm9yIChjdXJyID0gMDsgY3VyciA8IG1heDsgY3VycisrKSB7XG4gICAgaWYgKHRva2Vuc19tZXRhW2N1cnJdICYmIHRva2Vuc19tZXRhW2N1cnJdLmRlbGltaXRlcnMpIHtcbiAgICAgIHByb2Nlc3NEZWxpbWl0ZXJzKHN0YXRlLCB0b2tlbnNfbWV0YVtjdXJyXS5kZWxpbWl0ZXJzKTtcbiAgICB9XG4gIH1cbn07XG4iLCIvLyBDbGVhbiB1cCB0b2tlbnMgYWZ0ZXIgZW1waGFzaXMgYW5kIHN0cmlrZXRocm91Z2ggcG9zdHByb2Nlc3Npbmc6XG4vLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzIGludG8gb25lIGFuZCByZS1jYWxjdWxhdGUgYWxsIHRva2VuIGxldmVsc1xuLy9cbi8vIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgaW5pdGlhbGx5IGVtcGhhc2lzIGRlbGltaXRlciBtYXJrZXJzICgqLCBfLCB+KVxuLy8gYXJlIHRyZWF0ZWQgYXMgdGhlaXIgb3duIHNlcGFyYXRlIHRleHQgdG9rZW5zLiBUaGVuIGVtcGhhc2lzIHJ1bGUgZWl0aGVyXG4vLyBsZWF2ZXMgdGhlbSBhcyB0ZXh0IChuZWVkZWQgdG8gbWVyZ2Ugd2l0aCBhZGphY2VudCB0ZXh0KSBvciB0dXJucyB0aGVtXG4vLyBpbnRvIG9wZW5pbmcvY2xvc2luZyB0YWdzICh3aGljaCBtZXNzZXMgdXAgbGV2ZWxzIGluc2lkZSkuXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGV4dF9jb2xsYXBzZShzdGF0ZSkge1xuICB2YXIgY3VyciwgbGFzdCxcbiAgICAgIGxldmVsID0gMCxcbiAgICAgIHRva2VucyA9IHN0YXRlLnRva2VucyxcbiAgICAgIG1heCA9IHN0YXRlLnRva2Vucy5sZW5ndGg7XG5cbiAgZm9yIChjdXJyID0gbGFzdCA9IDA7IGN1cnIgPCBtYXg7IGN1cnIrKykge1xuICAgIC8vIHJlLWNhbGN1bGF0ZSBsZXZlbHMgYWZ0ZXIgZW1waGFzaXMvc3RyaWtldGhyb3VnaCB0dXJucyBzb21lIHRleHQgbm9kZXNcbiAgICAvLyBpbnRvIG9wZW5pbmcvY2xvc2luZyB0YWdzXG4gICAgaWYgKHRva2Vuc1tjdXJyXS5uZXN0aW5nIDwgMCkgbGV2ZWwtLTsgLy8gY2xvc2luZyB0YWdcbiAgICB0b2tlbnNbY3Vycl0ubGV2ZWwgPSBsZXZlbDtcbiAgICBpZiAodG9rZW5zW2N1cnJdLm5lc3RpbmcgPiAwKSBsZXZlbCsrOyAvLyBvcGVuaW5nIHRhZ1xuXG4gICAgaWYgKHRva2Vuc1tjdXJyXS50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgY3VyciArIDEgPCBtYXggJiZcbiAgICAgICAgdG9rZW5zW2N1cnIgKyAxXS50eXBlID09PSAndGV4dCcpIHtcblxuICAgICAgLy8gY29sbGFwc2UgdHdvIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgIHRva2Vuc1tjdXJyICsgMV0uY29udGVudCA9IHRva2Vuc1tjdXJyXS5jb250ZW50ICsgdG9rZW5zW2N1cnIgKyAxXS5jb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY3VyciAhPT0gbGFzdCkgeyB0b2tlbnNbbGFzdF0gPSB0b2tlbnNbY3Vycl07IH1cblxuICAgICAgbGFzdCsrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjdXJyICE9PSBsYXN0KSB7XG4gICAgdG9rZW5zLmxlbmd0aCA9IGxhc3Q7XG4gIH1cbn07XG4iLCIvLyBJbmxpbmUgcGFyc2VyIHN0YXRlXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgVG9rZW4gICAgICAgICAgPSByZXF1aXJlKCcuLi90b2tlbicpO1xudmFyIGlzV2hpdGVTcGFjZSAgID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNXaGl0ZVNwYWNlO1xudmFyIGlzUHVuY3RDaGFyICAgID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNQdW5jdENoYXI7XG52YXIgaXNNZEFzY2lpUHVuY3QgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS5pc01kQXNjaWlQdW5jdDtcblxuXG5mdW5jdGlvbiBTdGF0ZUlubGluZShzcmMsIG1kLCBlbnYsIG91dFRva2Vucykge1xuICB0aGlzLnNyYyA9IHNyYztcbiAgdGhpcy5lbnYgPSBlbnY7XG4gIHRoaXMubWQgPSBtZDtcbiAgdGhpcy50b2tlbnMgPSBvdXRUb2tlbnM7XG4gIHRoaXMudG9rZW5zX21ldGEgPSBBcnJheShvdXRUb2tlbnMubGVuZ3RoKTtcblxuICB0aGlzLnBvcyA9IDA7XG4gIHRoaXMucG9zTWF4ID0gdGhpcy5zcmMubGVuZ3RoO1xuICB0aGlzLmxldmVsID0gMDtcbiAgdGhpcy5wZW5kaW5nID0gJyc7XG4gIHRoaXMucGVuZGluZ0xldmVsID0gMDtcblxuICAvLyBTdG9yZXMgeyBzdGFydDogZW5kIH0gcGFpcnMuIFVzZWZ1bCBmb3IgYmFja3RyYWNrXG4gIC8vIG9wdGltaXphdGlvbiBvZiBwYWlycyBwYXJzZSAoZW1waGFzaXMsIHN0cmlrZXMpLlxuICB0aGlzLmNhY2hlID0ge307XG5cbiAgLy8gTGlzdCBvZiBlbXBoYXNpcy1saWtlIGRlbGltaXRlcnMgZm9yIGN1cnJlbnQgdGFnXG4gIHRoaXMuZGVsaW1pdGVycyA9IFtdO1xuXG4gIC8vIFN0YWNrIG9mIGRlbGltaXRlciBsaXN0cyBmb3IgdXBwZXIgbGV2ZWwgdGFnc1xuICB0aGlzLl9wcmV2X2RlbGltaXRlcnMgPSBbXTtcbn1cblxuXG4vLyBGbHVzaCBwZW5kaW5nIHRleHRcbi8vXG5TdGF0ZUlubGluZS5wcm90b3R5cGUucHVzaFBlbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0b2tlbiA9IG5ldyBUb2tlbigndGV4dCcsICcnLCAwKTtcbiAgdG9rZW4uY29udGVudCA9IHRoaXMucGVuZGluZztcbiAgdG9rZW4ubGV2ZWwgPSB0aGlzLnBlbmRpbmdMZXZlbDtcbiAgdGhpcy50b2tlbnMucHVzaCh0b2tlbik7XG4gIHRoaXMucGVuZGluZyA9ICcnO1xuICByZXR1cm4gdG9rZW47XG59O1xuXG5cbi8vIFB1c2ggbmV3IHRva2VuIHRvIFwic3RyZWFtXCIuXG4vLyBJZiBwZW5kaW5nIHRleHQgZXhpc3RzIC0gZmx1c2ggaXQgYXMgdGV4dCB0b2tlblxuLy9cblN0YXRlSW5saW5lLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHR5cGUsIHRhZywgbmVzdGluZykge1xuICBpZiAodGhpcy5wZW5kaW5nKSB7XG4gICAgdGhpcy5wdXNoUGVuZGluZygpO1xuICB9XG5cbiAgdmFyIHRva2VuID0gbmV3IFRva2VuKHR5cGUsIHRhZywgbmVzdGluZyk7XG4gIHZhciB0b2tlbl9tZXRhID0gbnVsbDtcblxuICBpZiAobmVzdGluZyA8IDApIHtcbiAgICAvLyBjbG9zaW5nIHRhZ1xuICAgIHRoaXMubGV2ZWwtLTtcbiAgICB0aGlzLmRlbGltaXRlcnMgPSB0aGlzLl9wcmV2X2RlbGltaXRlcnMucG9wKCk7XG4gIH1cblxuICB0b2tlbi5sZXZlbCA9IHRoaXMubGV2ZWw7XG5cbiAgaWYgKG5lc3RpbmcgPiAwKSB7XG4gICAgLy8gb3BlbmluZyB0YWdcbiAgICB0aGlzLmxldmVsKys7XG4gICAgdGhpcy5fcHJldl9kZWxpbWl0ZXJzLnB1c2godGhpcy5kZWxpbWl0ZXJzKTtcbiAgICB0aGlzLmRlbGltaXRlcnMgPSBbXTtcbiAgICB0b2tlbl9tZXRhID0geyBkZWxpbWl0ZXJzOiB0aGlzLmRlbGltaXRlcnMgfTtcbiAgfVxuXG4gIHRoaXMucGVuZGluZ0xldmVsID0gdGhpcy5sZXZlbDtcbiAgdGhpcy50b2tlbnMucHVzaCh0b2tlbik7XG4gIHRoaXMudG9rZW5zX21ldGEucHVzaCh0b2tlbl9tZXRhKTtcbiAgcmV0dXJuIHRva2VuO1xufTtcblxuXG4vLyBTY2FuIGEgc2VxdWVuY2Ugb2YgZW1waGFzaXMtbGlrZSBtYXJrZXJzLCBhbmQgZGV0ZXJtaW5lIHdoZXRoZXJcbi8vIGl0IGNhbiBzdGFydCBhbiBlbXBoYXNpcyBzZXF1ZW5jZSBvciBlbmQgYW4gZW1waGFzaXMgc2VxdWVuY2UuXG4vL1xuLy8gIC0gc3RhcnQgLSBwb3NpdGlvbiB0byBzY2FuIGZyb20gKGl0IHNob3VsZCBwb2ludCBhdCBhIHZhbGlkIG1hcmtlcik7XG4vLyAgLSBjYW5TcGxpdFdvcmQgLSBkZXRlcm1pbmUgaWYgdGhlc2UgbWFya2VycyBjYW4gYmUgZm91bmQgaW5zaWRlIGEgd29yZFxuLy9cblN0YXRlSW5saW5lLnByb3RvdHlwZS5zY2FuRGVsaW1zID0gZnVuY3Rpb24gKHN0YXJ0LCBjYW5TcGxpdFdvcmQpIHtcbiAgdmFyIHBvcyA9IHN0YXJ0LCBsYXN0Q2hhciwgbmV4dENoYXIsIGNvdW50LCBjYW5fb3BlbiwgY2FuX2Nsb3NlLFxuICAgICAgaXNMYXN0V2hpdGVTcGFjZSwgaXNMYXN0UHVuY3RDaGFyLFxuICAgICAgaXNOZXh0V2hpdGVTcGFjZSwgaXNOZXh0UHVuY3RDaGFyLFxuICAgICAgbGVmdF9mbGFua2luZyA9IHRydWUsXG4gICAgICByaWdodF9mbGFua2luZyA9IHRydWUsXG4gICAgICBtYXggPSB0aGlzLnBvc01heCxcbiAgICAgIG1hcmtlciA9IHRoaXMuc3JjLmNoYXJDb2RlQXQoc3RhcnQpO1xuXG4gIC8vIHRyZWF0IGJlZ2lubmluZyBvZiB0aGUgbGluZSBhcyBhIHdoaXRlc3BhY2VcbiAgbGFzdENoYXIgPSBzdGFydCA+IDAgPyB0aGlzLnNyYy5jaGFyQ29kZUF0KHN0YXJ0IC0gMSkgOiAweDIwO1xuXG4gIHdoaWxlIChwb3MgPCBtYXggJiYgdGhpcy5zcmMuY2hhckNvZGVBdChwb3MpID09PSBtYXJrZXIpIHsgcG9zKys7IH1cblxuICBjb3VudCA9IHBvcyAtIHN0YXJ0O1xuXG4gIC8vIHRyZWF0IGVuZCBvZiB0aGUgbGluZSBhcyBhIHdoaXRlc3BhY2VcbiAgbmV4dENoYXIgPSBwb3MgPCBtYXggPyB0aGlzLnNyYy5jaGFyQ29kZUF0KHBvcykgOiAweDIwO1xuXG4gIGlzTGFzdFB1bmN0Q2hhciA9IGlzTWRBc2NpaVB1bmN0KGxhc3RDaGFyKSB8fCBpc1B1bmN0Q2hhcihTdHJpbmcuZnJvbUNoYXJDb2RlKGxhc3RDaGFyKSk7XG4gIGlzTmV4dFB1bmN0Q2hhciA9IGlzTWRBc2NpaVB1bmN0KG5leHRDaGFyKSB8fCBpc1B1bmN0Q2hhcihTdHJpbmcuZnJvbUNoYXJDb2RlKG5leHRDaGFyKSk7XG5cbiAgaXNMYXN0V2hpdGVTcGFjZSA9IGlzV2hpdGVTcGFjZShsYXN0Q2hhcik7XG4gIGlzTmV4dFdoaXRlU3BhY2UgPSBpc1doaXRlU3BhY2UobmV4dENoYXIpO1xuXG4gIGlmIChpc05leHRXaGl0ZVNwYWNlKSB7XG4gICAgbGVmdF9mbGFua2luZyA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzTmV4dFB1bmN0Q2hhcikge1xuICAgIGlmICghKGlzTGFzdFdoaXRlU3BhY2UgfHwgaXNMYXN0UHVuY3RDaGFyKSkge1xuICAgICAgbGVmdF9mbGFua2luZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc0xhc3RXaGl0ZVNwYWNlKSB7XG4gICAgcmlnaHRfZmxhbmtpbmcgPSBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc0xhc3RQdW5jdENoYXIpIHtcbiAgICBpZiAoIShpc05leHRXaGl0ZVNwYWNlIHx8IGlzTmV4dFB1bmN0Q2hhcikpIHtcbiAgICAgIHJpZ2h0X2ZsYW5raW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjYW5TcGxpdFdvcmQpIHtcbiAgICBjYW5fb3BlbiAgPSBsZWZ0X2ZsYW5raW5nICAmJiAoIXJpZ2h0X2ZsYW5raW5nIHx8IGlzTGFzdFB1bmN0Q2hhcik7XG4gICAgY2FuX2Nsb3NlID0gcmlnaHRfZmxhbmtpbmcgJiYgKCFsZWZ0X2ZsYW5raW5nICB8fCBpc05leHRQdW5jdENoYXIpO1xuICB9IGVsc2Uge1xuICAgIGNhbl9vcGVuICA9IGxlZnRfZmxhbmtpbmc7XG4gICAgY2FuX2Nsb3NlID0gcmlnaHRfZmxhbmtpbmc7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNhbl9vcGVuOiAgY2FuX29wZW4sXG4gICAgY2FuX2Nsb3NlOiBjYW5fY2xvc2UsXG4gICAgbGVuZ3RoOiAgICBjb3VudFxuICB9O1xufTtcblxuXG4vLyByZS1leHBvcnQgVG9rZW4gY2xhc3MgdG8gdXNlIGluIGJsb2NrIHJ1bGVzXG5TdGF0ZUlubGluZS5wcm90b3R5cGUuVG9rZW4gPSBUb2tlbjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlSW5saW5lO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIZWxwZXJzXG5cbi8vIE1lcmdlIG9iamVjdHNcbi8vXG5mdW5jdGlvbiBhc3NpZ24ob2JqIC8qZnJvbTEsIGZyb20yLCBmcm9tMywgLi4uKi8pIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgaWYgKCFzb3VyY2UpIHsgcmV0dXJuOyB9XG5cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2NsYXNzKG9iaikgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7IH1cbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikgeyByZXR1cm4gX2NsYXNzKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nOyB9XG5mdW5jdGlvbiBpc09iamVjdChvYmopIHsgcmV0dXJuIF9jbGFzcyhvYmopID09PSAnW29iamVjdCBPYmplY3RdJzsgfVxuZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7IHJldHVybiBfY2xhc3Mob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7IH1cbmZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7IHJldHVybiBfY2xhc3Mob2JqKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJzsgfVxuXG5cbmZ1bmN0aW9uIGVzY2FwZVJFKHN0cikgeyByZXR1cm4gc3RyLnJlcGxhY2UoL1suPyorXiRbXFxdXFxcXCgpe318LV0vZywgJ1xcXFwkJicpOyB9XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBmdXp6eUxpbms6IHRydWUsXG4gIGZ1enp5RW1haWw6IHRydWUsXG4gIGZ1enp5SVA6IGZhbHNlXG59O1xuXG5cbmZ1bmN0aW9uIGlzT3B0aW9uc09iaihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaiB8fCB7fSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGspIHtcbiAgICByZXR1cm4gYWNjIHx8IGRlZmF1bHRPcHRpb25zLmhhc093blByb3BlcnR5KGspO1xuICB9LCBmYWxzZSk7XG59XG5cblxudmFyIGRlZmF1bHRTY2hlbWFzID0ge1xuICAnaHR0cDonOiB7XG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh0ZXh0LCBwb3MsIHNlbGYpIHtcbiAgICAgIHZhciB0YWlsID0gdGV4dC5zbGljZShwb3MpO1xuXG4gICAgICBpZiAoIXNlbGYucmUuaHR0cCkge1xuICAgICAgICAvLyBjb21waWxlIGxhemlseSwgYmVjYXVzZSBcImhvc3RcIi1jb250YWluaW5nIHZhcmlhYmxlcyBjYW4gY2hhbmdlIG9uIHRsZHMgdXBkYXRlLlxuICAgICAgICBzZWxmLnJlLmh0dHAgPSAgbmV3IFJlZ0V4cChcbiAgICAgICAgICAnXlxcXFwvXFxcXC8nICsgc2VsZi5yZS5zcmNfYXV0aCArIHNlbGYucmUuc3JjX2hvc3RfcG9ydF9zdHJpY3QgKyBzZWxmLnJlLnNyY19wYXRoLCAnaSdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLnJlLmh0dHAudGVzdCh0YWlsKSkge1xuICAgICAgICByZXR1cm4gdGFpbC5tYXRjaChzZWxmLnJlLmh0dHApWzBdLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSxcbiAgJ2h0dHBzOic6ICAnaHR0cDonLFxuICAnZnRwOic6ICAgICdodHRwOicsXG4gICcvLyc6ICAgICAge1xuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAodGV4dCwgcG9zLCBzZWxmKSB7XG4gICAgICB2YXIgdGFpbCA9IHRleHQuc2xpY2UocG9zKTtcblxuICAgICAgaWYgKCFzZWxmLnJlLm5vX2h0dHApIHtcbiAgICAgIC8vIGNvbXBpbGUgbGF6aWx5LCBiZWNhdXNlIFwiaG9zdFwiLWNvbnRhaW5pbmcgdmFyaWFibGVzIGNhbiBjaGFuZ2Ugb24gdGxkcyB1cGRhdGUuXG4gICAgICAgIHNlbGYucmUubm9faHR0cCA9ICBuZXcgUmVnRXhwKFxuICAgICAgICAgICdeJyArXG4gICAgICAgICAgc2VsZi5yZS5zcmNfYXV0aCArXG4gICAgICAgICAgLy8gRG9uJ3QgYWxsb3cgc2luZ2xlLWxldmVsIGRvbWFpbnMsIGJlY2F1c2Ugb2YgZmFsc2UgcG9zaXRpdmVzIGxpa2UgJy8vdGVzdCdcbiAgICAgICAgICAvLyB3aXRoIGNvZGUgY29tbWVudHNcbiAgICAgICAgICAnKD86bG9jYWxob3N0fCg/Oig/OicgKyBzZWxmLnJlLnNyY19kb21haW4gKyAnKVxcXFwuKSsnICsgc2VsZi5yZS5zcmNfZG9tYWluX3Jvb3QgKyAnKScgK1xuICAgICAgICAgIHNlbGYucmUuc3JjX3BvcnQgK1xuICAgICAgICAgIHNlbGYucmUuc3JjX2hvc3RfdGVybWluYXRvciArXG4gICAgICAgICAgc2VsZi5yZS5zcmNfcGF0aCxcblxuICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5yZS5ub19odHRwLnRlc3QodGFpbCkpIHtcbiAgICAgICAgLy8gc2hvdWxkIG5vdCBiZSBgOi8vYCAmIGAvLy9gLCB0aGF0IHByb3RlY3RzIGZyb20gZXJyb3JzIGluIHByb3RvY29sIG5hbWVcbiAgICAgICAgaWYgKHBvcyA+PSAzICYmIHRleHRbcG9zIC0gM10gPT09ICc6JykgeyByZXR1cm4gMDsgfVxuICAgICAgICBpZiAocG9zID49IDMgJiYgdGV4dFtwb3MgLSAzXSA9PT0gJy8nKSB7IHJldHVybiAwOyB9XG4gICAgICAgIHJldHVybiB0YWlsLm1hdGNoKHNlbGYucmUubm9faHR0cClbMF0ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9LFxuICAnbWFpbHRvOic6IHtcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKHRleHQsIHBvcywgc2VsZikge1xuICAgICAgdmFyIHRhaWwgPSB0ZXh0LnNsaWNlKHBvcyk7XG5cbiAgICAgIGlmICghc2VsZi5yZS5tYWlsdG8pIHtcbiAgICAgICAgc2VsZi5yZS5tYWlsdG8gPSAgbmV3IFJlZ0V4cChcbiAgICAgICAgICAnXicgKyBzZWxmLnJlLnNyY19lbWFpbF9uYW1lICsgJ0AnICsgc2VsZi5yZS5zcmNfaG9zdF9zdHJpY3QsICdpJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGYucmUubWFpbHRvLnRlc3QodGFpbCkpIHtcbiAgICAgICAgcmV0dXJuIHRhaWwubWF0Y2goc2VsZi5yZS5tYWlsdG8pWzBdLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfVxufTtcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuKi9cblxuLy8gUkUgcGF0dGVybiBmb3IgMi1jaGFyYWN0ZXIgdGxkcyAoYXV0b2dlbmVyYXRlZCBieSAuL3N1cHBvcnQvdGxkc18yY2hhcl9nZW4uanMpXG52YXIgdGxkc18yY2hfc3JjX3JlID0gJ2FbY2RlZmdpbG1ub3Fyc3R1d3h6XXxiW2FiZGVmZ2hpam1ub3JzdHZ3eXpdfGNbYWNkZmdoaWtsbW5vcnV2d3h5el18ZFtlamttb3pdfGVbY2VncnN0dV18Zltpamttb3JdfGdbYWJkZWZnaGlsbW5wcXJzdHV3eV18aFtrbW5ydHVdfGlbZGVsbW5vcXJzdF18altlbW9wXXxrW2VnaGltbnByd3l6XXxsW2FiY2lrcnN0dXZ5XXxtW2FjZGVnaGtsbW5vcHFyc3R1dnd4eXpdfG5bYWNlZmdpbG9wcnV6XXxvbXxwW2FlZmdoa2xtbnJzdHd5XXxxYXxyW2Vvc3V3XXxzW2FiY2RlZ2hpamtsbW5vcnR1dnh5el18dFtjZGZnaGprbG1ub3J0dnd6XXx1W2Fna3N5el18dlthY2VnaW51XXx3W2ZzXXx5W2V0XXx6W2Ftd10nO1xuXG4vLyBET04nVCB0cnkgdG8gbWFrZSBQUnMgd2l0aCBjaGFuZ2VzLiBFeHRlbmQgVExEcyB3aXRoIExpbmtpZnlJdC50bGRzKCkgaW5zdGVhZFxudmFyIHRsZHNfZGVmYXVsdCA9ICdiaXp8Y29tfGVkdXxnb3Z8bmV0fG9yZ3xwcm98d2VifHh4eHxhZXJvfGFzaWF8Y29vcHxpbmZvfG11c2V1bXxuYW1lfHNob3B80YDRhCcuc3BsaXQoJ3wnKTtcblxuLyplc2xpbnQtZW5hYmxlIG1heC1sZW4qL1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiByZXNldFNjYW5DYWNoZShzZWxmKSB7XG4gIHNlbGYuX19pbmRleF9fID0gLTE7XG4gIHNlbGYuX190ZXh0X2NhY2hlX18gICA9ICcnO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVWYWxpZGF0b3IocmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0ZXh0LCBwb3MpIHtcbiAgICB2YXIgdGFpbCA9IHRleHQuc2xpY2UocG9zKTtcblxuICAgIGlmIChyZS50ZXN0KHRhaWwpKSB7XG4gICAgICByZXR1cm4gdGFpbC5tYXRjaChyZSlbMF0ubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9ybWFsaXplcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChtYXRjaCwgc2VsZikge1xuICAgIHNlbGYubm9ybWFsaXplKG1hdGNoKTtcbiAgfTtcbn1cblxuLy8gU2NoZW1hcyBjb21waWxlci4gQnVpbGQgcmVnZXhwcy5cbi8vXG5mdW5jdGlvbiBjb21waWxlKHNlbGYpIHtcblxuICAvLyBMb2FkICYgY2xvbmUgUkUgcGF0dGVybnMuXG4gIHZhciByZSA9IHNlbGYucmUgPSByZXF1aXJlKCcuL2xpYi9yZScpKHNlbGYuX19vcHRzX18pO1xuXG4gIC8vIERlZmluZSBkeW5hbWljIHBhdHRlcm5zXG4gIHZhciB0bGRzID0gc2VsZi5fX3RsZHNfXy5zbGljZSgpO1xuXG4gIHNlbGYub25Db21waWxlKCk7XG5cbiAgaWYgKCFzZWxmLl9fdGxkc19yZXBsYWNlZF9fKSB7XG4gICAgdGxkcy5wdXNoKHRsZHNfMmNoX3NyY19yZSk7XG4gIH1cbiAgdGxkcy5wdXNoKHJlLnNyY194bik7XG5cbiAgcmUuc3JjX3RsZHMgPSB0bGRzLmpvaW4oJ3wnKTtcblxuICBmdW5jdGlvbiB1bnRwbCh0cGwpIHsgcmV0dXJuIHRwbC5yZXBsYWNlKCclVExEUyUnLCByZS5zcmNfdGxkcyk7IH1cblxuICByZS5lbWFpbF9mdXp6eSAgICAgID0gUmVnRXhwKHVudHBsKHJlLnRwbF9lbWFpbF9mdXp6eSksICdpJyk7XG4gIHJlLmxpbmtfZnV6enkgICAgICAgPSBSZWdFeHAodW50cGwocmUudHBsX2xpbmtfZnV6enkpLCAnaScpO1xuICByZS5saW5rX25vX2lwX2Z1enp5ID0gUmVnRXhwKHVudHBsKHJlLnRwbF9saW5rX25vX2lwX2Z1enp5KSwgJ2knKTtcbiAgcmUuaG9zdF9mdXp6eV90ZXN0ICA9IFJlZ0V4cCh1bnRwbChyZS50cGxfaG9zdF9mdXp6eV90ZXN0KSwgJ2knKTtcblxuICAvL1xuICAvLyBDb21waWxlIGVhY2ggc2NoZW1hXG4gIC8vXG5cbiAgdmFyIGFsaWFzZXMgPSBbXTtcblxuICBzZWxmLl9fY29tcGlsZWRfXyA9IHt9OyAvLyBSZXNldCBjb21waWxlZCBkYXRhXG5cbiAgZnVuY3Rpb24gc2NoZW1hRXJyb3IobmFtZSwgdmFsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCcoTGlua2lmeUl0KSBJbnZhbGlkIHNjaGVtYSBcIicgKyBuYW1lICsgJ1wiOiAnICsgdmFsKTtcbiAgfVxuXG4gIE9iamVjdC5rZXlzKHNlbGYuX19zY2hlbWFzX18pLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgdmFsID0gc2VsZi5fX3NjaGVtYXNfX1tuYW1lXTtcblxuICAgIC8vIHNraXAgZGlzYWJsZWQgbWV0aG9kc1xuICAgIGlmICh2YWwgPT09IG51bGwpIHsgcmV0dXJuOyB9XG5cbiAgICB2YXIgY29tcGlsZWQgPSB7IHZhbGlkYXRlOiBudWxsLCBsaW5rOiBudWxsIH07XG5cbiAgICBzZWxmLl9fY29tcGlsZWRfX1tuYW1lXSA9IGNvbXBpbGVkO1xuXG4gICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIGlmIChpc1JlZ0V4cCh2YWwudmFsaWRhdGUpKSB7XG4gICAgICAgIGNvbXBpbGVkLnZhbGlkYXRlID0gY3JlYXRlVmFsaWRhdG9yKHZhbC52YWxpZGF0ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odmFsLnZhbGlkYXRlKSkge1xuICAgICAgICBjb21waWxlZC52YWxpZGF0ZSA9IHZhbC52YWxpZGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjaGVtYUVycm9yKG5hbWUsIHZhbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbC5ub3JtYWxpemUpKSB7XG4gICAgICAgIGNvbXBpbGVkLm5vcm1hbGl6ZSA9IHZhbC5ub3JtYWxpemU7XG4gICAgICB9IGVsc2UgaWYgKCF2YWwubm9ybWFsaXplKSB7XG4gICAgICAgIGNvbXBpbGVkLm5vcm1hbGl6ZSA9IGNyZWF0ZU5vcm1hbGl6ZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjaGVtYUVycm9yKG5hbWUsIHZhbCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcodmFsKSkge1xuICAgICAgYWxpYXNlcy5wdXNoKG5hbWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVtYUVycm9yKG5hbWUsIHZhbCk7XG4gIH0pO1xuXG4gIC8vXG4gIC8vIENvbXBpbGUgcG9zdHBvbmVkIGFsaWFzZXNcbiAgLy9cblxuICBhbGlhc2VzLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgaWYgKCFzZWxmLl9fY29tcGlsZWRfX1tzZWxmLl9fc2NoZW1hc19fW2FsaWFzXV0pIHtcbiAgICAgIC8vIFNpbGVudGx5IGZhaWwgb24gbWlzc2VkIHNjaGVtYXMgdG8gYXZvaWQgZXJyb25zIG9uIGRpc2FibGUuXG4gICAgICAvLyBzY2hlbWFFcnJvcihhbGlhcywgc2VsZi5fX3NjaGVtYXNfX1thbGlhc10pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYuX19jb21waWxlZF9fW2FsaWFzXS52YWxpZGF0ZSA9XG4gICAgICBzZWxmLl9fY29tcGlsZWRfX1tzZWxmLl9fc2NoZW1hc19fW2FsaWFzXV0udmFsaWRhdGU7XG4gICAgc2VsZi5fX2NvbXBpbGVkX19bYWxpYXNdLm5vcm1hbGl6ZSA9XG4gICAgICBzZWxmLl9fY29tcGlsZWRfX1tzZWxmLl9fc2NoZW1hc19fW2FsaWFzXV0ubm9ybWFsaXplO1xuICB9KTtcblxuICAvL1xuICAvLyBGYWtlIHJlY29yZCBmb3IgZ3Vlc3NlZCBsaW5rc1xuICAvL1xuICBzZWxmLl9fY29tcGlsZWRfX1snJ10gPSB7IHZhbGlkYXRlOiBudWxsLCBub3JtYWxpemU6IGNyZWF0ZU5vcm1hbGl6ZXIoKSB9O1xuXG4gIC8vXG4gIC8vIEJ1aWxkIHNjaGVtYSBjb25kaXRpb25cbiAgLy9cbiAgdmFyIHNsaXN0ID0gT2JqZWN0LmtleXMoc2VsZi5fX2NvbXBpbGVkX18pXG4gICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlsdGVyIGRpc2FibGVkICYgZmFrZSBzY2hlbWFzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZS5sZW5ndGggPiAwICYmIHNlbGYuX19jb21waWxlZF9fW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgLm1hcChlc2NhcGVSRSlcbiAgICAgICAgICAgICAgICAgICAgICAuam9pbignfCcpO1xuICAvLyAoPyFfKSBjYXVzZSAxLjV4IHNsb3dkb3duXG4gIHNlbGYucmUuc2NoZW1hX3Rlc3QgICA9IFJlZ0V4cCgnKF58KD8hXykoPzpbPjxcXHVmZjVjXXwnICsgcmUuc3JjX1pQQ2MgKyAnKSkoJyArIHNsaXN0ICsgJyknLCAnaScpO1xuICBzZWxmLnJlLnNjaGVtYV9zZWFyY2ggPSBSZWdFeHAoJyhefCg/IV8pKD86Wz48XFx1ZmY1Y118JyArIHJlLnNyY19aUENjICsgJykpKCcgKyBzbGlzdCArICcpJywgJ2lnJyk7XG5cbiAgc2VsZi5yZS5wcmV0ZXN0ID0gUmVnRXhwKFxuICAgICcoJyArIHNlbGYucmUuc2NoZW1hX3Rlc3Quc291cmNlICsgJyl8KCcgKyBzZWxmLnJlLmhvc3RfZnV6enlfdGVzdC5zb3VyY2UgKyAnKXxAJyxcbiAgICAnaSdcbiAgKTtcblxuICAvL1xuICAvLyBDbGVhbnVwXG4gIC8vXG5cbiAgcmVzZXRTY2FuQ2FjaGUoc2VsZik7XG59XG5cbi8qKlxuICogY2xhc3MgTWF0Y2hcbiAqXG4gKiBNYXRjaCByZXN1bHQuIFNpbmdsZSBlbGVtZW50IG9mIGFycmF5LCByZXR1cm5lZCBieSBbW0xpbmtpZnlJdCNtYXRjaF1dXG4gKiovXG5mdW5jdGlvbiBNYXRjaChzZWxmLCBzaGlmdCkge1xuICB2YXIgc3RhcnQgPSBzZWxmLl9faW5kZXhfXyxcbiAgICAgIGVuZCAgID0gc2VsZi5fX2xhc3RfaW5kZXhfXyxcbiAgICAgIHRleHQgID0gc2VsZi5fX3RleHRfY2FjaGVfXy5zbGljZShzdGFydCwgZW5kKTtcblxuICAvKipcbiAgICogTWF0Y2gjc2NoZW1hIC0+IFN0cmluZ1xuICAgKlxuICAgKiBQcmVmaXggKHByb3RvY29sKSBmb3IgbWF0Y2hlZCBzdHJpbmcuXG4gICAqKi9cbiAgdGhpcy5zY2hlbWEgICAgPSBzZWxmLl9fc2NoZW1hX18udG9Mb3dlckNhc2UoKTtcbiAgLyoqXG4gICAqIE1hdGNoI2luZGV4IC0+IE51bWJlclxuICAgKlxuICAgKiBGaXJzdCBwb3NpdGlvbiBvZiBtYXRjaGVkIHN0cmluZy5cbiAgICoqL1xuICB0aGlzLmluZGV4ICAgICA9IHN0YXJ0ICsgc2hpZnQ7XG4gIC8qKlxuICAgKiBNYXRjaCNsYXN0SW5kZXggLT4gTnVtYmVyXG4gICAqXG4gICAqIE5leHQgcG9zaXRpb24gYWZ0ZXIgbWF0Y2hlZCBzdHJpbmcuXG4gICAqKi9cbiAgdGhpcy5sYXN0SW5kZXggPSBlbmQgKyBzaGlmdDtcbiAgLyoqXG4gICAqIE1hdGNoI3JhdyAtPiBTdHJpbmdcbiAgICpcbiAgICogTWF0Y2hlZCBzdHJpbmcuXG4gICAqKi9cbiAgdGhpcy5yYXcgICAgICAgPSB0ZXh0O1xuICAvKipcbiAgICogTWF0Y2gjdGV4dCAtPiBTdHJpbmdcbiAgICpcbiAgICogTm90bWFsaXplZCB0ZXh0IG9mIG1hdGNoZWQgc3RyaW5nLlxuICAgKiovXG4gIHRoaXMudGV4dCAgICAgID0gdGV4dDtcbiAgLyoqXG4gICAqIE1hdGNoI3VybCAtPiBTdHJpbmdcbiAgICpcbiAgICogTm9ybWFsaXplZCB1cmwgb2YgbWF0Y2hlZCBzdHJpbmcuXG4gICAqKi9cbiAgdGhpcy51cmwgICAgICAgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXRjaChzZWxmLCBzaGlmdCkge1xuICB2YXIgbWF0Y2ggPSBuZXcgTWF0Y2goc2VsZiwgc2hpZnQpO1xuXG4gIHNlbGYuX19jb21waWxlZF9fW21hdGNoLnNjaGVtYV0ubm9ybWFsaXplKG1hdGNoLCBzZWxmKTtcblxuICByZXR1cm4gbWF0Y2g7XG59XG5cblxuLyoqXG4gKiBjbGFzcyBMaW5raWZ5SXRcbiAqKi9cblxuLyoqXG4gKiBuZXcgTGlua2lmeUl0KHNjaGVtYXMsIG9wdGlvbnMpXG4gKiAtIHNjaGVtYXMgKE9iamVjdCk6IE9wdGlvbmFsLiBBZGRpdGlvbmFsIHNjaGVtYXMgdG8gdmFsaWRhdGUgKHByZWZpeC92YWxpZGF0b3IpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHsgZnV6enlMaW5rfGZ1enp5RW1haWx8ZnV6enlJUDogdHJ1ZXxmYWxzZSB9XG4gKlxuICogQ3JlYXRlcyBuZXcgbGlua2lmaWVyIGluc3RhbmNlIHdpdGggb3B0aW9uYWwgYWRkaXRpb25hbCBzY2hlbWFzLlxuICogQ2FuIGJlIGNhbGxlZCB3aXRob3V0IGBuZXdgIGtleXdvcmQgZm9yIGNvbnZlbmllbmNlLlxuICpcbiAqIEJ5IGRlZmF1bHQgdW5kZXJzdGFuZHM6XG4gKlxuICogLSBgaHR0cChzKTovLy4uLmAgLCBgZnRwOi8vLi4uYCwgYG1haWx0bzouLi5gICYgYC8vLi4uYCBsaW5rc1xuICogLSBcImZ1enp5XCIgbGlua3MgYW5kIGVtYWlscyAoZXhhbXBsZS5jb20sIGZvb0BiYXIuY29tKS5cbiAqXG4gKiBgc2NoZW1hc2AgaXMgYW4gb2JqZWN0LCB3aGVyZSBlYWNoIGtleS92YWx1ZSBkZXNjcmliZXMgcHJvdG9jb2wvcnVsZTpcbiAqXG4gKiAtIF9fa2V5X18gLSBsaW5rIHByZWZpeCAodXN1YWxseSwgcHJvdG9jb2wgbmFtZSB3aXRoIGA6YCBhdCB0aGUgZW5kLCBgc2t5cGU6YFxuICogICBmb3IgZXhhbXBsZSkuIGBsaW5raWZ5LWl0YCBtYWtlcyBzaHVyZSB0aGF0IHByZWZpeCBpcyBub3QgcHJlY2VlZGVkIHdpdGhcbiAqICAgYWxwaGFudW1lcmljIGNoYXIgYW5kIHN5bWJvbHMuIE9ubHkgd2hpdGVzcGFjZXMgYW5kIHB1bmN0dWF0aW9uIGFsbG93ZWQuXG4gKiAtIF9fdmFsdWVfXyAtIHJ1bGUgdG8gY2hlY2sgdGFpbCBhZnRlciBsaW5rIHByZWZpeFxuICogICAtIF9TdHJpbmdfIC0ganVzdCBhbGlhcyB0byBleGlzdGluZyBydWxlXG4gKiAgIC0gX09iamVjdF9cbiAqICAgICAtIF92YWxpZGF0ZV8gLSB2YWxpZGF0b3IgZnVuY3Rpb24gKHNob3VsZCByZXR1cm4gbWF0Y2hlZCBsZW5ndGggb24gc3VjY2VzcyksXG4gKiAgICAgICBvciBgUmVnRXhwYC5cbiAqICAgICAtIF9ub3JtYWxpemVfIC0gb3B0aW9uYWwgZnVuY3Rpb24gdG8gbm9ybWFsaXplIHRleHQgJiB1cmwgb2YgbWF0Y2hlZCByZXN1bHRcbiAqICAgICAgIChmb3IgZXhhbXBsZSwgZm9yIEB0d2l0dGVyIG1lbnRpb25zKS5cbiAqXG4gKiBgb3B0aW9uc2A6XG4gKlxuICogLSBfX2Z1enp5TGlua19fIC0gcmVjb2duaWdlIFVSTC1zIHdpdGhvdXQgYGh0dHAocyk6YCBwcmVmaXguIERlZmF1bHQgYHRydWVgLlxuICogLSBfX2Z1enp5SVBfXyAtIGFsbG93IElQcyBpbiBmdXp6eSBsaW5rcyBhYm92ZS4gQ2FuIGNvbmZsaWN0IHdpdGggc29tZSB0ZXh0c1xuICogICBsaWtlIHZlcnNpb24gbnVtYmVycy4gRGVmYXVsdCBgZmFsc2VgLlxuICogLSBfX2Z1enp5RW1haWxfXyAtIHJlY29nbml6ZSBlbWFpbHMgd2l0aG91dCBgbWFpbHRvOmAgcHJlZml4LlxuICpcbiAqKi9cbmZ1bmN0aW9uIExpbmtpZnlJdChzY2hlbWFzLCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBMaW5raWZ5SXQpKSB7XG4gICAgcmV0dXJuIG5ldyBMaW5raWZ5SXQoc2NoZW1hcywgb3B0aW9ucyk7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBpZiAoaXNPcHRpb25zT2JqKHNjaGVtYXMpKSB7XG4gICAgICBvcHRpb25zID0gc2NoZW1hcztcbiAgICAgIHNjaGVtYXMgPSB7fTtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9fb3B0c19fICAgICAgICAgICA9IGFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gIC8vIENhY2hlIGxhc3QgdGVzdGVkIHJlc3VsdC4gVXNlZCB0byBza2lwIHJlcGVhdGluZyBzdGVwcyBvbiBuZXh0IGBtYXRjaGAgY2FsbC5cbiAgdGhpcy5fX2luZGV4X18gICAgICAgICAgPSAtMTtcbiAgdGhpcy5fX2xhc3RfaW5kZXhfXyAgICAgPSAtMTsgLy8gTmV4dCBzY2FuIHBvc2l0aW9uXG4gIHRoaXMuX19zY2hlbWFfXyAgICAgICAgID0gJyc7XG4gIHRoaXMuX190ZXh0X2NhY2hlX18gICAgID0gJyc7XG5cbiAgdGhpcy5fX3NjaGVtYXNfXyAgICAgICAgPSBhc3NpZ24oe30sIGRlZmF1bHRTY2hlbWFzLCBzY2hlbWFzKTtcbiAgdGhpcy5fX2NvbXBpbGVkX18gICAgICAgPSB7fTtcblxuICB0aGlzLl9fdGxkc19fICAgICAgICAgICA9IHRsZHNfZGVmYXVsdDtcbiAgdGhpcy5fX3RsZHNfcmVwbGFjZWRfXyAgPSBmYWxzZTtcblxuICB0aGlzLnJlID0ge307XG5cbiAgY29tcGlsZSh0aGlzKTtcbn1cblxuXG4vKiogY2hhaW5hYmxlXG4gKiBMaW5raWZ5SXQjYWRkKHNjaGVtYSwgZGVmaW5pdGlvbilcbiAqIC0gc2NoZW1hIChTdHJpbmcpOiBydWxlIG5hbWUgKGZpeGVkIHBhdHRlcm4gcHJlZml4KVxuICogLSBkZWZpbml0aW9uIChTdHJpbmd8UmVnRXhwfE9iamVjdCk6IHNjaGVtYSBkZWZpbml0aW9uXG4gKlxuICogQWRkIG5ldyBydWxlIGRlZmluaXRpb24uIFNlZSBjb25zdHJ1Y3RvciBkZXNjcmlwdGlvbiBmb3IgZGV0YWlscy5cbiAqKi9cbkxpbmtpZnlJdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHNjaGVtYSwgZGVmaW5pdGlvbikge1xuICB0aGlzLl9fc2NoZW1hc19fW3NjaGVtYV0gPSBkZWZpbml0aW9uO1xuICBjb21waWxlKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqIGNoYWluYWJsZVxuICogTGlua2lmeUl0I3NldChvcHRpb25zKVxuICogLSBvcHRpb25zIChPYmplY3QpOiB7IGZ1enp5TGlua3xmdXp6eUVtYWlsfGZ1enp5SVA6IHRydWV8ZmFsc2UgfVxuICpcbiAqIFNldCByZWNvZ25pdGlvbiBvcHRpb25zIGZvciBsaW5rcyB3aXRob3V0IHNjaGVtYS5cbiAqKi9cbkxpbmtpZnlJdC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0KG9wdGlvbnMpIHtcbiAgdGhpcy5fX29wdHNfXyA9IGFzc2lnbih0aGlzLl9fb3B0c19fLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogTGlua2lmeUl0I3Rlc3QodGV4dCkgLT4gQm9vbGVhblxuICpcbiAqIFNlYXJjaGVzIGxpbmtpZmlhYmxlIHBhdHRlcm4gYW5kIHJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3Mgb3IgYGZhbHNlYCBvbiBmYWlsLlxuICoqL1xuTGlua2lmeUl0LnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gdGVzdCh0ZXh0KSB7XG4gIC8vIFJlc2V0IHNjYW4gY2FjaGVcbiAgdGhpcy5fX3RleHRfY2FjaGVfXyA9IHRleHQ7XG4gIHRoaXMuX19pbmRleF9fICAgICAgPSAtMTtcblxuICBpZiAoIXRleHQubGVuZ3RoKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIHZhciBtLCBtbCwgbWUsIGxlbiwgc2hpZnQsIG5leHQsIHJlLCB0bGRfcG9zLCBhdF9wb3M7XG5cbiAgLy8gdHJ5IHRvIHNjYW4gZm9yIGxpbmsgd2l0aCBzY2hlbWEgLSB0aGF0J3MgdGhlIG1vc3Qgc2ltcGxlIHJ1bGVcbiAgaWYgKHRoaXMucmUuc2NoZW1hX3Rlc3QudGVzdCh0ZXh0KSkge1xuICAgIHJlID0gdGhpcy5yZS5zY2hlbWFfc2VhcmNoO1xuICAgIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKChtID0gcmUuZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcbiAgICAgIGxlbiA9IHRoaXMudGVzdFNjaGVtYUF0KHRleHQsIG1bMl0sIHJlLmxhc3RJbmRleCk7XG4gICAgICBpZiAobGVuKSB7XG4gICAgICAgIHRoaXMuX19zY2hlbWFfXyAgICAgPSBtWzJdO1xuICAgICAgICB0aGlzLl9faW5kZXhfXyAgICAgID0gbS5pbmRleCArIG1bMV0ubGVuZ3RoO1xuICAgICAgICB0aGlzLl9fbGFzdF9pbmRleF9fID0gbS5pbmRleCArIG1bMF0ubGVuZ3RoICsgbGVuO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5fX29wdHNfXy5mdXp6eUxpbmsgJiYgdGhpcy5fX2NvbXBpbGVkX19bJ2h0dHA6J10pIHtcbiAgICAvLyBndWVzcyBzY2hlbWFsZXNzIGxpbmtzXG4gICAgdGxkX3BvcyA9IHRleHQuc2VhcmNoKHRoaXMucmUuaG9zdF9mdXp6eV90ZXN0KTtcbiAgICBpZiAodGxkX3BvcyA+PSAwKSB7XG4gICAgICAvLyBpZiB0bGQgaXMgbG9jYXRlZCBhZnRlciBmb3VuZCBsaW5rIC0gbm8gbmVlZCB0byBjaGVjayBmdXp6eSBwYXR0ZXJuXG4gICAgICBpZiAodGhpcy5fX2luZGV4X18gPCAwIHx8IHRsZF9wb3MgPCB0aGlzLl9faW5kZXhfXykge1xuICAgICAgICBpZiAoKG1sID0gdGV4dC5tYXRjaCh0aGlzLl9fb3B0c19fLmZ1enp5SVAgPyB0aGlzLnJlLmxpbmtfZnV6enkgOiB0aGlzLnJlLmxpbmtfbm9faXBfZnV6enkpKSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgc2hpZnQgPSBtbC5pbmRleCArIG1sWzFdLmxlbmd0aDtcblxuICAgICAgICAgIGlmICh0aGlzLl9faW5kZXhfXyA8IDAgfHwgc2hpZnQgPCB0aGlzLl9faW5kZXhfXykge1xuICAgICAgICAgICAgdGhpcy5fX3NjaGVtYV9fICAgICA9ICcnO1xuICAgICAgICAgICAgdGhpcy5fX2luZGV4X18gICAgICA9IHNoaWZ0O1xuICAgICAgICAgICAgdGhpcy5fX2xhc3RfaW5kZXhfXyA9IG1sLmluZGV4ICsgbWxbMF0ubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9fb3B0c19fLmZ1enp5RW1haWwgJiYgdGhpcy5fX2NvbXBpbGVkX19bJ21haWx0bzonXSkge1xuICAgIC8vIGd1ZXNzIHNjaGVtYWxlc3MgZW1haWxzXG4gICAgYXRfcG9zID0gdGV4dC5pbmRleE9mKCdAJyk7XG4gICAgaWYgKGF0X3BvcyA+PSAwKSB7XG4gICAgICAvLyBXZSBjYW4ndCBza2lwIHRoaXMgY2hlY2ssIGJlY2F1c2UgdGhpcyBjYXNlcyBhcmUgcG9zc2libGU6XG4gICAgICAvLyAxOTIuMTY4LjEuMUBnbWFpbC5jb20sIG15LmluQGV4YW1wbGUuY29tXG4gICAgICBpZiAoKG1lID0gdGV4dC5tYXRjaCh0aGlzLnJlLmVtYWlsX2Z1enp5KSkgIT09IG51bGwpIHtcblxuICAgICAgICBzaGlmdCA9IG1lLmluZGV4ICsgbWVbMV0ubGVuZ3RoO1xuICAgICAgICBuZXh0ICA9IG1lLmluZGV4ICsgbWVbMF0ubGVuZ3RoO1xuXG4gICAgICAgIGlmICh0aGlzLl9faW5kZXhfXyA8IDAgfHwgc2hpZnQgPCB0aGlzLl9faW5kZXhfXyB8fFxuICAgICAgICAgICAgKHNoaWZ0ID09PSB0aGlzLl9faW5kZXhfXyAmJiBuZXh0ID4gdGhpcy5fX2xhc3RfaW5kZXhfXykpIHtcbiAgICAgICAgICB0aGlzLl9fc2NoZW1hX18gICAgID0gJ21haWx0bzonO1xuICAgICAgICAgIHRoaXMuX19pbmRleF9fICAgICAgPSBzaGlmdDtcbiAgICAgICAgICB0aGlzLl9fbGFzdF9pbmRleF9fID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLl9faW5kZXhfXyA+PSAwO1xufTtcblxuXG4vKipcbiAqIExpbmtpZnlJdCNwcmV0ZXN0KHRleHQpIC0+IEJvb2xlYW5cbiAqXG4gKiBWZXJ5IHF1aWNrIGNoZWNrLCB0aGF0IGNhbiBnaXZlIGZhbHNlIHBvc2l0aXZlcy4gUmV0dXJucyB0cnVlIGlmIGxpbmsgTUFZIEJFXG4gKiBjYW4gZXhpc3RzLiBDYW4gYmUgdXNlZCBmb3Igc3BlZWQgb3B0aW1pemF0aW9uLCB3aGVuIHlvdSBuZWVkIHRvIGNoZWNrIHRoYXRcbiAqIGxpbmsgTk9UIGV4aXN0cy5cbiAqKi9cbkxpbmtpZnlJdC5wcm90b3R5cGUucHJldGVzdCA9IGZ1bmN0aW9uIHByZXRlc3QodGV4dCkge1xuICByZXR1cm4gdGhpcy5yZS5wcmV0ZXN0LnRlc3QodGV4dCk7XG59O1xuXG5cbi8qKlxuICogTGlua2lmeUl0I3Rlc3RTY2hlbWFBdCh0ZXh0LCBuYW1lLCBwb3NpdGlvbikgLT4gTnVtYmVyXG4gKiAtIHRleHQgKFN0cmluZyk6IHRleHQgdG8gc2NhblxuICogLSBuYW1lIChTdHJpbmcpOiBydWxlIChzY2hlbWEpIG5hbWVcbiAqIC0gcG9zaXRpb24gKE51bWJlcik6IHRleHQgb2Zmc2V0IHRvIGNoZWNrIGZyb21cbiAqXG4gKiBTaW1pbGFyIHRvIFtbTGlua2lmeUl0I3Rlc3RdXSBidXQgY2hlY2tzIG9ubHkgc3BlY2lmaWMgcHJvdG9jb2wgdGFpbCBleGFjdGx5XG4gKiBhdCBnaXZlbiBwb3NpdGlvbi4gUmV0dXJucyBsZW5ndGggb2YgZm91bmQgcGF0dGVybiAoMCBvbiBmYWlsKS5cbiAqKi9cbkxpbmtpZnlJdC5wcm90b3R5cGUudGVzdFNjaGVtYUF0ID0gZnVuY3Rpb24gdGVzdFNjaGVtYUF0KHRleHQsIHNjaGVtYSwgcG9zKSB7XG4gIC8vIElmIG5vdCBzdXBwb3J0ZWQgc2NoZW1hIGNoZWNrIHJlcXVlc3RlZCAtIHRlcm1pbmF0ZVxuICBpZiAoIXRoaXMuX19jb21waWxlZF9fW3NjaGVtYS50b0xvd2VyQ2FzZSgpXSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiB0aGlzLl9fY29tcGlsZWRfX1tzY2hlbWEudG9Mb3dlckNhc2UoKV0udmFsaWRhdGUodGV4dCwgcG9zLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBMaW5raWZ5SXQjbWF0Y2godGV4dCkgLT4gQXJyYXl8bnVsbFxuICpcbiAqIFJldHVybnMgYXJyYXkgb2YgZm91bmQgbGluayBkZXNjcmlwdGlvbnMgb3IgYG51bGxgIG9uIGZhaWwuIFdlIHN0cm9uZ2x5XG4gKiByZWNvbW1lbmQgdG8gdXNlIFtbTGlua2lmeUl0I3Rlc3RdXSBmaXJzdCwgZm9yIGJlc3Qgc3BlZWQuXG4gKlxuICogIyMjIyMgUmVzdWx0IG1hdGNoIGRlc2NyaXB0aW9uXG4gKlxuICogLSBfX3NjaGVtYV9fIC0gbGluayBzY2hlbWEsIGNhbiBiZSBlbXB0eSBmb3IgZnV6enkgbGlua3MsIG9yIGAvL2AgZm9yXG4gKiAgIHByb3RvY29sLW5ldXRyYWwgIGxpbmtzLlxuICogLSBfX2luZGV4X18gLSBvZmZzZXQgb2YgbWF0Y2hlZCB0ZXh0XG4gKiAtIF9fbGFzdEluZGV4X18gLSBpbmRleCBvZiBuZXh0IGNoYXIgYWZ0ZXIgbWF0aGNoIGVuZFxuICogLSBfX3Jhd19fIC0gbWF0Y2hlZCB0ZXh0XG4gKiAtIF9fdGV4dF9fIC0gbm9ybWFsaXplZCB0ZXh0XG4gKiAtIF9fdXJsX18gLSBsaW5rLCBnZW5lcmF0ZWQgZnJvbSBtYXRjaGVkIHRleHRcbiAqKi9cbkxpbmtpZnlJdC5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiBtYXRjaCh0ZXh0KSB7XG4gIHZhciBzaGlmdCA9IDAsIHJlc3VsdCA9IFtdO1xuXG4gIC8vIFRyeSB0byB0YWtlIHByZXZpb3VzIGVsZW1lbnQgZnJvbSBjYWNoZSwgaWYgLnRlc3QoKSBjYWxsZWQgYmVmb3JlXG4gIGlmICh0aGlzLl9faW5kZXhfXyA+PSAwICYmIHRoaXMuX190ZXh0X2NhY2hlX18gPT09IHRleHQpIHtcbiAgICByZXN1bHQucHVzaChjcmVhdGVNYXRjaCh0aGlzLCBzaGlmdCkpO1xuICAgIHNoaWZ0ID0gdGhpcy5fX2xhc3RfaW5kZXhfXztcbiAgfVxuXG4gIC8vIEN1dCBoZWFkIGlmIGNhY2hlIHdhcyB1c2VkXG4gIHZhciB0YWlsID0gc2hpZnQgPyB0ZXh0LnNsaWNlKHNoaWZ0KSA6IHRleHQ7XG5cbiAgLy8gU2NhbiBzdHJpbmcgdW50aWwgZW5kIHJlYWNoZWRcbiAgd2hpbGUgKHRoaXMudGVzdCh0YWlsKSkge1xuICAgIHJlc3VsdC5wdXNoKGNyZWF0ZU1hdGNoKHRoaXMsIHNoaWZ0KSk7XG5cbiAgICB0YWlsID0gdGFpbC5zbGljZSh0aGlzLl9fbGFzdF9pbmRleF9fKTtcbiAgICBzaGlmdCArPSB0aGlzLl9fbGFzdF9pbmRleF9fO1xuICB9XG5cbiAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbi8qKiBjaGFpbmFibGVcbiAqIExpbmtpZnlJdCN0bGRzKGxpc3QgWywga2VlcE9sZF0pIC0+IHRoaXNcbiAqIC0gbGlzdCAoQXJyYXkpOiBsaXN0IG9mIHRsZHNcbiAqIC0ga2VlcE9sZCAoQm9vbGVhbik6IG1lcmdlIHdpdGggY3VycmVudCBsaXN0IGlmIGB0cnVlYCAoYGZhbHNlYCBieSBkZWZhdWx0KVxuICpcbiAqIExvYWQgKG9yIG1lcmdlKSBuZXcgdGxkcyBsaXN0LiBUaG9zZSBhcmUgdXNlciBmb3IgZnV6enkgbGlua3MgKHdpdGhvdXQgcHJlZml4KVxuICogdG8gYXZvaWQgZmFsc2UgcG9zaXRpdmVzLiBCeSBkZWZhdWx0IHRoaXMgYWxnb3J5dGhtIHVzZWQ6XG4gKlxuICogLSBob3N0bmFtZSB3aXRoIGFueSAyLWxldHRlciByb290IHpvbmVzIGFyZSBvay5cbiAqIC0gYml6fGNvbXxlZHV8Z292fG5ldHxvcmd8cHJvfHdlYnx4eHh8YWVyb3xhc2lhfGNvb3B8aW5mb3xtdXNldW18bmFtZXxzaG9wfNGA0YRcbiAqICAgYXJlIG9rLlxuICogLSBlbmNvZGVkIChgeG4tLS4uLmApIHJvb3Qgem9uZXMgYXJlIG9rLlxuICpcbiAqIElmIGxpc3QgaXMgcmVwbGFjZWQsIHRoZW4gZXhhY3QgbWF0Y2ggZm9yIDItY2hhcnMgcm9vdCB6b25lcyB3aWxsIGJlIGNoZWNrZWQuXG4gKiovXG5MaW5raWZ5SXQucHJvdG90eXBlLnRsZHMgPSBmdW5jdGlvbiB0bGRzKGxpc3QsIGtlZXBPbGQpIHtcbiAgbGlzdCA9IEFycmF5LmlzQXJyYXkobGlzdCkgPyBsaXN0IDogWyBsaXN0IF07XG5cbiAgaWYgKCFrZWVwT2xkKSB7XG4gICAgdGhpcy5fX3RsZHNfXyA9IGxpc3Quc2xpY2UoKTtcbiAgICB0aGlzLl9fdGxkc19yZXBsYWNlZF9fID0gdHJ1ZTtcbiAgICBjb21waWxlKHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdGhpcy5fX3RsZHNfXyA9IHRoaXMuX190bGRzX18uY29uY2F0KGxpc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNvcnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGVsLCBpZHgsIGFycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsICE9PSBhcnJbaWR4IC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmV2ZXJzZSgpO1xuXG4gIGNvbXBpbGUodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBMaW5raWZ5SXQjbm9ybWFsaXplKG1hdGNoKVxuICpcbiAqIERlZmF1bHQgbm9ybWFsaXplciAoaWYgc2NoZW1hIGRvZXMgbm90IGRlZmluZSBpdCdzIG93bikuXG4gKiovXG5MaW5raWZ5SXQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShtYXRjaCkge1xuXG4gIC8vIERvIG1pbmltYWwgcG9zc2libGUgY2hhbmdlcyBieSBkZWZhdWx0LiBOZWVkIHRvIGNvbGxlY3QgZmVlZGJhY2sgcHJpb3JcbiAgLy8gdG8gbW92ZSBmb3J3YXJkIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9saW5raWZ5LWl0L2lzc3Vlcy8xXG5cbiAgaWYgKCFtYXRjaC5zY2hlbWEpIHsgbWF0Y2gudXJsID0gJ2h0dHA6Ly8nICsgbWF0Y2gudXJsOyB9XG5cbiAgaWYgKG1hdGNoLnNjaGVtYSA9PT0gJ21haWx0bzonICYmICEvXm1haWx0bzovaS50ZXN0KG1hdGNoLnVybCkpIHtcbiAgICBtYXRjaC51cmwgPSAnbWFpbHRvOicgKyBtYXRjaC51cmw7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBMaW5raWZ5SXQjb25Db21waWxlKClcbiAqXG4gKiBPdmVycmlkZSB0byBtb2RpZnkgYmFzaWMgUmVnRXhwLXMuXG4gKiovXG5MaW5raWZ5SXQucHJvdG90eXBlLm9uQ29tcGlsZSA9IGZ1bmN0aW9uIG9uQ29tcGlsZSgpIHtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBMaW5raWZ5SXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgcmUgPSB7fTtcblxuICAvLyBVc2UgZGlyZWN0IGV4dHJhY3QgaW5zdGVhZCBvZiBgcmVnZW5lcmF0ZWAgdG8gcmVkdXNlIGJyb3dzZXJpZmllZCBzaXplXG4gIHJlLnNyY19BbnkgPSByZXF1aXJlKCd1Yy5taWNyby9wcm9wZXJ0aWVzL0FueS9yZWdleCcpLnNvdXJjZTtcbiAgcmUuc3JjX0NjICA9IHJlcXVpcmUoJ3VjLm1pY3JvL2NhdGVnb3JpZXMvQ2MvcmVnZXgnKS5zb3VyY2U7XG4gIHJlLnNyY19aICAgPSByZXF1aXJlKCd1Yy5taWNyby9jYXRlZ29yaWVzL1ovcmVnZXgnKS5zb3VyY2U7XG4gIHJlLnNyY19QICAgPSByZXF1aXJlKCd1Yy5taWNyby9jYXRlZ29yaWVzL1AvcmVnZXgnKS5zb3VyY2U7XG5cbiAgLy8gXFxwe1xcWlxcUFxcQ2NcXENGfSAod2hpdGUgc3BhY2VzICsgY29udHJvbCArIGZvcm1hdCArIHB1bmN0dWF0aW9uKVxuICByZS5zcmNfWlBDYyA9IFsgcmUuc3JjX1osIHJlLnNyY19QLCByZS5zcmNfQ2MgXS5qb2luKCd8Jyk7XG5cbiAgLy8gXFxwe1xcWlxcQ2N9ICh3aGl0ZSBzcGFjZXMgKyBjb250cm9sKVxuICByZS5zcmNfWkNjID0gWyByZS5zcmNfWiwgcmUuc3JjX0NjIF0uam9pbignfCcpO1xuXG4gIC8vIEV4cGVyaW1lbnRhbC4gTGlzdCBvZiBjaGFycywgY29tcGxldGVseSBwcm9oaWJpdGVkIGluIGxpbmtzXG4gIC8vIGJlY2F1c2UgY2FuIHNlcGFyYXRlIGl0IGZyb20gb3RoZXIgcGFydCBvZiB0ZXh0XG4gIHZhciB0ZXh0X3NlcGFyYXRvcnMgPSAnWz48XFx1ZmY1Y10nO1xuXG4gIC8vIEFsbCBwb3NzaWJsZSB3b3JkIGNoYXJhY3RlcnMgKGV2ZXJ5dGhpbmcgd2l0aG91dCBwdW5jdHVhdGlvbiwgc3BhY2VzICYgY29udHJvbHMpXG4gIC8vIERlZmluZWQgdmlhIHB1bmN0dWF0aW9uICYgc3BhY2VzIHRvIHNhdmUgc3BhY2VcbiAgLy8gU2hvdWxkIGJlIHNvbWV0aGluZyBsaWtlIFxccHtcXExcXE5cXFNcXE19IChcXHcgYnV0IHdpdGhvdXQgYF9gKVxuICByZS5zcmNfcHNldWRvX2xldHRlciAgICAgICA9ICcoPzooPyEnICsgdGV4dF9zZXBhcmF0b3JzICsgJ3wnICsgcmUuc3JjX1pQQ2MgKyAnKScgKyByZS5zcmNfQW55ICsgJyknO1xuICAvLyBUaGUgc2FtZSBhcyBhYm90aGUgYnV0IHdpdGhvdXQgWzAtOV1cbiAgLy8gdmFyIHNyY19wc2V1ZG9fbGV0dGVyX25vbl9kID0gJyg/Oig/IVswLTldfCcgKyBzcmNfWlBDYyArICcpJyArIHNyY19BbnkgKyAnKSc7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICByZS5zcmNfaXA0ID1cblxuICAgICcoPzooMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcXFwuKXszfSgyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJztcblxuICAvLyBQcm9oaWJpdCBhbnkgb2YgXCJAL1tdKClcIiBpbiB1c2VyL3Bhc3MgdG8gYXZvaWQgd3JvbmcgZG9tYWluIGZldGNoLlxuICByZS5zcmNfYXV0aCAgICA9ICcoPzooPzooPyEnICsgcmUuc3JjX1pDYyArICd8W0AvXFxcXFtcXFxcXSgpXSkuKStAKT8nO1xuXG4gIHJlLnNyY19wb3J0ID1cblxuICAgICcoPzo6KD86Nig/OlswLTRdXFxcXGR7M318NSg/OlswLTRdXFxcXGR7Mn18NSg/OlswLTJdXFxcXGR8M1swLTVdKSkpfFsxLTVdP1xcXFxkezEsNH0pKT8nO1xuXG4gIHJlLnNyY19ob3N0X3Rlcm1pbmF0b3IgPVxuXG4gICAgJyg/PSR8JyArIHRleHRfc2VwYXJhdG9ycyArICd8JyArIHJlLnNyY19aUENjICsgJykoPyEtfF98OlxcXFxkfFxcXFwuLXxcXFxcLig/ISR8JyArIHJlLnNyY19aUENjICsgJykpJztcblxuICByZS5zcmNfcGF0aCA9XG5cbiAgICAnKD86JyArXG4gICAgICAnWy8/I10nICtcbiAgICAgICAgJyg/OicgK1xuICAgICAgICAgICcoPyEnICsgcmUuc3JjX1pDYyArICd8JyArIHRleHRfc2VwYXJhdG9ycyArICd8WygpW1xcXFxde30uLFwiXFwnPyFcXFxcLV0pLnwnICtcbiAgICAgICAgICAnXFxcXFsoPzooPyEnICsgcmUuc3JjX1pDYyArICd8XFxcXF0pLikqXFxcXF18JyArXG4gICAgICAgICAgJ1xcXFwoKD86KD8hJyArIHJlLnNyY19aQ2MgKyAnfFspXSkuKSpcXFxcKXwnICtcbiAgICAgICAgICAnXFxcXHsoPzooPyEnICsgcmUuc3JjX1pDYyArICd8W31dKS4pKlxcXFx9fCcgK1xuICAgICAgICAgICdcXFxcXCIoPzooPyEnICsgcmUuc3JjX1pDYyArICd8W1wiXSkuKStcXFxcXCJ8JyArXG4gICAgICAgICAgXCJcXFxcJyg/Oig/IVwiICsgcmUuc3JjX1pDYyArIFwifFsnXSkuKStcXFxcJ3xcIiArXG4gICAgICAgICAgXCJcXFxcJyg/PVwiICsgcmUuc3JjX3BzZXVkb19sZXR0ZXIgKyAnfFstXSkufCcgKyAgLy8gYWxsb3cgYEknbV9raW5nYCBpZiBubyBwYWlyIGZvdW5kXG4gICAgICAgICAgJ1xcXFwuezIsNH1bYS16QS1aMC05JS9dfCcgKyAvLyBnaXRodWIgaGFzIC4uLiBpbiBjb21taXQgcmFuZ2UgbGlua3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ29vZ2xlIGhhcyAuLi4uIGluIGxpbmtzIChpc3N1ZSAjNjYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzdHJpY3QgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIGVuZ2xpc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIHBlcmNlbnQtZW5jb2RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0gcGFydHMgb2YgZmlsZSBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdW50aWwgbW9yZSBleGFtcGxlcyBmb3VuZC5cbiAgICAgICAgICAnXFxcXC4oPyEnICsgcmUuc3JjX1pDYyArICd8Wy5dKS58JyArXG4gICAgICAgICAgKG9wdHMgJiYgb3B0c1snLS0tJ10gP1xuICAgICAgICAgICAgJ1xcXFwtKD8hLS0oPzpbXi1dfCQpKSg/Oi0qKXwnIC8vIGAtLS1gID0+IGxvbmcgZGFzaCwgdGVybWluYXRlXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAnXFxcXC0rfCdcbiAgICAgICAgICApICtcbiAgICAgICAgICAnXFxcXCwoPyEnICsgcmUuc3JjX1pDYyArICcpLnwnICsgICAgICAvLyBhbGxvdyBgLCwsYCBpbiBwYXRoc1xuICAgICAgICAgICdcXFxcISg/IScgKyByZS5zcmNfWkNjICsgJ3xbIV0pLnwnICtcbiAgICAgICAgICAnXFxcXD8oPyEnICsgcmUuc3JjX1pDYyArICd8Wz9dKS4nICtcbiAgICAgICAgJykrJyArXG4gICAgICAnfFxcXFwvJyArXG4gICAgJyk/JztcblxuICAvLyBBbGxvdyBhbnl0aGluZyBpbiBtYXJrZG93biBzcGVjLCBmb3JiaWQgcXVvdGUgKFwiKSBhdCB0aGUgZmlyc3QgcG9zaXRpb25cbiAgLy8gYmVjYXVzZSBlbWFpbHMgZW5jbG9zZWQgaW4gcXVvdGVzIGFyZSBmYXIgbW9yZSBjb21tb25cbiAgcmUuc3JjX2VtYWlsX25hbWUgPVxuXG4gICAgJ1tcXFxcLTs6Jj1cXFxcK1xcXFwkLFxcXFwuYS16QS1aMC05X11bXFxcXC07OiY9XFxcXCtcXFxcJCxcXFxcXCJcXFxcLmEtekEtWjAtOV9dKic7XG5cbiAgcmUuc3JjX3huID1cblxuICAgICd4bi0tW2EtejAtOVxcXFwtXXsxLDU5fSc7XG5cbiAgLy8gTW9yZSB0byByZWFkIGFib3V0IGRvbWFpbiBuYW1lc1xuICAvLyBodHRwOi8vc2VydmVyZmF1bHQuY29tL3F1ZXN0aW9ucy82MzgyNjAvXG5cbiAgcmUuc3JjX2RvbWFpbl9yb290ID1cblxuICAgIC8vIEFsbG93IGxldHRlcnMgJiBkaWdpdHMgKGh0dHA6Ly90ZXN0MSlcbiAgICAnKD86JyArXG4gICAgICByZS5zcmNfeG4gK1xuICAgICAgJ3wnICtcbiAgICAgIHJlLnNyY19wc2V1ZG9fbGV0dGVyICsgJ3sxLDYzfScgK1xuICAgICcpJztcblxuICByZS5zcmNfZG9tYWluID1cblxuICAgICcoPzonICtcbiAgICAgIHJlLnNyY194biArXG4gICAgICAnfCcgK1xuICAgICAgJyg/OicgKyByZS5zcmNfcHNldWRvX2xldHRlciArICcpJyArXG4gICAgICAnfCcgK1xuICAgICAgJyg/OicgKyByZS5zcmNfcHNldWRvX2xldHRlciArICcoPzotfCcgKyByZS5zcmNfcHNldWRvX2xldHRlciArICcpezAsNjF9JyArIHJlLnNyY19wc2V1ZG9fbGV0dGVyICsgJyknICtcbiAgICAnKSc7XG5cbiAgcmUuc3JjX2hvc3QgPVxuXG4gICAgJyg/OicgK1xuICAgIC8vIERvbid0IG5lZWQgSVAgY2hlY2ssIGJlY2F1c2UgZGlnaXRzIGFyZSBhbHJlYWR5IGFsbG93ZWQgaW4gbm9ybWFsIGRvbWFpbiBuYW1lc1xuICAgIC8vICAgc3JjX2lwNCArXG4gICAgLy8gJ3wnICtcbiAgICAgICcoPzooPzooPzonICsgcmUuc3JjX2RvbWFpbiArICcpXFxcXC4pKicgKyByZS5zcmNfZG9tYWluLypfcm9vdCovICsgJyknICtcbiAgICAnKSc7XG5cbiAgcmUudHBsX2hvc3RfZnV6enkgPVxuXG4gICAgJyg/OicgK1xuICAgICAgcmUuc3JjX2lwNCArXG4gICAgJ3wnICtcbiAgICAgICcoPzooPzooPzonICsgcmUuc3JjX2RvbWFpbiArICcpXFxcXC4pKyg/OiVUTERTJSkpJyArXG4gICAgJyknO1xuXG4gIHJlLnRwbF9ob3N0X25vX2lwX2Z1enp5ID1cblxuICAgICcoPzooPzooPzonICsgcmUuc3JjX2RvbWFpbiArICcpXFxcXC4pKyg/OiVUTERTJSkpJztcblxuICByZS5zcmNfaG9zdF9zdHJpY3QgPVxuXG4gICAgcmUuc3JjX2hvc3QgKyByZS5zcmNfaG9zdF90ZXJtaW5hdG9yO1xuXG4gIHJlLnRwbF9ob3N0X2Z1enp5X3N0cmljdCA9XG5cbiAgICByZS50cGxfaG9zdF9mdXp6eSArIHJlLnNyY19ob3N0X3Rlcm1pbmF0b3I7XG5cbiAgcmUuc3JjX2hvc3RfcG9ydF9zdHJpY3QgPVxuXG4gICAgcmUuc3JjX2hvc3QgKyByZS5zcmNfcG9ydCArIHJlLnNyY19ob3N0X3Rlcm1pbmF0b3I7XG5cbiAgcmUudHBsX2hvc3RfcG9ydF9mdXp6eV9zdHJpY3QgPVxuXG4gICAgcmUudHBsX2hvc3RfZnV6enkgKyByZS5zcmNfcG9ydCArIHJlLnNyY19ob3N0X3Rlcm1pbmF0b3I7XG5cbiAgcmUudHBsX2hvc3RfcG9ydF9ub19pcF9mdXp6eV9zdHJpY3QgPVxuXG4gICAgcmUudHBsX2hvc3Rfbm9faXBfZnV6enkgKyByZS5zcmNfcG9ydCArIHJlLnNyY19ob3N0X3Rlcm1pbmF0b3I7XG5cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBNYWluIHJ1bGVzXG5cbiAgLy8gUnVkZSB0ZXN0IGZ1enp5IGxpbmtzIGJ5IGhvc3QsIGZvciBxdWljayBkZW55XG4gIHJlLnRwbF9ob3N0X2Z1enp5X3Rlc3QgPVxuXG4gICAgJ2xvY2FsaG9zdHx3d3dcXFxcLnxcXFxcLlxcXFxkezEsM31cXFxcLnwoPzpcXFxcLig/OiVUTERTJSkoPzonICsgcmUuc3JjX1pQQ2MgKyAnfD58JCkpJztcblxuICByZS50cGxfZW1haWxfZnV6enkgPVxuXG4gICAgICAnKF58JyArIHRleHRfc2VwYXJhdG9ycyArICd8XCJ8XFxcXCh8JyArIHJlLnNyY19aQ2MgKyAnKScgK1xuICAgICAgJygnICsgcmUuc3JjX2VtYWlsX25hbWUgKyAnQCcgKyByZS50cGxfaG9zdF9mdXp6eV9zdHJpY3QgKyAnKSc7XG5cbiAgcmUudHBsX2xpbmtfZnV6enkgPVxuICAgICAgLy8gRnV6enkgbGluayBjYW4ndCBiZSBwcmVwZW5kZWQgd2l0aCAuOi9cXC0gYW5kIG5vbiBwdW5jdHVhdGlvbi5cbiAgICAgIC8vIGJ1dCBjYW4gc3RhcnQgd2l0aCA+IChtYXJrZG93biBibG9ja3F1b3RlKVxuICAgICAgJyhefCg/IVsuOi9cXFxcLV9AXSkoPzpbJCs8PT5eYHxcXHVmZjVjXXwnICsgcmUuc3JjX1pQQ2MgKyAnKSknICtcbiAgICAgICcoKD8hWyQrPD0+XmB8XFx1ZmY1Y10pJyArIHJlLnRwbF9ob3N0X3BvcnRfZnV6enlfc3RyaWN0ICsgcmUuc3JjX3BhdGggKyAnKSc7XG5cbiAgcmUudHBsX2xpbmtfbm9faXBfZnV6enkgPVxuICAgICAgLy8gRnV6enkgbGluayBjYW4ndCBiZSBwcmVwZW5kZWQgd2l0aCAuOi9cXC0gYW5kIG5vbiBwdW5jdHVhdGlvbi5cbiAgICAgIC8vIGJ1dCBjYW4gc3RhcnQgd2l0aCA+IChtYXJrZG93biBibG9ja3F1b3RlKVxuICAgICAgJyhefCg/IVsuOi9cXFxcLV9AXSkoPzpbJCs8PT5eYHxcXHVmZjVjXXwnICsgcmUuc3JjX1pQQ2MgKyAnKSknICtcbiAgICAgICcoKD8hWyQrPD0+XmB8XFx1ZmY1Y10pJyArIHJlLnRwbF9ob3N0X3BvcnRfbm9faXBfZnV6enlfc3RyaWN0ICsgcmUuc3JjX3BhdGggKyAnKSc7XG5cbiAgcmV0dXJuIHJlO1xufTtcbiIsIi8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuNC4xIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiZcblx0XHQhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0IW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChcblx0XHRmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsXG5cdCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW15cXHgyMC1cXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cblx0LyoqIEVycm9yIG1lc3NhZ2VzICovXG5cdGVycm9ycyA9IHtcblx0XHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHRcdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdFx0J2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcblx0fSxcblxuXHQvKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5cdGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbixcblx0Zmxvb3IgPSBNYXRoLmZsb29yLFxuXHRzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuXG5cdC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgKi9cblx0a2V5O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG5cdCAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cblx0ICovXG5cdGZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuNC4xJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykge1xuXHRcdFx0Ly8gaW4gTm9kZS5qcywgaW8uanMsIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHRmb3IgKGtleSBpbiBwdW55Y29kZSkge1xuXHRcdFx0XHRwdW55Y29kZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gcHVueWNvZGVba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBtYXJrZG93bi1pdCBkZWZhdWx0IG9wdGlvbnNcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvcHRpb25zOiB7XG4gICAgaHRtbDogICAgICAgICBmYWxzZSwgICAgICAgIC8vIEVuYWJsZSBIVE1MIHRhZ3MgaW4gc291cmNlXG4gICAgeGh0bWxPdXQ6ICAgICBmYWxzZSwgICAgICAgIC8vIFVzZSAnLycgdG8gY2xvc2Ugc2luZ2xlIHRhZ3MgKDxiciAvPilcbiAgICBicmVha3M6ICAgICAgIGZhbHNlLCAgICAgICAgLy8gQ29udmVydCAnXFxuJyBpbiBwYXJhZ3JhcGhzIGludG8gPGJyPlxuICAgIGxhbmdQcmVmaXg6ICAgJ2xhbmd1YWdlLScsICAvLyBDU1MgbGFuZ3VhZ2UgcHJlZml4IGZvciBmZW5jZWQgYmxvY2tzXG4gICAgbGlua2lmeTogICAgICBmYWxzZSwgICAgICAgIC8vIGF1dG9jb252ZXJ0IFVSTC1saWtlIHRleHRzIHRvIGxpbmtzXG5cbiAgICAvLyBFbmFibGUgc29tZSBsYW5ndWFnZS1uZXV0cmFsIHJlcGxhY2VtZW50cyArIHF1b3RlcyBiZWF1dGlmaWNhdGlvblxuICAgIHR5cG9ncmFwaGVyOiAgZmFsc2UsXG5cbiAgICAvLyBEb3VibGUgKyBzaW5nbGUgcXVvdGVzIHJlcGxhY2VtZW50IHBhaXJzLCB3aGVuIHR5cG9ncmFwaGVyIGVuYWJsZWQsXG4gICAgLy8gYW5kIHNtYXJ0cXVvdGVzIG9uLiBDb3VsZCBiZSBlaXRoZXIgYSBTdHJpbmcgb3IgYW4gQXJyYXkuXG4gICAgLy9cbiAgICAvLyBGb3IgZXhhbXBsZSwgeW91IGNhbiB1c2UgJ8KrwrvigJ7igJwnIGZvciBSdXNzaWFuLCAn4oCe4oCc4oCa4oCYJyBmb3IgR2VybWFuLFxuICAgIC8vIGFuZCBbJ8KrXFx4QTAnLCAnXFx4QTDCuycsICfigLlcXHhBMCcsICdcXHhBMOKAuiddIGZvciBGcmVuY2ggKGluY2x1ZGluZyBuYnNwKS5cbiAgICBxdW90ZXM6ICdcXHUyMDFjXFx1MjAxZFxcdTIwMThcXHUyMDE5JywgLyog4oCc4oCd4oCY4oCZICovXG5cbiAgICAvLyBIaWdobGlnaHRlciBmdW5jdGlvbi4gU2hvdWxkIHJldHVybiBlc2NhcGVkIEhUTUwsXG4gICAgLy8gb3IgJycgaWYgdGhlIHNvdXJjZSBzdHJpbmcgaXMgbm90IGNoYW5nZWQgYW5kIHNob3VsZCBiZSBlc2NhcGVkIGV4dGVybmFseS5cbiAgICAvLyBJZiByZXN1bHQgc3RhcnRzIHdpdGggPHByZS4uLiBpbnRlcm5hbCB3cmFwcGVyIGlzIHNraXBwZWQuXG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiAoLypzdHIsIGxhbmcqLykgeyByZXR1cm4gJyc7IH1cbiAgICAvL1xuICAgIGhpZ2hsaWdodDogbnVsbCxcblxuICAgIG1heE5lc3Rpbmc6ICAgMTAwICAgICAgICAgICAgLy8gSW50ZXJuYWwgcHJvdGVjdGlvbiwgcmVjdXJzaW9uIGxpbWl0XG4gIH0sXG5cbiAgY29tcG9uZW50czoge1xuXG4gICAgY29yZToge30sXG4gICAgYmxvY2s6IHt9LFxuICAgIGlubGluZToge31cbiAgfVxufTtcbiIsIi8vIFwiWmVyb1wiIHByZXNldCwgd2l0aCBub3RoaW5nIGVuYWJsZWQuIFVzZWZ1bCBmb3IgbWFudWFsIGNvbmZpZ3VyaW5nIG9mIHNpbXBsZVxuLy8gbW9kZXMuIEZvciBleGFtcGxlLCB0byBwYXJzZSBib2xkL2l0YWxpYyBvbmx5LlxuXG4ndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9wdGlvbnM6IHtcbiAgICBodG1sOiAgICAgICAgIGZhbHNlLCAgICAgICAgLy8gRW5hYmxlIEhUTUwgdGFncyBpbiBzb3VyY2VcbiAgICB4aHRtbE91dDogICAgIGZhbHNlLCAgICAgICAgLy8gVXNlICcvJyB0byBjbG9zZSBzaW5nbGUgdGFncyAoPGJyIC8+KVxuICAgIGJyZWFrczogICAgICAgZmFsc2UsICAgICAgICAvLyBDb252ZXJ0ICdcXG4nIGluIHBhcmFncmFwaHMgaW50byA8YnI+XG4gICAgbGFuZ1ByZWZpeDogICAnbGFuZ3VhZ2UtJywgIC8vIENTUyBsYW5ndWFnZSBwcmVmaXggZm9yIGZlbmNlZCBibG9ja3NcbiAgICBsaW5raWZ5OiAgICAgIGZhbHNlLCAgICAgICAgLy8gYXV0b2NvbnZlcnQgVVJMLWxpa2UgdGV4dHMgdG8gbGlua3NcblxuICAgIC8vIEVuYWJsZSBzb21lIGxhbmd1YWdlLW5ldXRyYWwgcmVwbGFjZW1lbnRzICsgcXVvdGVzIGJlYXV0aWZpY2F0aW9uXG4gICAgdHlwb2dyYXBoZXI6ICBmYWxzZSxcblxuICAgIC8vIERvdWJsZSArIHNpbmdsZSBxdW90ZXMgcmVwbGFjZW1lbnQgcGFpcnMsIHdoZW4gdHlwb2dyYXBoZXIgZW5hYmxlZCxcbiAgICAvLyBhbmQgc21hcnRxdW90ZXMgb24uIENvdWxkIGJlIGVpdGhlciBhIFN0cmluZyBvciBhbiBBcnJheS5cbiAgICAvL1xuICAgIC8vIEZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSAnwqvCu+KAnuKAnCcgZm9yIFJ1c3NpYW4sICfigJ7igJzigJrigJgnIGZvciBHZXJtYW4sXG4gICAgLy8gYW5kIFsnwqtcXHhBMCcsICdcXHhBMMK7JywgJ+KAuVxceEEwJywgJ1xceEEw4oC6J10gZm9yIEZyZW5jaCAoaW5jbHVkaW5nIG5ic3ApLlxuICAgIHF1b3RlczogJ1xcdTIwMWNcXHUyMDFkXFx1MjAxOFxcdTIwMTknLCAvKiDigJzigJ3igJjigJkgKi9cblxuICAgIC8vIEhpZ2hsaWdodGVyIGZ1bmN0aW9uLiBTaG91bGQgcmV0dXJuIGVzY2FwZWQgSFRNTCxcbiAgICAvLyBvciAnJyBpZiB0aGUgc291cmNlIHN0cmluZyBpcyBub3QgY2hhbmdlZCBhbmQgc2hvdWxkIGJlIGVzY2FwZWQgZXh0ZXJuYWx5LlxuICAgIC8vIElmIHJlc3VsdCBzdGFydHMgd2l0aCA8cHJlLi4uIGludGVybmFsIHdyYXBwZXIgaXMgc2tpcHBlZC5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uICgvKnN0ciwgbGFuZyovKSB7IHJldHVybiAnJzsgfVxuICAgIC8vXG4gICAgaGlnaGxpZ2h0OiBudWxsLFxuXG4gICAgbWF4TmVzdGluZzogICAyMCAgICAgICAgICAgIC8vIEludGVybmFsIHByb3RlY3Rpb24sIHJlY3Vyc2lvbiBsaW1pdFxuICB9LFxuXG4gIGNvbXBvbmVudHM6IHtcblxuICAgIGNvcmU6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgICdub3JtYWxpemUnLFxuICAgICAgICAnYmxvY2snLFxuICAgICAgICAnaW5saW5lJ1xuICAgICAgXVxuICAgIH0sXG5cbiAgICBibG9jazoge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAgJ3BhcmFncmFwaCdcbiAgICAgIF1cbiAgICB9LFxuXG4gICAgaW5saW5lOiB7XG4gICAgICBydWxlczogW1xuICAgICAgICAndGV4dCdcbiAgICAgIF0sXG4gICAgICBydWxlczI6IFtcbiAgICAgICAgJ2JhbGFuY2VfcGFpcnMnLFxuICAgICAgICAndGV4dF9jb2xsYXBzZSdcbiAgICAgIF1cbiAgICB9XG4gIH1cbn07XG4iLCIvLyBDb21tb25tYXJrIGRlZmF1bHQgb3B0aW9uc1xuXG4ndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9wdGlvbnM6IHtcbiAgICBodG1sOiAgICAgICAgIHRydWUsICAgICAgICAgLy8gRW5hYmxlIEhUTUwgdGFncyBpbiBzb3VyY2VcbiAgICB4aHRtbE91dDogICAgIHRydWUsICAgICAgICAgLy8gVXNlICcvJyB0byBjbG9zZSBzaW5nbGUgdGFncyAoPGJyIC8+KVxuICAgIGJyZWFrczogICAgICAgZmFsc2UsICAgICAgICAvLyBDb252ZXJ0ICdcXG4nIGluIHBhcmFncmFwaHMgaW50byA8YnI+XG4gICAgbGFuZ1ByZWZpeDogICAnbGFuZ3VhZ2UtJywgIC8vIENTUyBsYW5ndWFnZSBwcmVmaXggZm9yIGZlbmNlZCBibG9ja3NcbiAgICBsaW5raWZ5OiAgICAgIGZhbHNlLCAgICAgICAgLy8gYXV0b2NvbnZlcnQgVVJMLWxpa2UgdGV4dHMgdG8gbGlua3NcblxuICAgIC8vIEVuYWJsZSBzb21lIGxhbmd1YWdlLW5ldXRyYWwgcmVwbGFjZW1lbnRzICsgcXVvdGVzIGJlYXV0aWZpY2F0aW9uXG4gICAgdHlwb2dyYXBoZXI6ICBmYWxzZSxcblxuICAgIC8vIERvdWJsZSArIHNpbmdsZSBxdW90ZXMgcmVwbGFjZW1lbnQgcGFpcnMsIHdoZW4gdHlwb2dyYXBoZXIgZW5hYmxlZCxcbiAgICAvLyBhbmQgc21hcnRxdW90ZXMgb24uIENvdWxkIGJlIGVpdGhlciBhIFN0cmluZyBvciBhbiBBcnJheS5cbiAgICAvL1xuICAgIC8vIEZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSAnwqvCu+KAnuKAnCcgZm9yIFJ1c3NpYW4sICfigJ7igJzigJrigJgnIGZvciBHZXJtYW4sXG4gICAgLy8gYW5kIFsnwqtcXHhBMCcsICdcXHhBMMK7JywgJ+KAuVxceEEwJywgJ1xceEEw4oC6J10gZm9yIEZyZW5jaCAoaW5jbHVkaW5nIG5ic3ApLlxuICAgIHF1b3RlczogJ1xcdTIwMWNcXHUyMDFkXFx1MjAxOFxcdTIwMTknLCAvKiDigJzigJ3igJjigJkgKi9cblxuICAgIC8vIEhpZ2hsaWdodGVyIGZ1bmN0aW9uLiBTaG91bGQgcmV0dXJuIGVzY2FwZWQgSFRNTCxcbiAgICAvLyBvciAnJyBpZiB0aGUgc291cmNlIHN0cmluZyBpcyBub3QgY2hhbmdlZCBhbmQgc2hvdWxkIGJlIGVzY2FwZWQgZXh0ZXJuYWx5LlxuICAgIC8vIElmIHJlc3VsdCBzdGFydHMgd2l0aCA8cHJlLi4uIGludGVybmFsIHdyYXBwZXIgaXMgc2tpcHBlZC5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uICgvKnN0ciwgbGFuZyovKSB7IHJldHVybiAnJzsgfVxuICAgIC8vXG4gICAgaGlnaGxpZ2h0OiBudWxsLFxuXG4gICAgbWF4TmVzdGluZzogICAyMCAgICAgICAgICAgIC8vIEludGVybmFsIHByb3RlY3Rpb24sIHJlY3Vyc2lvbiBsaW1pdFxuICB9LFxuXG4gIGNvbXBvbmVudHM6IHtcblxuICAgIGNvcmU6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgICdub3JtYWxpemUnLFxuICAgICAgICAnYmxvY2snLFxuICAgICAgICAnaW5saW5lJ1xuICAgICAgXVxuICAgIH0sXG5cbiAgICBibG9jazoge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAgJ2Jsb2NrcXVvdGUnLFxuICAgICAgICAnY29kZScsXG4gICAgICAgICdmZW5jZScsXG4gICAgICAgICdoZWFkaW5nJyxcbiAgICAgICAgJ2hyJyxcbiAgICAgICAgJ2h0bWxfYmxvY2snLFxuICAgICAgICAnbGhlYWRpbmcnLFxuICAgICAgICAnbGlzdCcsXG4gICAgICAgICdyZWZlcmVuY2UnLFxuICAgICAgICAncGFyYWdyYXBoJ1xuICAgICAgXVxuICAgIH0sXG5cbiAgICBpbmxpbmU6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgICdhdXRvbGluaycsXG4gICAgICAgICdiYWNrdGlja3MnLFxuICAgICAgICAnZW1waGFzaXMnLFxuICAgICAgICAnZW50aXR5JyxcbiAgICAgICAgJ2VzY2FwZScsXG4gICAgICAgICdodG1sX2lubGluZScsXG4gICAgICAgICdpbWFnZScsXG4gICAgICAgICdsaW5rJyxcbiAgICAgICAgJ25ld2xpbmUnLFxuICAgICAgICAndGV4dCdcbiAgICAgIF0sXG4gICAgICBydWxlczI6IFtcbiAgICAgICAgJ2JhbGFuY2VfcGFpcnMnLFxuICAgICAgICAnZW1waGFzaXMnLFxuICAgICAgICAndGV4dF9jb2xsYXBzZSdcbiAgICAgIF1cbiAgICB9XG4gIH1cbn07XG4iLCJcclxuY29uc3QgbGlzdGVuZXJzQ29uZmlnOkV4dC5wYW5lbC5QYW5lbEV2ZW50ID0ge1xyXG4gIGJveHJlYWR5OihvYmo6IEV4dC5wYW5lbC5QYW5lbCwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGVPcHRzOiBvYmplY3QpPT57XHJcbiAgICBvYmouc2V0SHRtbCgnPGgxIGNsYXNzPVwieC1wYW5lbC1oZWFkZXJcIj5IZWxsbyBUczwvaDE+Jyk7XHJcbiAgfVxyXG59XHJcbmNvbnN0IE5vcnRoUGFuZWw6RXh0LnBhbmVsLlBhbmVsQ29uZmlnPXtcclxuICBib3JkZXI6IGZhbHNlLFxyXG4gIG1hcmdpbjogJzAgMCA1IDAnLFxyXG4gIGhpZGRlbjp0cnVlLFxyXG4gIHJlZ2lvbjogXCJub3J0aFwiLFxyXG4gIHh0eXBlOlwicGFuZWxcIiwgIFxyXG4gIGxpc3RlbmVyczpsaXN0ZW5lcnNDb25maWdcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgTm9ydGhQYW5lbDsiLCJpbXBvcnQgeyBTd2FnZ2VySW5mbywgU3dhZ2dlclBhcmFtZXRlckluZm8sIFN3YWdnZXJEZWZpbml0aW9uSW5mbywgU3dhZ2dlckRlZmluaXRpb25Qcm9wZXJ0eUluZm8gfSBmcm9tICcuL21vZGVsL1N3YXJnZ2VySW5mbydcclxuXHJcbmV4cG9ydCBjbGFzcyBNYXJrRG93biB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldFBhcmFtZXRlckZvck1EKHBhcmFtZXRlcnM6IFN3YWdnZXJQYXJhbWV0ZXJJbmZvW10pOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIHBhcmFtZXRlcnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gYHwke2l0ZW0ubmFtZX0gfCAke2l0ZW0uZGVzY3JpcHRpb259ICB8JHtpdGVtLmlufSB8ICR7aXRlbS5zY2hlbWEgIT09IHVuZGVmaW5lZCA/IGAke2l0ZW0uc2NoZW1hLiRyZWZ9YCA6IGAke2l0ZW0udHlwZSA9PSB1bmRlZmluZWQgPyAnJyA6IGl0ZW0udHlwZX1gfSB8JHtpdGVtLmRlZmF1bHR9fCR7aXRlbS5yZXF1aXJlZH18XHJcbmBcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvL+iOt+W+l+aooeWei+WQjeWtl1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRSZWZOYW1lKHZhbDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgdmFsdSDnmoTlgLzmmK8gJHt2YWx9YCk7XHJcbiAgICAgICAgaWYgKHZhbCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsLnN0YXJ0c1dpdGgoXCIjXCIpICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN1bHQgPSB2YWwuc3Vic3RyaW5nKHZhbC5sYXN0SW5kZXhPZihcIi9cIikgKyAxLCB2YWwubGVuZ3RoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgdmFsdSDnmoTlgLzmmK8gJHt2YWx9LHJlc3VsdOeahOWAvOaYryR7cmVzdWx0fWApO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRNb2RlbE1EVGFibGUobW9kZWw6IFN3YWdnZXJEZWZpbml0aW9uSW5mbyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIGlmIChtb2RlbC50aXRsZS5zdGFydHNXaXRoKFwiTXNDb21tb25SZXN1bHRcIikgfHwgbW9kZWwudGl0bGUuc3RhcnRzV2l0aChcIkNvbW1vblJlc3VsdFwiKSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBtb2RlbC5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gbW9kZWwucHJvcGVydGllc1trZXldIGFzIFN3YWdnZXJEZWZpbml0aW9uUHJvcGVydHlJbmZvO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGB8JHtrZXl9fCR7cHJvcC50eXBlfXwke2tleSA9PSBcInJlc3VsdFwiID8gJzDooajnpLrmiJDlip/vvIzlhbbku5blgLzooajnpLrplJnor68nIDogKGtleSA9PSBcImRldGFpbFwiID8gJ3Jlc3VsdOWvueW6lOeahOa2iOaBr+aWh+acrCcgOiAoa2V5ID09IFwiZGF0YVwiID8gJ+i/lOWbnueahOaVsOaNricgOiBwcm9wLmRlc2NyaXB0aW9uKSl9ICAgIHxcclxuYFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbW9kZWwucHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IG1vZGVsLnByb3BlcnRpZXNba2V5XSBhcyBTd2FnZ2VyRGVmaW5pdGlvblByb3BlcnR5SW5mbztcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBgfCR7a2V5fXwke3Byb3AuZm9ybWF0ID8gYCR7cHJvcC50eXBlfSgke3Byb3AuZm9ybWF0fSlgIDogcHJvcC50eXBlfXwke3Byb3AuZGVzY3JpcHRpb259fFxyXG5gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50cmltKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRNb2RlbE1ESlNPTihtb2RlbDogU3dhZ2dlckRlZmluaXRpb25JbmZvKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbW9kZWwucHJvcGVydGllcykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wID0gbW9kZWwucHJvcGVydGllc1trZXldIGFzIFN3YWdnZXJEZWZpbml0aW9uUHJvcGVydHlJbmZvO1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gYFwiJHtrZXl9XCI6XCIke3Byb3AuZGVzY3JpcHRpb259XCIsLy8ke3Byb3AudHlwZX1cclxuYCAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50cmltKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlbmRlclJlZk1vZGVsKHN3YWdnZXI6IFN3YWdnZXJJbmZvLCBtb2RlbE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCFtb2RlbE5hbWUpXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICBjb25zb2xlLmxvZyhgbW9kZWxOYW1lIOeahOWAvOaYryAke21vZGVsTmFtZX1gKTtcclxuICAgICAgICBtb2RlbE5hbWUgPSBNYXJrRG93bi5nZXRSZWZOYW1lKG1vZGVsTmFtZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOagvOW8j+WMluWQjm1vZGVsTmFtZSDnmoTlgLzmmK8gJHttb2RlbE5hbWV9YCk7XHJcbiAgICAgICAgdmFyIG1vZGVsID0gc3dhZ2dlci5kZWZpbml0aW9uc1ttb2RlbE5hbWVdIGFzIFN3YWdnZXJEZWZpbml0aW9uSW5mbztcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGAtXHQke21vZGVsTmFtZX0gXHJcblxyXG585ZCN56ewfOexu+Wei3zmj4/ov7AgICB8XHJcbnw6LS0tLSAgICB8Oi0tLS0tIHwtLS0tLSAgIHxcclxuJHtNYXJrRG93bi5nZXRNb2RlbE1EVGFibGUobW9kZWwpfSAgXHJcbiAgICBcclxuLVx0JHttb2RlbE5hbWV9XHJcbiAgICBcclxuXFxgXFxgXFxgIFxyXG57XHJcbiAgICAke01hcmtEb3duLmdldE1vZGVsTURKU09OKG1vZGVsKX1cclxufVxyXG5cclxuXFxgXFxgXFxgIFxyXG5gO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBtb2RlbC5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gbW9kZWwucHJvcGVydGllc1trZXldIGFzIFN3YWdnZXJEZWZpbml0aW9uUHJvcGVydHlJbmZvO1xyXG4gICAgICAgICAgICBpZiAocHJvcGVydHkuJHJlZikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IE1hcmtEb3duLnJlbmRlclJlZk1vZGVsKHN3YWdnZXIsIE1hcmtEb3duLmdldFJlZk5hbWUocHJvcGVydHkuJHJlZikpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5Lml0ZW1zICYmIHByb3BlcnR5Lml0ZW1zLiRyZWYpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0eXBlTW9kZWwgPSBwcm9wZXJ0eS5pdGVtcy4kcmVmLnN0YXJ0c1dpdGgoJyMnKSA/IE1hcmtEb3duLmdldFJlZk5hbWUocHJvcGVydHkuaXRlbXMuJHJlZikgOiBwcm9wZXJ0eS5pdGVtcy4kcmVmO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IE1hcmtEb3duLnJlbmRlclJlZk1vZGVsKHN3YWdnZXIsIHR5cGVNb2RlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldFByYW1ldGVyc01ERG9jKHN3YWdnZXI6IFN3YWdnZXJJbmZvLCBwYXJhbWV0ZXJzOiBTd2FnZ2VyUGFyYW1ldGVySW5mb1tdKTogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIHBhcmFtZXRlcnMuZm9yRWFjaCgocCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocC5zY2hlbWEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJhbWV0ZXJNb2RlbE5hbWUgPSBNYXJrRG93bi5nZXRSZWZOYW1lKHAuc2NoZW1hLiRyZWYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlck1vZGVsTmFtZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJNb2RlbE5hbWUgPSBNYXJrRG93bi5nZXRSZWZOYW1lKHAuc2NoZW1hLml0ZW1zLiRyZWYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IE1hcmtEb3duLnJlbmRlclJlZk1vZGVsKHN3YWdnZXIsIHBhcmFtZXRlck1vZGVsTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldFByYW1ldGVyc1Rlc3Qoc3dhZ2dlcjogU3dhZ2dlckluZm8sIHBhcmFtZXRlcnM6IFN3YWdnZXJQYXJhbWV0ZXJJbmZvW10pOiBzdHJpbmcge1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgcGFyYW1ldGVycy5mb3JFYWNoKChwKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwLnNjaGVtYSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtZXRlck1vZGVsTmFtZSA9IE1hcmtEb3duLmdldFJlZk5hbWUocC5zY2hlbWEuJHJlZik7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVyTW9kZWxOYW1lID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlck1vZGVsTmFtZSA9IE1hcmtEb3duLmdldFJlZk5hbWUocC5zY2hlbWEuaXRlbXMuJHJlZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gTWFya0Rvd24ucmVuZGVyUmVmTW9kZWxUZXN0KHN3YWdnZXIsIHBhcmFtZXRlck1vZGVsTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByZW5kZXJSZWZNb2RlbFRlc3Qoc3dhZ2dlcjogU3dhZ2dlckluZm8sIG1vZGVsTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIW1vZGVsTmFtZSlcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBtb2RlbE5hbWUg55qE5YC85pivICR7bW9kZWxOYW1lfWApO1xyXG4gICAgICAgIG1vZGVsTmFtZSA9IE1hcmtEb3duLmdldFJlZk5hbWUobW9kZWxOYW1lKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhg5qC85byP5YyW5ZCObW9kZWxOYW1lIOeahOWAvOaYryAke21vZGVsTmFtZX1gKTtcclxuICAgICAgICB2YXIgbW9kZWwgPSBzd2FnZ2VyLmRlZmluaXRpb25zW21vZGVsTmFtZV0gYXMgU3dhZ2dlckRlZmluaXRpb25JbmZvO1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gYCAgICBcclxue1xyXG4gICAgJHtNYXJrRG93bi5nZXRNb2RlbEpTT05UZXN0KG1vZGVsKX1cclxufVxyXG5cclxuYDtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbW9kZWwucHJvcGVydGllcykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IG1vZGVsLnByb3BlcnRpZXNba2V5XSBhcyBTd2FnZ2VyRGVmaW5pdGlvblByb3BlcnR5SW5mbztcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5LiRyZWYpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBNYXJrRG93bi5yZW5kZXJSZWZNb2RlbFRlc3Qoc3dhZ2dlciwgTWFya0Rvd24uZ2V0UmVmTmFtZShwcm9wZXJ0eS4kcmVmKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkuaXRlbXMgJiYgcHJvcGVydHkuaXRlbXMuJHJlZikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHR5cGVNb2RlbCA9IHByb3BlcnR5Lml0ZW1zLiRyZWYuc3RhcnRzV2l0aCgnIycpID8gTWFya0Rvd24uZ2V0UmVmTmFtZShwcm9wZXJ0eS5pdGVtcy4kcmVmKSA6IHByb3BlcnR5Lml0ZW1zLiRyZWY7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gTWFya0Rvd24ucmVuZGVyUmVmTW9kZWxUZXN0KHN3YWdnZXIsIHR5cGVNb2RlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0TW9kZWxKU09OVGVzdChtb2RlbDogU3dhZ2dlckRlZmluaXRpb25JbmZvKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbW9kZWwucHJvcGVydGllcykge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gYFwiJHtrZXl9XCI6XCJbQ2FzZVN0ZXAuJHtrZXl9XVwiLFxyXG5gICAgIH1cclxuICAgICAgICByZXN1bHQgPSByZXN1bHQudHJpbSgpO1xyXG4gICAgICAgIGlmIChyZXN1bHQuZW5kc1dpdGgoJywnKSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyaW5nKDAsIHJlc3VsdC5sZW5ndGggLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlbmRlclRlc3RSZXN1bHQoc3dhZ2dlcjogU3dhZ2dlckluZm8sIG1vZGVsTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIW1vZGVsTmFtZSlcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBtb2RlbE5hbWUg55qE5YC85pivICR7bW9kZWxOYW1lfWApO1xyXG4gICAgICAgIG1vZGVsTmFtZSA9IE1hcmtEb3duLmdldFJlZk5hbWUobW9kZWxOYW1lKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhg5qC85byP5YyW5ZCObW9kZWxOYW1lIOeahOWAvOaYryAke21vZGVsTmFtZX1gKTtcclxuICAgICAgICB2YXIgbW9kZWwgPSBzd2FnZ2VyLmRlZmluaXRpb25zW21vZGVsTmFtZV0gYXMgU3dhZ2dlckRlZmluaXRpb25JbmZvO1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gYGA7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG1vZGVsLnByb3BlcnRpZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gbW9kZWwucHJvcGVydGllc1trZXldIGFzIFN3YWdnZXJEZWZpbml0aW9uUHJvcGVydHlJbmZvO1xyXG4gICAgICAgICAgICBpZiAocHJvcGVydHkuJHJlZikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGBcclxuJHtrZXl9XHJcbiR7TWFya0Rvd24ucmVuZGVyVGVzdFJlc3VsdChzd2FnZ2VyLCBNYXJrRG93bi5nZXRSZWZOYW1lKHByb3BlcnR5LiRyZWYpKX1cclxuXHJcbmBcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eS5pdGVtcyAmJiBwcm9wZXJ0eS5pdGVtcy4kcmVmKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdHlwZU1vZGVsID0gcHJvcGVydHkuaXRlbXMuJHJlZi5zdGFydHNXaXRoKCcjJykgPyBNYXJrRG93bi5nZXRSZWZOYW1lKHByb3BlcnR5Lml0ZW1zLiRyZWYpIDogcHJvcGVydHkuaXRlbXMuJHJlZjtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBgXHJcbiR7a2V5fVwiXHJcbiR7TWFya0Rvd24ucmVuZGVyVGVzdFJlc3VsdChzd2FnZ2VyLCB0eXBlTW9kZWwpfVxyXG5cclxuYFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5LnR5cGUgPT0gJ2ludGVnZXInIHx8IHByb3BlcnR5LnR5cGUgPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gYFwiJHtrZXl9XCI6W0Nhc2VTdGVwLiR7a2V5fV0j6I635Y+WJHtrZXl95oiQ5YqfLCR7a2V5feS4ultDYXNlU3RlcC4ke2tleX1dXHJcbmBcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGBcIiR7a2V5fVwiOlwiW0Nhc2VTdGVwLiR7a2V5fV1cIiPojrflj5Yke2tleX3miJDlip8sJHtrZXl95Li6W0Nhc2VTdGVwLiR7a2V5fV1cclxuYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50cmltKCk7XHJcbiAgICB9XHJcblxyXG5cclxufSIsIlxyXG5pbXBvcnQgeyBTd2FnZ2VySW5mbywgU3dhZ2dlclBhdGhJbmZvIH0gZnJvbSAnLi9tb2RlbC9Td2FyZ2dlckluZm8nXHJcbmltcG9ydCB7IE1hcmtEb3duIH0gZnJvbSAnLi9NYXJrRG93bic7XHJcbmltcG9ydCB7IE1haW5WaWV3Q29uZmlnIH0gZnJvbSAnLi9NYWluVmlldyc7XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0RG9jKHN3YWdnZXI6IFN3YWdnZXJJbmZvLCBtZXRob2RJbmZvOiBTd2FnZ2VyUGF0aEluZm8sIHJlc3BvbnNlUmVmVHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkLCByZXNwb25zZVNpbXBsZVR5cGU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XHJcblxyXG4gICAgbGV0IG1kVGV4dCA9IGAqKueugOimgeaPj+i/sO+8mioqXHJcbi0gICAke21ldGhvZEluZm8uc3VtbWFyeX1cclxuLSAgICR7bWV0aG9kSW5mby5kZXNjcmlwdGlvbn1cclxuICAgIFxyXG4qKue8luWGmeiAhe+8mioqIFxyXG4tICAgJHttZXRob2RJbmZvLmF1dGhvcn1cclxuICAgIFxyXG4qKuivt+axglVSTO+8mioqIFxyXG4tICBcXGAke21ldGhvZEluZm8ucGF0aH1cXGBcclxuICAgIFxyXG4gICAgXHJcbioq6K+35rGC5pa55byP77yaKipcclxuLSAke21ldGhvZEluZm8ubWV0aG9kfVxyXG4gICAgXHJcbioq6L+U5Zue5pWw5o2u55qE57G75Z6L5Lul5Y+K57yW56CBKFByb2R1Y2VzKSoqXHJcbi0gJHttZXRob2RJbmZvLnByb2R1Y2VzfVxyXG4gICAgXHJcbioq5Y+C5pWw77yaKiogXHJcblxyXG4keyhtZXRob2RJbmZvLnBhcmFtZXRlcnMgPT0gbnVsbCB8fCBtZXRob2RJbmZvLnBhcmFtZXRlcnMubGVuZ3RoID09IDApID9cclxuICAgICAgICAgICAgYOaXoGAgOlxyXG4gICAgICAgICAgICBgfOWQjeensHzmj4/ov7B85Y+C5pWw57G75YirfOS8oOWPguaWueW8j3zpu5jorqTlgLwgICB85piv5ZCm5b+F6aG7ICAgfFxyXG58Oi0tLS0gICAgfDotLS18Oi0tLS0tIHwtLS0tLSAgIHwtLS0tLSAgIHwtLS0tLSAgIHxgXHJcbiAgICAgICAgfSAgICBcclxuJHtNYXJrRG93bi5nZXRQYXJhbWV0ZXJGb3JNRChtZXRob2RJbmZvLnBhcmFtZXRlcnMpfVxyXG4gICAgXHJcbioqcmVxdWVzdEJvZHkg5Y+C5pWw6K+05piO77yaKipcclxuJHtNYXJrRG93bi5nZXRQcmFtZXRlcnNNRERvYyhzd2FnZ2VyLCBtZXRob2RJbmZvLnBhcmFtZXRlcnMpfVxyXG4gICAgXHJcbioq6L+U5Zue56S65L6LKipcclxuJHsgIHJlc3BvbnNlU2ltcGxlVHlwZSA9PSB1bmRlZmluZWQgPyAnJyA6IHJlc3BvbnNlU2ltcGxlVHlwZX1cclxuJHsgIHJlc3BvbnNlUmVmVHlwZSA9PSB1bmRlZmluZWQgPyAnJyA6IE1hcmtEb3duLnJlbmRlclJlZk1vZGVsKHN3YWdnZXIsIHJlc3BvbnNlUmVmVHlwZSBhcyBzdHJpbmcpfVxyXG5gO1xyXG5cclxuICAgIHJldHVybiBtZFRleHQ7XHJcbn1cclxuXHJcbnZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKTtcclxuXHJcbmNvbnN0IEFwaVRyZWVWaWV3OiBFeHQudHJlZS5QYW5lbENvbmZpZyA9IHtcclxuICAgIHh0eXBlOiBcInRyZWVwYW5lbFwiLFxyXG4gICAgdGl0bGU6ICfpobnnm67mnI3liqHliJfooagnLFxyXG4gICAgd2lkdGg6IDUwMCxcclxuICAgIHN0b3JlOiB7XHJcbiAgICAgICAgcm9vdDoge1xyXG4gICAgICAgICAgICBleHBhbmRlZDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgIH0gYXMgRXh0LmRhdGEuVHJlZVN0b3JlQ29uZmlnLFxyXG4gICAgcm9vdFZpc2libGU6IGZhbHNlLFxyXG4gICAgc3BsaXQ6IHRydWUsXHJcbiAgICByZWdpb246IFwid2VzdFwiLFxyXG4gICAgbGlzdGVuZXJzOiB7XHJcbiAgICAgICAgaXRlbWNsaWNrKHZpZXc6IEV4dC52aWV3LlZpZXcsIG5vZGU6IEV4dC5kYXRhLlRyZWVNb2RlbCB8IEV4dC5kYXRhLk5vZGVJbnRlcmZhY2UpIHtcclxuICAgICAgICAgICAgY29uc3QgbWV0aG9kTm9kZSA9IG5vZGUgYXMgRXh0LmRhdGEuVHJlZU1vZGVsO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlSW50ZXJmYWNlID0gbm9kZSBhcyBFeHQuZGF0YS5Ob2RlSW50ZXJmYWNlO1xyXG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlTm9kZSA9IG5vZGVJbnRlcmZhY2UucGFyZW50Tm9kZSBhcyBFeHQuZGF0YS5UcmVlTW9kZWw7XHJcbiAgICAgICAgICAgIGNvbnN0IHN3YWdnZXIgPSBzZXJ2aWNlTm9kZS5nZXQoJ3N3YWdnZXInKSBhcyBTd2FnZ2VySW5mbztcclxuICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBtZXRob2ROb2RlLmdldCgnY2F0ZWdvcnknKSBhcyB1bmtub3duIGFzIHN0cmluZztcclxuXHJcbiAgICAgICAgICAgIGlmIChjYXRlZ29yeSAhPT0gXCJtZXRob2RcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZEluZm8gPSBtZXRob2ROb2RlLmdldCgnaW5mbycpIGFzIFN3YWdnZXJQYXRoSW5mbztcclxuICAgICAgICAgICAgbGV0IHJlc3BvbnNlUmVmVHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBsZXQgcmVzcG9uc2VTaW1wbGVUeXBlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmIChtZXRob2RJbmZvLnJlc3BvbnNlc1snMjAwJ10pIHtcclxuICAgICAgICAgICAgICAgIGlmIChtZXRob2RJbmZvLnJlc3BvbnNlc1snMjAwJ10uc2NoZW1hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZEluZm8ucmVzcG9uc2VzWycyMDAnXS5zY2hlbWEudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVNpbXBsZVR5cGUgPSBtZXRob2RJbmZvLnJlc3BvbnNlc1snMjAwJ10uc2NoZW1hLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZEluZm8ucmVzcG9uc2VzWycyMDAnXS5zY2hlbWEuJHJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVJlZlR5cGUgPSBtZXRob2RJbmZvLnJlc3BvbnNlc1snMjAwJ10uc2NoZW1hLiRyZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgbWUgPSB0aGlzIGFzIHVua25vd24gYXMgRXh0LnRyZWUuUGFuZWw7XHJcbiAgICAgICAgICAgIGxldCBtYWluVmlldyA9IG1lLnVwKCdbcmVmZXJlbmNlPWFwaUNvbnRhaW5lcl0nKSBhcyB1bmtub3duIGFzIE1haW5WaWV3Q29uZmlnO1xyXG4gICAgICAgICAgICBsZXQgbWFya0Rvd25Eb2MgPSBnZXREb2Moc3dhZ2dlciwgbWV0aG9kSW5mbywgcmVzcG9uc2VSZWZUeXBlLCByZXNwb25zZVNpbXBsZVR5cGUpO1xyXG4gICAgICAgICAgICBsZXQgcmVxdWVzdEhlYWRlciA9ICcnO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1ldGhvZEluZm8ubWV0aG9kICE9IFwiZ2V0XCIpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RIZWFkZXIgKz0gJ1wiQ29udGVudC1UeXBlXCI6XCJhcHBsaWNhdGlvbi9qc29uXCInO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyICs9IGBcclxuXCJBdXRob3JpemF0aW9uXCI6XCJCZWFyZXIgW3Rva2VuXzFdXCJcclxuXCJqbVwiOlwiW0Nhc2VTdGVwLmptXVwiXHJcblwiTXNnaWRcIjoyODg1NzJgO1xyXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyID0gcmVxdWVzdEhlYWRlci50cmltKCk7XHJcblxyXG4gICAgICAgICAgICBtYWluVmlldy5zZXREb2NEYXRhKHtcclxuICAgICAgICAgICAgICAgIG1hcmtEb3duRG9jOiBtYXJrRG93bkRvYyxcclxuICAgICAgICAgICAgICAgIGh0bWxEb2M6IG1kLnJlbmRlcihtYXJrRG93bkRvYyksXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0QXJndW1lbnRzOiBNYXJrRG93bi5nZXRQcmFtZXRlcnNUZXN0KHN3YWdnZXIsIG1ldGhvZEluZm8ucGFyYW1ldGVycyksXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiBtZXRob2RJbmZvLm1ldGhvZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RIZWFkZXI6IHJlcXVlc3RIZWFkZXIsXHJcbiAgICAgICAgICAgICAgICB1cmw6IG1ldGhvZEluZm8ucGF0aCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RSZXN1bHQ6IHJlc3BvbnNlUmVmVHlwZSA/IE1hcmtEb3duLnJlbmRlclRlc3RSZXN1bHQoc3dhZ2dlciwgcmVzcG9uc2VSZWZUeXBlIGFzIHN0cmluZykgOiAnJ1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGJveHJlYWR5OiAodHJlZTogRXh0LnRyZWUuUGFuZWwpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJvb3QgPSB0cmVlLmdldFJvb3ROb2RlKCkgYXMgRXh0LmRhdGEuTm9kZUludGVyZmFjZTtcclxuICAgICAgICAgICAgRXh0LkFqYXgucmVxdWVzdCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvZXVyZWthL3RyZWUnXHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnksIG9wdHM6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IEV4dC5kZWNvZGUocmVzcG9uc2UucmVzcG9uc2VUZXh0KSBhcyBvYmplY3RbXTtcclxuICAgICAgICAgICAgICAgIG9iai5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5hcHBlbmRDaGlsZChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXNwb25zZTogYW55LCBvcHRzOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2VydmVyLXNpZGUgZmFpbHVyZSB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBiZWZvcmVpdGVtZXhwYW5kOiBmdW5jdGlvbiAobm9kZTogRXh0LmRhdGEuVHJlZU1vZGVsIHwgRXh0LmRhdGEuTm9kZUludGVyZmFjZSwgZU9wdHM6IGFueSkge1xyXG4gICAgICAgICAgICBsZXQgbWUgPSB0aGlzIGFzIEV4dC50cmVlLlBhbmVsO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1vZGVsID0gbm9kZSBhcyBFeHQuZGF0YS5UcmVlTW9kZWw7XHJcbiAgICAgICAgICAgIGlmIChtb2RlbC5nZXQoXCJsb2FkZWRcIikgYXMgdW5rbm93biBhcyBib29sZWFuID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IG5vZGVJbnRlcmZhY2UgPSBub2RlIGFzIEV4dC5kYXRhLk5vZGVJbnRlcmZhY2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gbW9kZWwuZ2V0KCdjYXRlZ29yeScpIGFzIHVua25vd24gYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT0gJ3NlcnZpY2UnKSB7XHJcbiAgICAgICAgICAgICAgICBtZS5nZXRFbCgpLm1hc2soXCLmraPlnKjliqDovb3mlbDmja5cIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdXJsOiBzdHJpbmcgPSBcIi9zd2FnZ2VyLmRvYz91cmw9XCIgKyAobW9kZWwuZ2V0KFwibm9kZVVybFwiKSBhcyB1bmtub3duIGFzIHN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICBFeHQuQWpheC5yZXF1ZXN0KHsgdXJsOiB1cmwgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2U6IGFueSwgb3B0czogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN3YWdnZXIgPSBFeHQuZGVjb2RlKHJlc3BvbnNlLnJlc3BvbnNlVGV4dCkgYXMgU3dhZ2dlckluZm87XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0KCdzd2FnZ2VyJywgc3dhZ2dlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0KFwibG9hZGVkXCIsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGROb2RlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGF0aCBpbiBzd2FnZ2VyLnBhdGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RPYmogPSBzd2FnZ2VyLnBhdGhzW3BhdGhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RNZXRob2QgaW4gcmVxdWVzdE9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdFZhbHVlID0gcmVxdWVzdE9ialtyZXF1ZXN0TWV0aG9kXSBhcyBTd2FnZ2VyUGF0aEluZm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VmFsdWUucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VmFsdWUubWV0aG9kID0gcmVxdWVzdE1ldGhvZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVhZjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiByZXF1ZXN0VmFsdWUucGF0aCArICdfJyArIHJlcXVlc3RNZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6ICdtZXRob2QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm86IHJlcXVlc3RWYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS50ZXh0ID09IGIudGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEudGV4dCA8IGIudGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJbnRlcmZhY2UuYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lLmdldEVsKCkudW5tYXNrKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSwgb3B0czogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZXJ2ZXItc2lkZSBmYWlsdXJlIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEFwaVRyZWVWaWV3IH0iLCJpbXBvcnQgTm9ydGhQYW5lbCBmcm9tIFwiLi9Ob3J0aFBhbmVsXCI7XHJcbmltcG9ydCB7IE1haW4gYXMgU291dGhQYW5lbCB9IGZyb20gJy4vU291dGhQYW5lbC9NYWluJztcclxuXHJcbmltcG9ydCB7IE1haW5WaWV3IGFzIGFwaVZpZXcgfSBmcm9tICcuL1N3YWdnZXIvTWFpblZpZXcnXHJcblxyXG5jb25zdCBlYXN0UGFuZWw6IEV4dC5wYW5lbC5QYW5lbENvbmZpZyA9IHtcclxuICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxyXG4gICAgcmVnaW9uOiBcImVhc3RcIixcclxuICAgIHNwbGl0OiB0cnVlLFxyXG4gICAgdGl0bGU6ICdFYXN0IFBhbmVsJyxcclxuICAgIGhpZGRlbjogdHJ1ZSxcclxuICAgIHdpZHRoOiAxNTAsXHJcbiAgICB4dHlwZTogXCJwYW5lbFwiXHJcbn07XHJcblxyXG5cclxuXHJcbmNvbnN0IHNwYWNlID0gKGxlbmd0aDogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCBjaGFyQXJyYXk6IHN0cmluZ1tdID0gW107XHJcbiAgICBsZXQgaTogbnVtYmVyO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY2hhckFycmF5LnB1c2goXCIgXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoYXJBcnJheS5qb2luKFwiXCIpO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0UmVtb3ZlV2hpdGVTcGFjZSA9IChvbGRWYWx1ZTogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICAgIG9sZFZhbHVlID0gb2xkVmFsdWUuc3BsaXQoXCJcXG5cIikuam9pbihcIiBcIik7XHJcbiAgICB2YXIgY2hhckFycmF5OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgdmFyIGNvbnZlcnRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHZhciBjb252ZXJ0Q2hhcjogc3RyaW5nID0gJyc7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2xkVmFsdWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgY2hhclZhbHVlOiBzdHJpbmcgPSBvbGRWYWx1ZS5jaGFyQXQoaSk7XHJcbiAgICAgICAgaWYgKGNvbnZlcnRpbmcgJiYgY2hhclZhbHVlID09PSBjb252ZXJ0Q2hhcikge1xyXG4gICAgICAgICAgICBpZiAob2xkVmFsdWUuY2hhckF0KGkgLSAxKSAhPT0gXCJcXFxcXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRDaGFyID0gJyc7XHJcbiAgICAgICAgICAgICAgICBjaGFyVmFsdWUgPSBcIlxcXFxcIiArIChjaGFyVmFsdWUgPT09IFwiXFwnXCIgPyBcIlxcXCJcIiA6IGNoYXJWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIWNvbnZlcnRpbmcgJiYgKGNoYXJWYWx1ZSA9PT0gXCJcXFwiXCIgfHwgY2hhclZhbHVlID09PSBcIlxcJ1wiKSkge1xyXG4gICAgICAgICAgICAgICAgY29udmVydGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0Q2hhciA9IGNoYXJWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGNoYXJWYWx1ZSA9IFwiXFxcXFxcXCJcIjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghY29udmVydGluZyAmJiAoY2hhclZhbHVlID09PSBcIiBcIiB8fCBjaGFyVmFsdWUgPT09IFwiXHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyVmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoYXJBcnJheS5wdXNoKGNoYXJWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2hhckFycmF5LmpvaW4oXCJcIik7XHJcbn07XHJcblxyXG5jb25zdCByZW1vdmVaaHVhbnlpID0gKG9sZFZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgIHJldHVybiBvbGRWYWx1ZS5yZXBsYWNlKC9cXFxcXFxcXC9nLCBcIlxcXFxcIikucmVwbGFjZSgvXFxcXFxcXCIvZywgXCJcXFwiXCIpO1xyXG59XHJcblxyXG4vLyBodHRwOi8vd3d3LmJlanNvbi5jb20vanNvbnZpZXdlcm5ldy9cclxuY29uc3QganNvblBhbmVsOiBFeHQucGFuZWwuUGFuZWxDb25maWcgPSB7XHJcbiAgICBsYXlvdXQ6IFwiZml0XCIsXHJcbiAgICB0aXRsZTogJ0pTT07lpITnkIYnLFxyXG4gICAgeHR5cGU6ICdwYW5lbCcsXHJcbiAgICB0YmFyOiB7XHJcbiAgICAgICAgaXRlbXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogJ+eymOi0tCcsIHh0eXBlOiBcImJ1dHRvblwiLCBoYW5kbGVyOiAoYnRuOiBFeHQuYnV0dG9uLkJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaWVyID0gYnRuLnVwKFwicGFuZWxcIikgYXMgRXh0LmNvbnRhaW5lci5Db250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dGFyZWEgPSBjb250YWllci5kb3duKFwidGV4dGFyZWFcIikgYXMgRXh0LmZvcm0uZmllbGQuVGV4dEFyZWE7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0RWw6IEV4dC5kb20uRWxlbWVudCA9IHRleHRhcmVhLmlucHV0RWwgYXMgRXh0LmRvbS5FbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRFbCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRFbERvbTogSFRNTElucHV0RWxlbWVudCA9IGlucHV0RWwuZG9tIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RWxEb20uZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRFbERvbS5zZWxlY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJwYXN0ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gYXMgRXh0LmJ1dHRvbi5CdXR0b25Db25maWcsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6ICflpI3liLYnLCB4dHlwZTogXCJidXR0b25cIiwgaGFuZGxlcjogKGJ0bjogRXh0LmJ1dHRvbi5CdXR0b24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWllciA9IGJ0bi51cChcInBhbmVsXCIpIGFzIEV4dC5jb250YWluZXIuQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRhcmVhID0gY29udGFpZXIuZG93bihcInRleHRhcmVhXCIpIGFzIEV4dC5mb3JtLmZpZWxkLlRleHRBcmVhO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGV4dGFyZWEuZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0RWw6IEV4dC5kb20uRWxlbWVudCA9IHRleHRhcmVhLmlucHV0RWwgYXMgRXh0LmRvbS5FbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRFbCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRFbERvbTogSFRNTElucHV0RWxlbWVudCA9IGlucHV0RWwuZG9tIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RWxEb20uZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRFbERvbS5zZWxlY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBhcyBFeHQuYnV0dG9uLkJ1dHRvbkNvbmZpZyxcclxuICAgICAgICAgICAgeyB4dHlwZTogXCJ0YnNlcGFyYXRvclwiIH0gYXMgRXh0LnRvb2xiYXIuU2VwYXJhdG9yQ29uZmlnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB4dHlwZTogXCJidXR0b25cIiwgdGV4dDogJ+agvOW8j+WMlicsIGhhbmRsZXI6IChidG46IEV4dC5idXR0b24uQnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpZXIgPSBidG4udXAoXCJwYW5lbFwiKSBhcyBFeHQuY29udGFpbmVyLkNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IGNvbnRhaWVyLmRvd24oXCJ0ZXh0YXJlYVwiKSBhcyBFeHQuZm9ybS5maWVsZC5UZXh0QXJlYTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRleHRhcmVhLmdldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWVMZW4gPSBvbGRWYWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWVBcnJheTogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BhY2VDb3VudDogbnVtYmVyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcXVvdGF0aW9uTWFya3M6IGFueSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2xkVmFsdWVMZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudENoYXIgPSBvbGRWYWx1ZS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdW90YXRpb25NYXJrcyAmJiBjdXJyZW50Q2hhciA9PT0gcXVvdGF0aW9uTWFya3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZS5jaGFyQXQoaSAtIDEpICE9PSBcIlxcXFxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RhdGlvbk1hcmtzID0gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcXVvdGF0aW9uTWFya3MgJiYgKGN1cnJlbnRDaGFyID09PSBcIlxcXCJcIiB8fCBjdXJyZW50Q2hhciA9PT0gXCInXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGF0aW9uTWFya3MgPSBjdXJyZW50Q2hhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXF1b3RhdGlvbk1hcmtzICYmIChjdXJyZW50Q2hhciA9PT0gXCIgXCIgfHwgY3VycmVudENoYXIgPT09IFwiXHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENoYXIgPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFxdW90YXRpb25NYXJrcyAmJiBjdXJyZW50Q2hhciA9PT0gXCI6XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaGFyICs9IFwiIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXF1b3RhdGlvbk1hcmtzICYmIGN1cnJlbnRDaGFyID09PSBcIixcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaGFyICs9IFwiXFxuXCIgKyBzcGFjZShzcGFjZUNvdW50ICogMilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFxdW90YXRpb25NYXJrcyAmJiAoY3VycmVudENoYXIgPT09IFwiW1wiIHx8IGN1cnJlbnRDaGFyID09PSBcIntcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2hhciArPSBcIlxcblwiICsgc3BhY2Uoc3BhY2VDb3VudCAqIDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFxdW90YXRpb25NYXJrcyAmJiAoY3VycmVudENoYXIgPT09IFwiXVwiIHx8IGN1cnJlbnRDaGFyID09PSBcIn1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQ291bnQtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaGFyID0gXCJcXG5cIiArIHNwYWNlKHNwYWNlQ291bnQgKiAyKSArIGN1cnJlbnRDaGFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVBcnJheS5wdXNoKGN1cnJlbnRDaGFyKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5zZXRWYWx1ZShuZXdWYWx1ZUFycmF5LmpvaW4oXCJcIikpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gYXMgRXh0LmJ1dHRvbi5CdXR0b25Db25maWcsXHJcbiAgICAgICAgICAgIHsgeHR5cGU6IFwidGJzZXBhcmF0b3JcIiB9IGFzIEV4dC50b29sYmFyLlNlcGFyYXRvckNvbmZpZyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogJ+WIoOmZpOepuuagvCcsXHJcbiAgICAgICAgICAgICAgICB4dHlwZTogXCJidXR0b25cIiwgaGFuZGxlcjogKGJ0bjogRXh0LmJ1dHRvbi5CdXR0b24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWllciA9IGJ0bi51cChcInBhbmVsXCIpIGFzIEV4dC5jb250YWluZXIuQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRhcmVhID0gY29udGFpZXIuZG93bihcInRleHRhcmVhXCIpIGFzIEV4dC5mb3JtLmZpZWxkLlRleHRBcmVhO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGV4dGFyZWEuZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGRWYWx1ZUxlbiA9IG9sZFZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZUFycmF5OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBxdW90YXRpb25NYXJrczogYW55ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGRWYWx1ZUxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q2hhciA9IG9sZFZhbHVlLmNoYXJBdChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1b3RhdGlvbk1hcmtzICYmIGN1cnJlbnRDaGFyID09PSBxdW90YXRpb25NYXJrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlLmNoYXJBdChpIC0gMSkgIT09IFwiXFxcXFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGF0aW9uTWFya3MgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFxdW90YXRpb25NYXJrcyAmJiAoY3VycmVudENoYXIgPT09ICdcIicgfHwgY3VycmVudENoYXIgPT09IFwiJ1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RhdGlvbk1hcmtzID0gY3VycmVudENoYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFxdW90YXRpb25NYXJrcyAmJiAoY3VycmVudENoYXIgPT09IFwiIFwiIHx8IGN1cnJlbnRDaGFyID09PSBcIlxcblwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2hhciA9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVBcnJheS5wdXNoKGN1cnJlbnRDaGFyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEuc2V0VmFsdWUobmV3VmFsdWVBcnJheS5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBhcyBFeHQuYnV0dG9uLkJ1dHRvbkNvbmZpZyxcclxuICAgICAgICAgICAgeyB4dHlwZTogXCJ0YnNlcGFyYXRvclwiIH0gYXMgRXh0LnRvb2xiYXIuU2VwYXJhdG9yQ29uZmlnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB4dHlwZTogXCJidXR0b25cIiwgdGV4dDogJ+WIoOmZpOepuuagvOW5tui9rOS5iScsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoYnRuOiBFeHQuYnV0dG9uLkJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaWVyID0gYnRuLnVwKFwicGFuZWxcIikgYXMgRXh0LmNvbnRhaW5lci5Db250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dGFyZWEgPSBjb250YWllci5kb3duKFwidGV4dGFyZWFcIikgYXMgRXh0LmZvcm0uZmllbGQuVGV4dEFyZWE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWU6IHN0cmluZyA9IGdldFJlbW92ZVdoaXRlU3BhY2UodGV4dGFyZWEuZ2V0VmFsdWUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEuc2V0VmFsdWUobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGFzIEV4dC5idXR0b24uQnV0dG9uQ29uZmlnLFxyXG4gICAgICAgICAgICB7IHh0eXBlOiBcInRic2VwYXJhdG9yXCIgfSBhcyBFeHQudG9vbGJhci5TZXBhcmF0b3JDb25maWcsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6ICfljrvpmaTovazkuYknLCB4dHlwZTogXCJidXR0b25cIiwgaGFuZGxlcjogKGJ0bjogRXh0LmJ1dHRvbi5CdXR0b24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWllciA9IGJ0bi51cChcInBhbmVsXCIpIGFzIEV4dC5jb250YWluZXIuQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRhcmVhID0gY29udGFpZXIuZG93bihcInRleHRhcmVhXCIpIGFzIEV4dC5mb3JtLmZpZWxkLlRleHRBcmVhO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlOiBzdHJpbmcgPSByZW1vdmVaaHVhbnlpKHRleHRhcmVhLmdldFZhbHVlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnNldFZhbHVlKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBhcyBFeHQuYnV0dG9uLkJ1dHRvbkNvbmZpZ1xyXG4gICAgICAgIF1cclxuICAgIH0gYXMgRXh0LnRvb2xiYXIuVG9vbGJhckNvbmZpZyxcclxuICAgIGl0ZW1zOiB7XHJcbiAgICAgICAgeHR5cGU6IFwidGV4dGFyZWFcIixcclxuICAgICAgICBib3JkZXI6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlOiAne1wibmFtZVwiOlwidGVzdFwifSdcclxuICAgIH0gYXMgRXh0LmZvcm0uZmllbGQuVGV4dEFyZWFDb25maWdcclxufTtcclxuXHJcbmNvbnN0IGNlbnRlclBhbmVsOiBFeHQudGFiLlBhbmVsQ29uZmlnID0ge1xyXG4gICAgYWN0aXZlVGFiOiAwLFxyXG4gICAgaXRlbXM6IFthcGlWaWV3LCBqc29uUGFuZWxdLFxyXG4gICAgcmVnaW9uOiBcImNlbnRlclwiLFxyXG4gICAgeHR5cGU6ICd0YWJwYW5lbCdcclxufTtcclxuXHJcblxyXG5cclxuY29uc3QgTWFpblZpZXc6IEV4dC5jb250YWluZXIuVmlld3BvcnRDb25maWcgPSB7XHJcbiAgICB4dHlwZTogXCJ2aWV3cG9ydFwiLFxyXG4gICAgbGF5b3V0OiBcImJvcmRlclwiLFxyXG4gICAgaXRlbXM6IFtcclxuICAgICAgICBOb3J0aFBhbmVsLCBTb3V0aFBhbmVsLCBjZW50ZXJQYW5lbCwgZWFzdFBhbmVsXHJcbiAgICBdXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBNYWluVmlldzsiLCJcclxuXHJcbiBjb25zdCBNYWluOiBFeHQucGFuZWwuUGFuZWxDb25maWcgPSB7XHJcbiAgICAgICAgY29sbGFwc2libGU6IHRydWUsXHJcbiAgICAgICAgaGVpZ2h0OiAxMDAsXHJcbiAgICAgICAgaHRtbDogJ0luZm9ybWF0aW9uIGdvZXMgaGVyZScsXHJcbiAgICAgICAgbWluSGVpZ2h0OiAxMDAsXHJcbiAgICAgICAgcmVnaW9uOiBcInNvdXRoXCIsXHJcbiAgICAgICAgc3BsaXQ6IHRydWUsXHJcbiAgICAgICAgaGlkZGVuOnRydWUsXHJcbiAgICAgICAgdGl0bGU6ICdTb3V0aCBQYW5lbCcsXHJcbiAgICAgICAgeHR5cGU6IFwicGFuZWxcIlxyXG4gICAgfTtcclxuZXhwb3J0IHtNYWlufSAgO1xyXG5cclxuIiwiaW1wb3J0IHsgQXBpVHJlZVZpZXcgfSBmcm9tICcuL0FwaVRyZWVWaWV3JztcclxuXHJcbmludGVyZmFjZSBNYWluVmlld0RhdGEge1xyXG4gICAgbWFya0Rvd25Eb2M6IHN0cmluZztcclxuICAgIGh0bWxEb2M6IHN0cmluZztcclxuICAgIHVybD86IHN0cmluZyxcclxuICAgIHJlcXVlc3RIZWFkZXI/OiBzdHJpbmcsXHJcbiAgICByZXF1ZXN0TWV0aG9kPzogc3RyaW5nLFxyXG4gICAgcmVxdWVzdEFyZ3VtZW50cz86IHN0cmluZyxcclxuICAgIHJlcXVlc3RSZXN1bHQ/OiBzdHJpbmdcclxufVxyXG5pbnRlcmZhY2UgTWFpblZpZXdDb25maWcgZXh0ZW5kcyBFeHQucGFuZWwuUGFuZWxDb25maWcge1xyXG4gICAgc2V0RG9jRGF0YShkYXRhOiBNYWluVmlld0RhdGEpOiB2b2lkO1xyXG59XHJcbmNvbnN0IE1haW5WaWV3ID0ge1xyXG4gICAgbGF5b3V0OiBcImJvcmRlclwiLFxyXG4gICAgdGl0bGU6ICdBUEnnrqHnkIYnLFxyXG4gICAgeHR5cGU6ICdwYW5lbCcsXHJcbiAgICByZWZlcmVuY2U6ICdhcGlDb250YWluZXInLFxyXG4gICAgaXRlbXM6IFtcclxuICAgICAgICBBcGlUcmVlVmlldyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHh0eXBlOiBcInRhYnBhbmVsXCIsXHJcbiAgICAgICAgICAgIHJlZ2lvbjogXCJjZW50ZXJcIixcclxuICAgICAgICAgICAgaXRlbXM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB4dHlwZTogXCJodG1sZWRpdG9yXCIsIHRpdGxlOiBcIlNob3dEb2PmlofmoaNcIiwgcmVhZE9ubHk6IHRydWUsIHJlZmVyZW5jZTogJ21hcmtkb3duRG9jJywgaWZyYW1lQXR0clRwbDogJ3N0eWxlPVwiZm9udC1zaXplOjUwcHggIWltcG9ydGFudDtcIicsIGdldERvY01hcmt1cDogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZzogbnVtYmVyID0gMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0OiBudW1iZXIgPSA4NDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjojMzMzMzMzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICM2NjY2NjY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlIHRoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci13aWR0aDogMXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogOHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogIzY2NjY2NjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZWRlZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUgdGQge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjNjY2NjY2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmUge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7IGJhY2tncm91bmQtY29sb3I6IHJnYigyNTIsIDI1MiwgMjUyKTsgYm9yZGVyOiAxcHggc29saWQgcmdiKDIyNSwgMjI1LCAyMzIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZSBjb2Rle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IzA4MCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOjE2cHggIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogXCJNaWNyb3NvZnQgWWFIZWlcIiwgSGVsdmV0aWNhLCBcIk1laXJ5byBVSVwiLCBcIk1hbGd1biBHb3RoaWNcIiwgXCJTZWdvZSBVSVwiLCBcIlRyZWJ1Y2hldCBNU1wiLCBNb25hY28sIG1vbm9zcGFjZSwgVGFob21hLCBTVFhpaGVpLCDljY7mlofnu4bpu5EsIFNUSGVpdGksIFwiSGVsdmV0aWNhIE5ldWVcIiwgXCJEcm9pZCBTYW5zXCIsIFwid2VucXVhbnlpIG1pY3JvIGhlaVwiLCBGcmVlU2FucywgQXJpbW8sIEFyaWFsLCBTaW1TdW4sIOWui+S9kywgSGVpdGksIOm7keS9kywgc2Fucy1zZXJpZiAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkeyhFeHQuaXNPcGVyYSB8fCBFeHQuaXNJRSA/ICdwe21hcmdpbjowO30nIDogJycpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOjE2cHggIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogXCJNaWNyb3NvZnQgWWFIZWlcIiwgSGVsdmV0aWNhLCBcIk1laXJ5byBVSVwiLCBcIk1hbGd1biBHb3RoaWNcIiwgXCJTZWdvZSBVSVwiLCBcIlRyZWJ1Y2hldCBNU1wiLCBNb25hY28sIG1vbm9zcGFjZSwgVGFob21hLCBTVFhpaGVpLCDljY7mlofnu4bpu5EsIFNUSGVpdGksIFwiSGVsdmV0aWNhIE5ldWVcIiwgXCJEcm9pZCBTYW5zXCIsIFwid2VucXVhbnlpIG1pY3JvIGhlaVwiLCBGcmVlU2FucywgQXJpbW8sIEFyaWFsLCBTaW1TdW4sIOWui+S9kywgSGVpdGksIOm7keS9kywgc2Fucy1zZXJpZiAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjowO21hcmdpbjowO3BhZGRpbmc6JHtwYWRkaW5nfXB4O2RpcmVjdGlvbjpsdHI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHsoRXh0LmlzSUU4ID8gRXh0LmVtcHR5U3RyaW5nIDogJ21pbi0nKX1oZWlnaHQ6JHtoZWlnaHR9cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94Oy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2N1cnNvcjp0ZXh0O2JhY2tncm91bmQtY29sb3I6d2hpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3R5bGU+PC9oZWFkPjxib2R5PjwvYm9keT48L2h0bWw+YDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0gYXMgRXh0LmZvcm0uZmllbGQuSHRtbEVkaXRvckNvbmZpZyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB4dHlwZTogXCJwYW5lbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIuaOpeWPo+a1i+ivleaWh+aho1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxheW91dDogJ2Zvcm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9TY3JvbGw6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yOiAnOTUlJyxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0czogeyByZWFkT25seTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgeHR5cGU6IFwidGV4dGZpZWxkXCIsIGZpZWxkTGFiZWw6ICd1cmwnLCByZWZlcmVuY2U6ICd0ZXN0VXJsJyB9IGFzIEV4dC5mb3JtLmZpZWxkLlRleHRDb25maWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgeHR5cGU6IFwidGV4dGFyZWFcIiwgZmllbGRMYWJlbDogJ+ivt+axguWktCcsIHJlZmVyZW5jZTogJ3Rlc3RIZWFkZXInLCBncm93OiB0cnVlIH0gYXMgRXh0LmZvcm0uZmllbGQuVGV4dEFyZWFDb25maWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgeHR5cGU6IFwidGV4dGZpZWxkXCIsIGZpZWxkTGFiZWw6ICfmlrnms5UnLCByZWZlcmVuY2U6ICd0ZXN0TWV0aG9kJyB9IGFzIEV4dC5mb3JtLmZpZWxkLlRleHRDb25maWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgeHR5cGU6IFwidGV4dGFyZWFcIiwgZmllbGRMYWJlbDogJ+WFpeWPgicsIHJlZmVyZW5jZTogJ3Rlc3RQYXJhbWV0ZXInLCBncm93OiB0cnVlIH0gYXMgRXh0LmZvcm0uZmllbGQuVGV4dEFyZWFDb25maWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgeHR5cGU6IFwidGV4dGFyZWFcIiwgZmllbGRMYWJlbDogJ+WHuuWPguaWreiogCcsIHJlZmVyZW5jZTogJ3Rlc3RSZXN1bHQnLCBncm93OiB0cnVlIH0gYXMgRXh0LmZvcm0uZmllbGQuVGV4dEFyZWFDb25maWdcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9IGFzIEV4dC5wYW5lbC5QYW5lbENvbmZpZ1xyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSBhcyBFeHQudGFiLlBhbmVsQ29uZmlnXHJcbiAgICBdLFxyXG4gICAgc2V0RG9jRGF0YShkYXRhOiBNYWluVmlld0RhdGEpIHtcclxuICAgICAgICBsZXQgbWUgPSB0aGlzIGFzIHVua25vd24gYXMgRXh0LnBhbmVsLlBhbmVsO1xyXG5cclxuICAgICAgICAvL21lLmxvb2t1cFJlZmVyZW5jZSgnbWFya2Rvd25Eb2MnKeS4uuS7gOS5iOS4jeiDveeUqCAgICBcclxuICAgICAgICBsZXQgbWFya2Rvd25Eb2MgPSBtZS5kb3duKCdbcmVmZXJlbmNlPW1hcmtkb3duRG9jXScpIGFzIEV4dC5mb3JtLmZpZWxkLlRleHQ7XHJcbiAgICAgICAgbGV0IHRlc3RVcmwgPSBtZS5kb3duKCdbcmVmZXJlbmNlPXRlc3RVcmxdJykgYXMgRXh0LmZvcm0uZmllbGQuVGV4dDtcclxuICAgICAgICBsZXQgdGVzdEhlYWRlciA9IG1lLmRvd24oJ1tyZWZlcmVuY2U9dGVzdEhlYWRlcl0nKSBhcyBFeHQuZm9ybS5maWVsZC5UZXh0QXJlYTtcclxuICAgICAgICBsZXQgdGVzdE1ldGhvZCA9IG1lLmRvd24oJ1tyZWZlcmVuY2U9dGVzdE1ldGhvZF0nKSBhcyBFeHQuZm9ybS5maWVsZC5UZXh0O1xyXG4gICAgICAgIGxldCB0ZXN0UGFyYW1ldGVyID0gbWUuZG93bignW3JlZmVyZW5jZT10ZXN0UGFyYW1ldGVyXScpIGFzIEV4dC5mb3JtLmZpZWxkLlRleHRBcmVhO1xyXG4gICAgICAgIGxldCB0ZXN0UmVzdWx0ID0gbWUuZG93bignW3JlZmVyZW5jZT10ZXN0UmVzdWx0XScpIGFzIEV4dC5mb3JtLmZpZWxkLlRleHRBcmVhO1xyXG5cclxuICAgICAgICB0ZXN0VXJsLnNldFZhbHVlKGRhdGEudXJsKTtcclxuICAgICAgICB0ZXN0SGVhZGVyLnNldFZhbHVlKGRhdGEucmVxdWVzdEhlYWRlcik7XHJcbiAgICAgICAgdGVzdE1ldGhvZC5zZXRWYWx1ZShkYXRhLnJlcXVlc3RNZXRob2QpO1xyXG4gICAgICAgIHRlc3RQYXJhbWV0ZXIuc2V0VmFsdWUoZGF0YS5yZXF1ZXN0QXJndW1lbnRzKTtcclxuICAgICAgICBtYXJrZG93bkRvYy5zZXRWYWx1ZShkYXRhLmh0bWxEb2MpO1xyXG5cclxuICAgICAgICB0ZXN0UmVzdWx0LnNldFZhbHVlKGRhdGEucmVxdWVzdFJlc3VsdCk7XHJcbiAgICB9XHJcbn0gYXMgTWFpblZpZXdDb25maWc7XHJcblxyXG5cclxuZXhwb3J0IHsgTWFpblZpZXcsIE1haW5WaWV3Q29uZmlnIH07IiwiaW1wb3J0IE1haW5WaWV3IGZyb20gXCIuL2NvbXBvbmVudHMvTWFpblZpZXdcIjtcclxuXHJcbkV4dC5vblJlYWR5KCgpID0+IHtcclxuICBFeHQuY3JlYXRlKEV4dC5jb250YWluZXIuVmlld3BvcnQuZ2V0TmFtZSgpLE1haW5WaWV3KTtcclxufSk7XHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==